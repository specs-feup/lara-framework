/**
 * Base class that represents a code mutator.
 * 
 * This should not be instantiated directly, instead it should be extended.
 * 
 * @constructor
 *
 * @param {String} [name="<unnamed mutator>"] - the name of the mutator
 *
 */
var Mutator = function(name) {
	this.name = name === undefined ? "<unnamed mutator>" : name.toString();
	// True if the current code is mutated, false otherwise
	this.isMutated = false;
	// If true, before each call to .mutate() will check if the code is already mutated, 
	// and call restore before the mutation is applied
	this.automaticRestore = true;
};



/**
 * @return {String} the name of this mutator
 */
Mutator.prototype.getName = function() {
	return this.name;
}


/**
 * Enables/disables automatic restore. Is enabled by default.
 *
 * If enabled, before each call to .mutate() will check if the code is already mutated, and call restore before the mutation is applied.
 *
 * @param {boolean} [value=true] - true to enable, false to disable
 */
Mutator.prototype.setAutomaticRestore = function(value) {
	if(value === undefined) {
		value = true;
	}
	
	this.automaticRestore = value;
}

/**
 * Introduces a single mutation to the code. 
 * If the code has been mutated already, restores the code before mutating again. 
 * If there are no mutations left, does nothing.
 *
 *
 */
Mutator.prototype.mutate = function() {
	// If no mutations left, do nothing
	if(!this.hasMutations()) {
		return;
	}
	
	// If code is currently mutated, call restore first
	// Otherwise, do nothing
	if(this.isMutated) {
		if(this.automaticRestore) {
			this.restore();
		} else {
			println("Calling .mutate() without .restore()");
			return;
		}

	}
	
	// Now can do the mutation
	this.isMutated = true;
	this._mutatePrivate();
}


/**
 * If the code has been mutated, restores the code to its original state. If not, does nothing.
 */
Mutator.prototype.restore = function() {
	// If not mutated, return 
	if(!this.isMutated) {
		return;
	}

	this.isMutated = false;
	this._restorePrivate();
}

/**
 * The number of mutations this mutator will apply
 */
Mutator.prototype.getTotalMutantions = function() {
	return 1;
}


/*** TO IMPLEMENT ***/

/**
 * @return {boolean} true, if the Mutator still has mutations left to do, false otherwise.
 */
Mutator.prototype.hasMutations = function() {
	notImplemented("Mutator.hasMutations");
}


/**
 * @return {$jp} the point in the code where the mutation will occur or his occurring, or undefined if there are not more mutations left, or if this concept is not applicable to this mutator.
 */
Mutator.prototype.getMutationPoint = function() {
	notImplemented("Mutator.getMutationPoint");
} 

/**
 * @return {$jp} the point with currently mutated code, or undefined if this concept is not applicable to this mutator.
 */
Mutator.prototype.getCurrentMutation = function() {
	notImplemented("Mutator.getCurrentMutation");
} 

/**
 * Adds a join point to this Mutator. Is only added if the Mutator can be applied over this join point, otherwise it will be ignored.
 */
Mutator.prototype.addJp = function($joinpoint) {
	notImplemented("Mutator.addJp");
}

/**
 * @deprecated use getName() instead
 * @return {String} the name of this Mutator
 */
Mutator.prototype.getType = function() {
	return this.getName();
}

Mutator.prototype._mutatePrivate = function() {
	notImplemented("Mutator._mutatePrivate");
}


Mutator.prototype._restorePrivate = function() {
	notImplemented("Mutator._restorePrivate");
}