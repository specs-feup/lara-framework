import lara.util.TimeUnits;
import lara._JavaTypes;

/**
 * @class
 */
var System = {};

/**
 * Returns the name of the platform where this code is executing
 */
System.getCurrentPlatform = function() {
	notImplemented("getCurrentPlatform");
}

/**
 * @deprecated
 */
System.getExecutable = function(foldername) {
	info("DEPRECATED, function is not reliable", "System.getExecutable");
	return Java.type('pt.up.fe.specs.clang.Platforms').getExecutable(foldername);
}

System.prepareExe = function(executable) {
	return LARASystem.prepareExe(executable);
}

System.getExecutableFile = function(executableName, executableFolder, isInPath) {

	if(isInPath === undefined) {
		isInPath = false;
	}
	
	var exe = undefined;
	if(executableFolder === undefined) {
	  exe = executableName;
	} else {
	  exe = Io.getPath(executableFolder, executableName).getAbsolutePath();
	}

	// Ensure exe is a string
	exe = exe.toString();
	
	if(Platforms.isUnix()) {
		var addDotSlash = (!exe.startsWith("./")) && (!exe.startsWith("/")) && !isInPath;
		if(addDotSlash) {
			exe = "./" + exe;
		}
	}
	
	if(Platforms.isWindows() && (!exe.endsWith(".exe"))) {
		exe = exe + ".exe";
	}
	
	if(executableFolder !== undefined && !Io.isFile(exe)) {
		throw "System.getExecutableFile: Could not find executable '"+exe+"'";
	}
	
	return exe;
}

/**
 * @deprecated
 */
System.getExecutableName = function(baseName) {
	info("DEPRECATED, please use System.getExecutableFile", "System.getExecutableName");
	var exeName = baseName;
	if(Platforms.isWindows()) {
		exeName = exeName + ".exe";
	}
	else {
		exeName = "./" + exeName;
	}
	
	return exeName;
}

/**
 * Controls whether by default, if the execution of commands should print the output to the console
 **/
System.defaultPrintToConsole = true;

/**
 * @output: can be undefined, null or the name of a file. If undefined, prints the output to the console; if null, does not print the output to the console; otherwise should be a string with the name of the file where the output will be written (in this case, no output is printed in the console).
 */
 
/**
 *
 **/
System.execute = function(command, workingDir, printToConsole, outputFile, append, timeout, timeunit) {
	//println("System.execute is deprecated, use ProcessExecutor instead");
	
	/*
	if(!isString(command) && !isArray(command)) {
		throw "System.execute: 'command' must be either a String or an array, it is a " + (typeof command);
	}
	*/
	/*
	var isCommandList = undefined;
	if(isString(command)) {
		isCommandList = false;
	} else if(isArray(command)) {
		isCommandList = true;
	} else {
		throw "System.execute: 'command' must be either a String or an array";
	}
	*/
	
	if(workingDir === undefined) {
		workingDir = "./";
	}
	
	if(printToConsole === undefined) {
		printToConsole = System.defaultPrintToConsole;
	}
	
	if(outputFile === undefined) {
		outputFile = null;
	}
	
	if(append === undefined) {
		append = false;
	}
	
	if(timeunit === undefined) {
		timeunit = new TimeUnits(TimerUnit.SECONDS);
	}
	
	var timeoutNanos = null;
	if(timeout !== undefined) {
		timeoutNanos = timeunit.toNanos(timeout);
	}


	var executeOutput = _JavaTypes.getLaraSystemTools().runCommand(command, workingDir, printToConsole, timeoutNanos)
	.getOutput();
	
	if(executeOutput !== undefined) {
		checkType(executeOutput, "string");
	}
	
	return executeOutput;
}

System.sleep = function(durantionMilis) {
	SpecsSystem.sleep(durantionMilis);
}

/**
 * @return the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds
 */
System.nanos = function() {
	var system = Java.type("java.lang.System");
	return system.nanoTime();
}

System.toc = function(nanoStart, message) {
	if(message === undefined) {
		message = "Time";
	}
	
	return SpecsStrings.takeTime(message, nanoStart);
}

System.getNumLogicalCores = function() {
	var runtimeClass = Java.type("java.lang.Runtime");
	return runtimeClass.getRuntime().availableProcessors();
}

/**
 * Read an environment variable. 
 *
 * @param {string} variable name of the environment variable
 * @return {string} the value for the given environment variable name, or undefined if not present
 */
System.getEnv = function(variable) {
	checkString(variable);

	var envValue = _JavaTypes.getJavaSystem().getenv(variable);
	
	if(isUndefined(envValue)) {
		return undefined;
	}
	
	return envValue;
}