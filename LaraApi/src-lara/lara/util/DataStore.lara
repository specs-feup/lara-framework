import lara.util.StringSet;
import lara.Io;

/**
 * Interface with Java class DataStore, used for storing arbitrary information.
 */
function DataStore(data, definition) {
	if(data === undefined) {
		data = this._getDataStoreClass().newInstance("DataStore from Lara");
	}

	if(typeof data === "string") {
		data = this._getDataStoreClass().newInstance(data);
	}
	
	// Check if Lara DataStore, get Java DataStore
	if(data instanceof DataStore) {
		data = data.getData();
	}
	
	checkInstance(data, this._getDataStoreClass(), "DataStore::data", this._getDataStoreClass());

	this.data = data;

	// Determine definition
	this.definition = definition !== undefined ? definition : undefined;
	// If no definition as argument, try to get one from data
	if(this.definition === undefined) {
		if(this.data.getStoreDefinitionTry().isPresent()) {
			this.definition = this.data.getStoreDefinitionTry().get();
		}
	}
	
	// Enable key checking if there is a definition
	this.checkKeys = this.definition !== undefined;
	
	//var optionalDef = this.data.getStoreDefinition();
	//this.checkKeys = optionalDef.isPresent();

	// Build set with allowed keys
	//this.definition = undefined;
	this.allowedKeys = undefined;
	if(this.checkKeys) {
		//this.definition = optionalDef.get();
		this.allowedKeys = new StringSet();
		for(var dataKey of this.definition.getKeys()) {
			this.allowedKeys.add(dataKey.getName());
		}
	}

	// Aliases map
	this.keyAliases = {};
	/*
	if(this.allowedKeys === undefined) {
		println("ALLOWED KEYS UNDEFINED");
		println("DATA:" + data);
		println("DEFINITION:" + definition);
	}
	*/
		
	
}



/**
 * @return the value corresponding to the given key, or undefined if no value or null value is found
 */
DataStore.prototype.get = function(key) {
	checkType(key, "string", "DataStore.get::key");
	
	var processedKey = this._processKey(key, "get");
	
	var value = this.data.get(processedKey);

	if(value === null) {
		return undefined;
	}
	
	return value;
}

/**
 * Store the given value with the given key.
 */
DataStore.prototype.put = function(key, value) {
	checkType(key, "string", "DataStore.put::key");
	//println("KEY:" + key);
	var processedKey = this._processKey(key, "put");
	//println("PROCESSED KEY:" + processedKey);
	//println("DATA BEFORE:" + this.data.toString());
	this.data.setRaw(processedKey, value);
	//println("DATA AFTER:" + this.data.toString());
}

DataStore.prototype.disableKeyChecking = function() {
	//println("Disabling key checking");
	this.checkKeys = false;
}

/**
 * @return java.lang.Class representing the type of the value of the given key
 */
DataStore.prototype.getType = function(key) {
	if(!this.checkKeys) {
		info("DataStore has no StoreDefinition, retuning undefined", "DataStore.getType");
		return undefined;
	}
	
	this._checkKey(key, "getType");
	return this.definition.getKey(key).getValueClass();
}

DataStore.prototype.getKeys = function() {
	return this.allowedKeys.values();
}

DataStore.prototype.getData = function() {
	return this.data;
}

DataStore.prototype.addAlias = function(key, alias) {
	checkType(key, "string", "DataStore.addAlias::key");
	checkType(alias, "string", "DataStore.addAlias::alias");

	// Check if alias was already defined
	var previousKey = this.keyAliases[alias];
	if(previousKey !== undefined) {
		info("Alias '" + alias + "' is already defined and points to key '" + previousKey + "', overwriting definition and pointing to key '" + key + "'", "DataStore.addAlias");
	}
	
	// Check if key is valid before adding alias
	this._checkKey(key, "addAlias");

	// Add alias
	this.keyAliases[alias] = key;
}

/*** PRIVATE OVERRIDABLE FUNCTIONS ***/

/**
 * Wraps a Java DataStore around a Lara DataStore.
 */
DataStore.prototype._dataStoreWrapper = function(javaDataStore) {
	return new DataStore(javaDataStore, this.definition);
}


/*** PRIVATE FUNCTIONS ***/

/**
 * @return the Java class of DataStore
 */
DataStore.prototype._getDataStoreClass = function() {
	return Java.type("org.suikasoft.jOptions.Interfaces.DataStore");
}

/**
 * @return the Java class with utility methods for DataStore
 */
DataStore.prototype._getUtilityClass = function() {
	return Java.type("org.suikasoft.jOptions.JOptionsUtils");
}

DataStore.prototype._processKey = function(key, functionName) {
	
	// Check if there is an alias for the key
	var realKey = this.keyAliases[key];
	
	// If no alias, return original key; otherwise, return correct key
	realKey = realKey === undefined ? key : realKey;
	
	// Check the correct key
	// Disabled check in order to use extra information, such as the folder of the configuration file, when present
	//this._checkKey(realKey, functionName);
	
	return realKey;
}

DataStore.prototype._checkKey = function(key, functionName) {

	if(!this.checkKeys) {
		return;
	}
	
	if(this.allowedKeys.has(key)) {
		return;
	}
	
	functionName = functionName === undefined ? "_checkKey" : functionName;
	
	var message = "DataStore." + functionName + " : Key '" + key +"' is not allowed, available keys:\n";
	message += " - '" + this.allowedKeys.values().join("'\n - '") + "'";
	
	throw message;
}

DataStore.prototype.save = function(fileOrBaseFolder, optionalFile) {
	this._getUtilityClass().saveDataStore(Io.getPath(fileOrBaseFolder, optionalFile), this.data);
}

DataStore.prototype.load = function(fileOrBaseFolder, optionalFile) {
	if(this.definition === undefined) {
		throw "DataStore.load: current DataStore does not have keys definition, cannot load from file";
	}
	
	var javaDataStore = this._getUtilityClass().loadDataStore(Io.getPath(fileOrBaseFolder, optionalFile), this.definition);

	return this._dataStoreWrapper(javaDataStore);
}

DataStore.prototype.copy = function() {
	// Save this data store to a temporary file, a load it again. Return loaded object
	var tempFilename = "_datastore_copy_temp.datastore";
	this.save(tempFilename);
	return this.load(tempFilename);
}

/**
 * Checks if the given key has an associated value in the DataStore.
 *
 * @param {string} key - The name of the key to check
 * @returns {boolean} true if the data store has a value for the given key, false otherwise
 */
DataStore.prototype.hasValue = function(key) {
	return this.data.hasValueRaw(key);
}


/**
 *
 * @return {J#java.io.File} The folder of the configuration file, if one was used, or undefined otherwise.
 *
 */
DataStore.prototype.getConfigurationFolder = function() {
	var currentFolder = this.data.get("joptions_current_folder_path");
	
	//if(isUndefined(currentFolder)) {
	if(currentFolder.isEmpty()) {	
		return undefined;
	}
	
	//return Io.getPath(currentFolder);
	return Io.getPath(currentFolder.get());	
}; 

/**
 * The folder that is considered the working folder of the current context.
 *  
 * 1) If a configuration file was used, returns the path of the configuration file;
 * 2) Otherwise, returns the folder from where the weaver was launched.
 *
 * @return {J#java.io.File} The folder where the code represented by the AST will be written at the end of execution.
 */
DataStore.prototype.getContextFolder = function() {
	var currentFolder = this.getConfigurationFolder();
	
	if(currentFolder === undefined) {
		currentFolder = Io.getWorkingFolder();
	}
	
	return currentFolder;
}; 
