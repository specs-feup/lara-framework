import lara.code.Logger;
import lara.util.TimeUnits;

/**
 * Timer object, for timing sections of code.
 */
var Timer = function(unit, filename) {
    this.timeUnits = new TimeUnits(unit);
    this.filename = filename;
    this.printUnit = true;
	this.print = true;
	this.afterJp = undefined;
};


/**
 * Times the code of a given section.
 * 
 * @param $start [Mandatory] Starting point of the time measure
 * @param prefix Message that will appear before the time measure. If undefined, empty string will be used.
 * @param $end Ending point of the time measure. If undefined, measure is done around starting point.
 * @return name of the variable that contains the value of the elapsed time.
 */
Timer.prototype.time = function($start, prefix, $end) {
	throw "Timer.time: Not implemented yet";
}


/**
 * @param printUnit boolean
 */
Timer.prototype.setPrintUnit = function(printUnit) {
    this.printUnit = printUnit;
    return this;
}

Timer.prototype.setPrint = function(print) {
    this.print = print;
    return this;
}

Timer.prototype.getUnit = function() {
    return this.timeUnits;
}

/**
 * @return the last join point that was inserted after the $end mark
 */
Timer.prototype.getAfterJp = function() {
//	println("Timer.getAfterJp: not implemented yet, returning undefined");
//    return undefined;
	return this.afterJp;
}

/**
 * Verifies that join point start is not undefined, that it is inside a function.
 * Additionally, if $end is not undefined, checks if it is inside the same function as $start.
 *
 * [Requires] global attribute 'ancestor'. 
 *
 * @return true if $start is a valid join point for the 'time' function
 */
Timer.prototype._timeValidate = function($start, $end, functionJpName) {
    if ($start === undefined) {
        println("Timer: $start join point is undefined");
        return false;
    }

    var $function = $start.getAncestor(functionJpName);

    if ($function == undefined) {
        println("Timer: tried to measure time at join point " + $start.joinPointType + ", but it is not inside a function");
        return false;
    }

    if ($end !== undefined) {
        var $endFunction = $end.getAncestor(functionJpName);

        if ($endFunction == undefined) {
            println("Timer: tried to end measuring time at joinpoit " + $end + ", but it is not inside a function");
            return false;
        }

        // TODO: Checking if it is the same function not implemented yet, requires attribute '$function.id'
    }

    return true;
}

/**
 * Sets the join point that should be returned by .getAfterJp().
 */
Timer.prototype._setAfterJp = function($afterJp) {
	this.afterJp = $afterJp;
}
