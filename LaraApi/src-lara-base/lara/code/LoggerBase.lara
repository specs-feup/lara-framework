import weaver.JoinPoints;

/**
 * Logger object, for inserting code that prints/saves information to files.
 *
 * @param {boolean} [isGlobal = false] - Not implemented, please ignore
 * @param {String} [filename = undefined] - If set, instead of printing, will insert code for writing output to this file
 *
 */
var Logger = function(isGlobal, filename) {

    //(new lara$profiling$Energy$EnergyTest()).call();
    if (isGlobal) {
        println("[Logger-warning] global Logger is not implemented yet, reverting to local Logger");
        isGlobal = false;
    }

    this.currentElements = [];

    //this.functionsSetup = new Set();
    this.functionMap = {};

    this.isGlobal = isGlobal === undefined ? false : isGlobal;
    this.filename = filename;
	this.afterJp = undefined;

};

// Using enum pattern described here: https://stijndewitt.com/2014/01/26/enums-in-javascript/
Logger.prototype.Type = {
    NORMAL: 1,
    INT: 2,
    DOUBLE: 3,
    STRING: 4,
    CHAR: 5,
    HEX: 6,
    OCTAL: 7,
	LITERAL: 8,
	LONG: 9
}

/**
 * Used for both C and Java printf functions
 */
Logger.prototype.printfFormat = {
    1: undefined,
    2: "%d",
    3: "%f",
    4: "%s",
    5: "%c",
    6: "%x",
    7: "%o",
	8: undefined,
	9: "%ld"
}
Logger.prototype.isGlobalFn = function() {
    println("Is Global Fn:" + this.isGlobal);
}

/**
 *  The 'last' join point after .log() is called.
 * 
 * @return {$jp} 
 */
Logger.prototype.getAfterJp = function() {
	return this.afterJp;
}


Logger.prototype._clear = function() {
    this.currentElements = [];
}

/**
 * Helper method which call 'log' with 'insertBefore' set to true
 *
 */
Logger.prototype.logBefore = function($jp) {
	this.log($jp, true);
}

/**
 * Verifies that the given $jp is inside a function.
 *
 * Requires global attribute 'ancestor'. 
 *
 * @return true if $jp is inside a function, false otherwise
 */
Logger.prototype._validateJp = function($jp, functionJpName) {
	var $function = $jp.ancestor(functionJpName);
	
   
    if ($function === undefined) {
        println("Logger: tried to insert log around joinpoit " + $jp + ", but is not inside a function");
		this._clear();
		return false;
    }
	
	return true;
}

Logger.prototype._insert = function($jp, insertBefore, code) {
	this._insertCode($jp, insertBefore, code);
/*
    var insertBeforeString = insertBefore ? "before" : "after";

	if(insertBefore) {
	    $jp.insert(insertBeforeString, code);
		this.afterJp = $jp;
	} else {
		// If $jp is a 'scope' with a 'function' parent, and has 'insertReturn' action, use it
		//if($jp.instanceOf("scope") && $jp.parent !== undefined && $jp.parent.instanceOf("function"))
		//println("PARENT TYPE:" + $jp.parent.joinPointType);
		//println("JP BODY?:" + $jp.instanceOf("body"));
		this.afterJp = $jp.insertAfter(code);
	}
	
    //$jp.insert(insertBeforeString, code);
*/
    // Clear internal state
    this._clear();
}

/**
 * Inserts the given code before/after the given join point.
 *
 * Override this method if you need to specialize the insertion.
 */
Logger.prototype._insertCode = function($jp, insertBefore, code) {
    var insertBeforeString = insertBefore ? "before" : "after";

	if(insertBefore) {
	    $jp.insert(insertBeforeString, code);
		this.afterJp = $jp;
	} else {
		// If $jp is a 'scope' with a 'function' parent, and has 'insertReturn' action, use it
		//if($jp.instanceOf("scope") && $jp.parent !== undefined && $jp.parent.instanceOf("function"))
		//println("PARENT TYPE:" + $jp.parent.joinPointType);
		//println("JP BODY?:" + $jp.instanceOf("body"));
		this.afterJp = $jp.insertAfter(code);
	}
}

/**
 * Appends the given string to the current buffer.
 *
 * @param {String} text - the text to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.append = function(text) {
    return this._append_private(text, this.Type.NORMAL);
}

/**
 * The same as 'append'.
 *
 * @param {String} text - the text to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.text = function(text) {
	return this.append(text);
}

/**
 * The same as 'append', but adds a new line at the end of the buffer.
 *
 * @param {String} text - the text to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.appendln = function(text) {
	return this.append(text).ln();
}


/**
 * Appends a new line to the buffer.
 *
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.ln = function() {
    return this._append_private("\\n", this.Type.NORMAL);
}

/**
 * Appends a tab to the buffer.
 *
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.tab = function() {
    return this.append("\\t");
}

/**
 * Appends an expression that represents a double.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.appendDouble = function(expr) {
    return this._append_private(expr, this.Type.DOUBLE);
}

/**
 * The same as 'appendDouble'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.double = function(expr) {
    return this.appendDouble(expr);
}

/**
 * Appends an expression that represents a int.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.appendInt = function(expr) {
    return this._append_private(expr, this.Type.INT);
}

/**
 * The same as 'appendInt'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.int = function(expr) {
    return this.appendInt(expr);
}

/**
 * Appends an expression that represents a long.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.appendLong = function(expr) {
    return this._append_private(expr, this.Type.LONG);
}

/**
 * The same as 'appendLong'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.long = function(expr) {
	return this.appendLong(expr);
}

/**
 * Appends an expression that represents a string.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.appendString = function(expr) {
    return this._append_private(expr, this.Type.STRING);
}

/**
 * The same as 'appendString'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.string = function(expr) {
    return this.appendString(expr);
}


/**
 * Appends an expression that represents a char.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.appendChar = function(expr) {
    return this._append_private(expr, this.Type.CHAR);
}


/**
 * The same as 'appendChar'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.char = function(expr) {
    return this.appendChar(expr);
}


/**
 * Appends an expression that represents a hex number.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.appendHex = function(expr) {
    return this._append_private(expr, this.Type.HEX);
}

/**
 * The same as 'appendHex'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.hex = function(expr) {
    return this.appendHex(expr);
}

/**
 * Appends an expression that represents an octal.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance
 */
Logger.prototype.appendOctal = function(expr) {
    return this._append_private(expr, this.Type.OCTAL);
}

/**
 * The same as 'appendOctal'.
 *
 * @param {$jp} expr - the expression to append
 * @return {lara.code.Logger} the current logger instance 
 */
Logger.prototype.octal = function(expr) {
    return this.appendOctal(expr);
}


/**** PRIVATE METHODS ****/




// Private append function
Logger.prototype._append_private = function(message, type) {
    // If message is a join point, convert to code first
    if(Weaver.isJoinPoint(message)) {
		message = JoinPoints.getCode(message);
    }

    
    // Do not push message if empty
    if (message === "") {
        return this;
    }

    // Force type to be defined
    if (type === undefined) {
        throw "Logger: type must be defined";
    }

    this.currentElements.push({ content: message, type: type });
    return this;
}

Logger.prototype._warn = function(message) {
    println("[Logger Warning] " + message);
}

Logger.prototype._info = function(message) {
    println("[Logger] " + message);
}

// Receives an element{content, type} and returns the content with or without quotation marks, accordingly
Logger.prototype._getPrintableContent = function(element) {
    var enumType = this.Type;
    var content = element.content;
	if (element.type === enumType.LITERAL) {
		return content;
	}
	
    if (element.type === enumType.NORMAL || element.type === enumType.STRING) {
        return "\"" + content + "\"";
    }
	
	if (element.type === enumType.CHAR) {
        return "\'" + content + "\'";
    }
	
	// Test if it has a decimal point
	if (element.type === enumType.DOUBLE) {
		if((typeof content) !== "number") {
			return content;
		}
		
		var indexOfDecimal = String(content).indexOf(".");
		if(indexOfDecimal === -1) {
			content = content += ".0";
		}
	
		return content;
	}
	
    return content;
}

/**
 * generates printf like code for c and java, 
 * @param printFunctionName the name of the function to use (printf for C, System.out.println for Java)
 */
Logger.prototype._printfFormat = function(printFunctionName, prefix, suffix, delimiter) {
	if(delimiter === undefined) {
		delimiter = "\"";
	}
	
	if(prefix === undefined) {
		prefix = "(" + delimiter;
	}
	
	if(suffix === undefined) {
		suffix = ");";
	}

    // Create code from elements
    var code = printFunctionName + prefix +
        this.currentElements.map(function(element) {
            var enumType = this.Type;
            if (element.type === enumType.NORMAL) {
                return element.content;
            }
            //return enumType.printfFormat[element.type];
            return this.printfFormat[element.type];
        }, this).join("") + delimiter;


    var valuesCode = this.currentElements
        // Filter only non-NORMAL types
        .filter(function(element) {
            var enumType = this.Type;
            return (element.type !== enumType.NORMAL);
        }, this)
        .map(function(element) {
            // Even though _getPrintableContent tests an always unmet condition (type === NORMAL) it represents a reusable piece of code for both C and C++
            return this._getPrintableContent(element);
        }, this).join(", ");

    if (valuesCode.length > 0) {
        code = code + ", " + valuesCode;
    }


    code = code + suffix;
    return code;
}

/**
 *
 *
 * @param $function Function where name will be declared
 * @param nameGenerator function that receives no arguments and generates a new name
 */
//Logger.prototype._declareName = function($function, nameGenerator) {
Logger.prototype._declareName = function(functionId, nameGenerator) {
    // Check if thislogger was already declared in the given function
    //var declaration = $function.declaration(true);
    var name = this.functionMap[functionId];

	
    if (name !== undefined) {
		alreadyDeclared = true;
        //return name;
    } else {
        name = nameGenerator(); 
        this.functionMap[functionId] = name;
		alreadyDeclared = false;
    }
	
	return {
        name: name,
        alreadyDeclared: alreadyDeclared
    };
}

