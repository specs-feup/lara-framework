//////////////////////////////////////////////////////
// This file is generated by build-LaraJoinPoint.js //
//////////////////////////////////////////////////////

/* eslint-disable @typescript-eslint/ban-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-return */

import JavaTypes from "./lara/util/JavaTypes.js";

export class LaraJoinPoint {
  _javaObject!: any;
  constructor(obj: any) {
    this._javaObject = obj;
  }
  get actions(): string[] { return wrapJoinPoint(this._javaObject.getActions()) }
  get attributes(): string[] { return wrapJoinPoint(this._javaObject.getAttributes()) }
  get selects(): string[] { return wrapJoinPoint(this._javaObject.getSelects()) }
  get dump(): string { return wrapJoinPoint(this._javaObject.getDump()) }
  get joinPointType(): string { return wrapJoinPoint(this._javaObject.getJoinPointType()) }
  get node(): object { return wrapJoinPoint(this._javaObject.getNode()) }
  get self(): LaraJoinPoint { return wrapJoinPoint(this._javaObject.getSelf()) }
  get super(): LaraJoinPoint { return wrapJoinPoint(this._javaObject.getSuper()) }
  get children(): LaraJoinPoint[] { return wrapJoinPoint(this._javaObject.getChildren()) }
  get descendants(): LaraJoinPoint[] { return wrapJoinPoint(this._javaObject.getDescendants()) }
  get scopeNodes(): LaraJoinPoint[] { return wrapJoinPoint(this._javaObject.getScopeNodes()) }
  insert(position: "before" | "after" | "replace", code: string): LaraJoinPoint { return wrapJoinPoint(this._javaObject.insert(position, code)); }
  def(attribute: string, value: object): void { return wrapJoinPoint(this._javaObject.def(attribute, value)); }
}


export type JoinpointMapperType = { [key: string]: typeof LaraJoinPoint };

const JoinpointMappers: JoinpointMapperType[] = [];

export function registerJoinpointMapper(mapper: JoinpointMapperType): void {
  JoinpointMappers.push(mapper);
}

export function wrapJoinPoint(obj: any): any {
  if (obj === undefined) {
    return obj;
  }

  if (obj instanceof LaraJoinPoint) {
    return obj;
  }

  if (typeof obj !== "object") {
    return obj;
  }

  if (Array.isArray(obj)) {
    return obj.map(wrapJoinPoint);
  }

  if (!JavaTypes.isJavaObject(obj)) {
    console.log("Given Java join point is not a Java class: " + typeof obj);
    return obj;
  }

  const isJavaJoinPoint = JavaTypes.JoinPoint.isJoinPoint(obj);
  if (!isJavaJoinPoint) {
    throw new Error(
      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
      `Given Java join point is a Java class but is not a JoinPoint: ${obj.getClass()}`
    );
  }

  const jpType: string = obj.getJoinPointType();
  for (const mapper of JoinpointMappers) {
    if (mapper[jpType]) {
      return new mapper[jpType](obj);
    }
  }
  throw new Error("No mapper found for join point type: " + jpType);
}

export function unwrapJoinPoint(obj: any): any {
  if (obj instanceof LaraJoinPoint) {
    return obj._javaObject;
  }

  return obj;
}
