/**
 * @class
 */
var MathExtra = {};

/**
 * Attempts to simplify a mathematical expression.
 *
 * @param {string|$jp} expression - The expression to simplify.
 * @param {object} constants - An object that maps variable names to constants.
 *
 * @returns {string} simplified expression
 */
MathExtra.simplify = function(expression, constants) {
	if(isJoinPoint(expression)) {
		expression = expression.code;
	}

	checkType(expression, "string", "MathExtra.simplify(), expression");
	
	var HashMap = Java.type("java.util.HashMap");            
	var map = new HashMap();
	
	if(constants !== undefined) {
	
		for(var p in constants) {
			map.put(p, constants[p]);
		}
	
	}

	return LaraExtraApiTools.simplifyExpression(expression, map);
}


/**
 * Attempts to convert a mathematical expression to valid C code (e.g., converts ^ to a call to pow()).
 *
 * @param {string|$jp} expression - The expression to simplify.
 *
 * @returns {string} simplified expression as C code
 */
MathExtra.convertToC = function(expression) {	
	return LaraExtraApiTools.convertToC(expression);
}


/**
 * Attempts to simplify a mathematical expression, returning a string that represents C code.
 *
 * @param {string|$jp} expression - The expression to simplify.
 * @param {object} constants - An object that maps variable names to constants.
 *
 * @returns {string} simplified expression as C code
 */
MathExtra.simplifyToC = function(expression, constants) {
	var simplifiedExpr = MathExtra.simplify(expression, constants);
	return MathExtra.convertToC(simplifiedExpr);
}