/* LARAEcmaScript.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. LARAEcmaScript.java */
package org.dojo.jsl.parser.ast;

import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import larac.utils.output.ErrorMsg;
import larac.objects.Enums.Types;
import larac.exceptions.ParseExceptionData;
import larac.exceptions.StopParseException;

public class LARAEcmaScript extends LARAParserBase/*@bgen(jjtree)*/implements LARAEcmaScriptTreeConstants, LARAEcmaScriptConstants {/*@bgen(jjtree)*/
  protected JJTLARAEcmaScriptState jjtree = new JJTLARAEcmaScriptState();private static final int MAX_EXCEPTION_TOKEN_SIZE = 6;
    private static final int MAXIMUM_SYNTAX_EXCEPTIONS = 5;

        public File inputAspectFile = null;
        public FileReader inputAspectFr = null;
        public BufferedReader inputAspectBr = null;
    public List<Throwable> exceptions = new ArrayList<Throwable>() ;
    private int exprBraceCount = 0;

        public ASTExpressionStatement parseExpression(String expression) throws ParseException{
                 return ParseExpression();
        }

        public ASTStart parse() throws ParseException{
              this.exceptions = new ArrayList<Throwable>();

              return this.Start();
        }

        /* Old Code */
        @Deprecated
        public static ASTStart parseFile(String fileName){
        return parseFile(new File(fileName));
                }
        @Deprecated
        public static ASTStart parseFile(File laraFile){
            ASTStart start = null;
            File inputAspectFile = laraFile;
                FileReader inputAspectFr = null;
                BufferedReader inputAspectBr = null;
            try{
                  inputAspectFr = new FileReader(inputAspectFile);
                  inputAspectBr = new BufferedReader(inputAspectFr);
              LARAEcmaScript aspectParser = new LARAEcmaScript(inputAspectBr);
              start = aspectParser.Start();
            }
            catch (Exception e)
            {
              try {
                    if(inputAspectFr != null)
                        inputAspectFr.close();
                    if(inputAspectBr != null)
                        inputAspectBr.close();
                } catch (IOException e1) {
                                throw new RuntimeException(e1);
                }
            }

             try {
                    if(inputAspectFr != null)
                        inputAspectFr.close();
                    if(inputAspectBr != null)
                        inputAspectBr.close();

                } catch (IOException e1) {
                    throw new RuntimeException(e1);
                }
           return start;
  }

/** Function that returns the join point identifier, which can be any identifier
	or one of the following reserved words
	 **/
  final public         Token getNoReservedIdentifier() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER_NAME:{
      t = jj_consume_token(IDENTIFIER_NAME);
      break;
      }
    case CALL:{
      t = jj_consume_token(CALL);
      break;
      }
    case BEGIN:{
      t = jj_consume_token(BEGIN);
      break;
      }
    case END:{
      t = jj_consume_token(END);
      break;
      }
    case FUNCTION:{
      t = jj_consume_token(FUNCTION);
      break;
      }
    case FUNCTION_GEN:{
      t = jj_consume_token(FUNCTION_GEN);
      break;
      }
    case VAR:{
      t = jj_consume_token(VAR);
      break;
      }
    case RETURN:{
      t = jj_consume_token(RETURN);
      break;
      }
    case YIELD:{
      t = jj_consume_token(YIELD);
      break;
      }
    case IF:{
      t = jj_consume_token(IF);
      break;
      }
    case ELSE:{
      t = jj_consume_token(ELSE);
      break;
      }
    case TO:{
      t = jj_consume_token(TO);
      break;
      }
    case IN:{
      t = jj_consume_token(IN);
      break;
      }
    case SWITCH:{
      t = jj_consume_token(SWITCH);
      break;
      }
    case CASE:{
      t = jj_consume_token(CASE);
      break;
      }
    case INPUT:{
      t = jj_consume_token(INPUT);
      break;
      }
    case OUTPUT:{
      t = jj_consume_token(OUTPUT);
      break;
      }
    case CONDITION:{
      t = jj_consume_token(CONDITION);
      break;
      }
    case _DEFAULT:{
      t = jj_consume_token(_DEFAULT);
      break;
      }
    case CLASS:{
      t = jj_consume_token(CLASS);
      break;
      }
    case INTANCE_OF:{
      t = jj_consume_token(INTANCE_OF);
      break;
      }
    case BEFORE:{
      t = jj_consume_token(BEFORE);
      break;
      }
    case AFTER:{
      t = jj_consume_token(AFTER);
      break;
      }
    case AROUND:{
      t = jj_consume_token(AROUND);
      break;
      }
    case FOR:{
      t = jj_consume_token(FOR);
      break;
      }
    case WHILE:{
      t = jj_consume_token(WHILE);
      break;
      }
    case DO:{
      t = jj_consume_token(DO);
      break;
      }
    case INCLUDE:{
      t = jj_consume_token(INCLUDE);
      break;
      }
    case REPLACE:{
      t = jj_consume_token(REPLACE);
      break;
      }
    case CHECK:{
      t = jj_consume_token(CHECK);
      break;
      }
    case APPLY:{
      t = jj_consume_token(APPLY);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

  final public void noReservedIdentifier() throws ParseException {/*@bgen(jjtree) Identifier */
         ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        t = jj_consume_token(IDENTIFIER_NAME);
        break;
        }
      case CALL:{
        t = jj_consume_token(CALL);
        break;
        }
      case BEGIN:{
        t = jj_consume_token(BEGIN);
        break;
        }
      case END:{
        t = jj_consume_token(END);
        break;
        }
      case FUNCTION:{
        t = jj_consume_token(FUNCTION);
        break;
        }
      case FUNCTION_GEN:{
        t = jj_consume_token(FUNCTION_GEN);
        break;
        }
      case VAR:{
        t = jj_consume_token(VAR);
        break;
        }
      case RETURN:{
        t = jj_consume_token(RETURN);
        break;
        }
      case YIELD:{
        t = jj_consume_token(YIELD);
        break;
        }
      case IF:{
        t = jj_consume_token(IF);
        break;
        }
      case ELSE:{
        t = jj_consume_token(ELSE);
        break;
        }
      case TO:{
        t = jj_consume_token(TO);
        break;
        }
      case IN:{
        t = jj_consume_token(IN);
        break;
        }
      case SWITCH:{
        t = jj_consume_token(SWITCH);
        break;
        }
      case CASE:{
        t = jj_consume_token(CASE);
        break;
        }
      case INPUT:{
        t = jj_consume_token(INPUT);
        break;
        }
      case OUTPUT:{
        t = jj_consume_token(OUTPUT);
        break;
        }
      case CONDITION:{
        t = jj_consume_token(CONDITION);
        break;
        }
      case _DEFAULT:{
        t = jj_consume_token(_DEFAULT);
        break;
        }
      case CLASS:{
        t = jj_consume_token(CLASS);
        break;
        }
      case INTANCE_OF:{
        t = jj_consume_token(INTANCE_OF);
        break;
        }
      case BEFORE:{
        t = jj_consume_token(BEFORE);
        break;
        }
      case AFTER:{
        t = jj_consume_token(AFTER);
        break;
        }
      case AROUND:{
        t = jj_consume_token(AROUND);
        break;
        }
      case FOR:{
        t = jj_consume_token(FOR);
        break;
        }
      case WHILE:{
        t = jj_consume_token(WHILE);
        break;
        }
      case DO:{
        t = jj_consume_token(DO);
        break;
        }
      case INCLUDE:{
        t = jj_consume_token(INCLUDE);
        break;
        }
      case DELETE:{
        t = jj_consume_token(DELETE);
        break;
        }
      case REPLACE:{
        t = jj_consume_token(REPLACE);
        break;
        }
      case CHECK:{
        t = jj_consume_token(CHECK);
        break;
        }
      case APPLY:{
        t = jj_consume_token(APPLY);
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
           //jjtThis.setCoord(t,t);

    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/*****************************************
 * ECMA SYNTACTIC GRAMMARS  STARTS HERE  *
 *****************************************/

/*******************************************************************************
 ************************    LARA SYNTACTIC GRAMMAR    ************************* 
 *******************************************************************************/

        /**
     * A LARA file can contain zero or more includes and imports, followed by definitions of aspectdefs,
     * codedefs, functions and global variables
     **/
  final public         ASTStart Start() throws ParseException {/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IMPORT:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_1;
        }
        Import();
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASPECTDEF:
        case CODEDEF:
        case FUNCTION:
        case FUNCTION_GEN:
        case NEW:
        case THIS:
        case VAR:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_2;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case ASPECTDEF:{
          AspectDef();
          break;
          }
        case CODEDEF:{
          CodeDef();
          break;
          }
        case FUNCTION:
        case FUNCTION_GEN:
        case NEW:
        case THIS:
        case VAR:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          Declaration();
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
    throw new Error("Missing return statement in function");
}

  final public void Declaration() throws ParseException {
    if (jj_2_1(2147483647)) {
      GeneratorFunctionDeclaration();
    } else if (jj_2_2(2147483647)) {
      FunctionDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        VariableStatement();
        break;
        }
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
ASTAssignmentExpression jjtn001 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          LeftHandSideExpression();
          AssignmentOperator();
          AssignmentExpression();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case SEMICOLON:{
            jj_consume_token(SEMICOLON);
            break;
            }
          default:
            jj_la1[5] = jj_gen;
            ;
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
        }
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/**
     * The path to a file that is not in the same path of the invoked LARA file. With one import it is
     * possible to import one or every file within a package
     **/
  final public         void Import() throws ParseException {/*@bgen(jjtree) Import */
         ASTImport jjtn000 = new ASTImport(JJTIMPORT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token t; Token begin; Token end;
    try {
      begin = jj_consume_token(IMPORT);
      t = FilePath();
      end = EndStatement();
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(t.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** FilePath
	* gets the path to a file or all the files in the package 
	**/
  final public         Token FilePath() throws ParseException {Token t;
    label_3:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_3;
      }
      Identifier();
      jj_consume_token(DOT);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER_NAME:{
      t = jj_consume_token(IDENTIFIER_NAME);
      break;
      }
    case STAR:{
      t = jj_consume_token(STAR);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
}

/** FilePathNoSTar
	* gets the path to a file in a package
	**/
  final public         void FilePathNoSTar() throws ParseException {/*@bgen(jjtree) FilePath */
  ASTFilePath jjtn000 = new ASTFilePath(JJTFILEPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_4:
      while (true) {
        Identifier();
        jj_consume_token(DOT);
        if (jj_2_4(2)) {
          ;
        } else {
          break label_4;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/**
     * Code Definition A parcel of native code or LARA-Code to be used by the insert/output action. To define the target
     * language, one has to define the type of the codedef, such as: codedef<C>, this means that the code to be inserted
     * is written in C language. A code definition needs an identifier and its body is code that can contain a tag such
     * as "<a>" to insert information on the code such as: join point property or a variable value. To use those tags,
     * the codedef must have input arguments to refer those to specific values.
     **/
  final public         void CodeDef() throws ParseException {/*@bgen(jjtree) CodeDef */
         ASTCodeDef jjtn000 = new ASTCodeDef(JJTCODEDEF);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token name, code, language, begin, end;
    try {
jjtn000.setLanguage("native");
      begin = jj_consume_token(CODEDEF);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        jj_consume_token(LT);
        language = jj_consume_token(IDENTIFIER_NAME);
        jj_consume_token(GT);
jjtn000.setLanguage(language.image);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        ;
      }
      name = jj_consume_token(IDENTIFIER_NAME);
jjtn000.setName(name.image);
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER_NAME:{
            FormalParameterList();
            break;
            }
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
          }
        default:
          jj_la1[10] = jj_gen;
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            {if (true) throw (RuntimeException)jjte001;}
                          }
                          if (jjte001 instanceof ParseException) {
                            {if (true) throw (ParseException)jjte001;}
                          }
                          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
      }
      code = jj_consume_token(CODE_LITERAL);
String simpleCode = code.image.substring(2,code.image.length()-2);
                        jjtn000.setCode(simpleCode);
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/**
     * Input arguments The arguments to be defined when a "aspect-call" action is stated. They can be normal variables
     * or variables referent to a specific join point. The normal variables can have a default value
     **/
  final public         void Input() throws ParseException {/*@bgen(jjtree) Input */
                               ASTInput jjtn000 = new ASTInput(JJTINPUT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
                               jjtn000.jjtSetFirstToken(getToken(1));Token begin, end;
    try {
      begin = jj_consume_token(INPUT);
      VariableDeclarationList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        ;
      }
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/**
     * Output arguments List of normal variables or variables referent to a specific join point. The normal variables
     * can have a default value
     **/
  final public         void Output() throws ParseException {/*@bgen(jjtree) Output */
                                 ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));Token begin, end;
    try {
      begin = jj_consume_token(OUTPUT);
      VariableDeclarationList();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        jj_consume_token(SEMICOLON);
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/**
     * Static List of static variables and functions, which can be accessed statically in the aspect. The variables
     * values are shared between all aspect instances
     **/
  final public         void Static() throws ParseException {/*@bgen(jjtree) Static */
  ASTStatic jjtn000 = new ASTStatic(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STATICDECL);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:
        case FUNCTION_GEN:
        case VAR:{
          ;
          break;
          }
        default:
          jj_la1[13] = jj_gen;
          break label_5;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
          VariableStatement();
          break;
          }
        case FUNCTION_GEN:{
          GeneratorFunctionDeclaration();
          break;
          }
        case FUNCTION:{
          FunctionDeclaration();
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Initialize
	 * Similar to a constructor. A block of JavaScript code to initialize variables, inter alia
	 **/
  final public         void Initialize() throws ParseException {/*@bgen(jjtree) Initialize */
  ASTInitialize jjtn000 = new ASTInitialize(JJTINITIALIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(INITIALIZE);
      JavaScript();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Finalize
	 * Similar to a destructor. A block of JavaScript code to finalize output variables, inter alia
	 **/
  final public         void Finalize() throws ParseException {/*@bgen(jjtree) Finalize */
  ASTFinalize jjtn000 = new ASTFinalize(JJTFINALIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(FINALIZE);
      JavaScript();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Check
	 * Set of conditions to verify input arguments and other important stats that specify if the aspect can be executed
	 **/
  final public         void Check() throws ParseException {/*@bgen(jjtree) Check */
  ASTCheck jjtn000 = new ASTCheck(JJTCHECK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(CHECK);
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SEMICOLON:{
        EndStatement();
        label_6:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELETE:
          case FUNCTION:
          case FUNCTION_GEN:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            ;
            break;
            }
          default:
            jj_la1[15] = jj_gen;
            break label_6;
          }
          LogicalORExpression();
          EndStatement();
        }
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Aspect Definition
	 * The aspect definition can contain outputs and inputs variables, a check to verify those variables, an initializer and a finalizer to deal with information to be handler before and after the aspect, respectively.
	 * The body of the aspect consists of selects, applies and conditions to apply the aspect in the target program, and afters, befores, function and variable declaration to assist the apply and condition section.
	 */
  final public         void AspectDef() throws ParseException {/*@bgen(jjtree) AspectDef */
         ASTAspectDef jjtn000 = new ASTAspectDef(JJTASPECTDEF);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token aspName, begin, end;
    try {
      begin = jj_consume_token(ASPECTDEF);
      aspName = jj_consume_token(IDENTIFIER_NAME);
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:
        case OUTPUT:
        case STATICDECL:{
          ;
          break;
          }
        default:
          jj_la1[17] = jj_gen;
          break label_7;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case INPUT:{
          Input();
          break;
          }
        case OUTPUT:{
          Output();
          break;
          }
        case STATICDECL:{
          Static();
          break;
          }
        default:
          jj_la1[18] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INITIALIZE:{
        Initialize();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CHECK:{
        Check();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SELECT:
        case APPLY:
        case CALL:
        case RUN:
        case CMD:
        case CONDITION:
        case INSERT:
        case EXEC:
        case OUTPUT_ACT:
        case BEFORE:
        case AFTER:
        case REPLACE:
        case DEFINE:
        case BREAK:
        case CONTINUE:
        case DELETE:
        case FOR:
        case FUNCTION:
        case FUNCTION_GEN:
        case IF:
        case NEW:
        case RETURN:
        case YIELD:
        case THIS:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case WITH:
        case DO:
        case IMPORT:
        case SWITCH:
        case THROW:
        case TRY:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case SEMICOLON:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_8;
        }
        if (jj_2_5(2147483647)) {
          Select();
        } else if (jj_2_6(2147483647)) {
          Apply();
        } else if (jj_2_7(2147483647)) {
          AroundApply();
        } else if (jj_2_8(2147483647)) {
          Condition();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case CALL:
          case RUN:
          case CMD:
          case INSERT:
          case EXEC:
          case OUTPUT_ACT:
          case REPLACE:
          case DEFINE:
          case BREAK:
          case CONTINUE:
          case DELETE:
          case FOR:
          case FUNCTION:
          case FUNCTION_GEN:
          case IF:
          case NEW:
          case RETURN:
          case YIELD:
          case THIS:
          case TYPEOF:
          case VAR:
          case VOID:
          case WHILE:
          case WITH:
          case DO:
          case IMPORT:
          case SWITCH:
          case THROW:
          case TRY:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case SEMICOLON:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            SourceElement();
            break;
            }
          default:
            jj_la1[22] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALIZE:{
        Finalize();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      end = jj_consume_token(END);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(aspName.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Select
	 * Pointcut expression to specify which join points are intended to influence.
	 * It can contain an unique label, so it can be advised, and a pointcut expression
	 */
  final public         void Select() throws ParseException {/*@bgen(jjtree) Select */
         ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token name, begin, end;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        name = jj_consume_token(IDENTIFIER_NAME);
jjtn000.setName(name.image);
        jj_consume_token(COLON);
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      begin = jj_consume_token(SELECT);
      if (jj_2_9(2147483647)) {
        Pointcut();
      } else if (jj_2_10(2)) {
        FourthSetOp();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void FourthSetOp() throws ParseException {/*@bgen(jjtree) #Join(> 1) */
         ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token joinType;
    try {
      ThirdSetOp();
      if (jj_2_11(2)) {
        joinType = jj_consume_token(PLUS);
        FourthSetOp();
jjtn000.jjtSetValue(joinType.image);
      } else {
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ThirdSetOp() throws ParseException {/*@bgen(jjtree) #Join(> 1) */
         ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token joinType;
    try {
      FirstSetOp();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BIT_AND:
      case NATURAL_JOIN:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NATURAL_JOIN:{
          joinType = jj_consume_token(NATURAL_JOIN);
          break;
          }
        case BIT_AND:{
          joinType = jj_consume_token(BIT_AND);
          break;
          }
        default:
          jj_la1[25] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        ThirdSetOp();
jjtn000.jjtSetValue(joinType.image);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void FirstSetOp() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER_NAME:{
      Identifier();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      FourthSetOp();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/** Pointcut
	 * It can contain an identifier for the join point, a join point identifier and a possible property expression. 
	 * Each join point can have a child, the join point down to its hierarchy
	 */
  final public         void Pointcut() throws ParseException {/*@bgen(jjtree) Pointcut */
         ASTPointcut jjtn000 = new ASTPointcut(JJTPOINTCUT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token joinPoint,reference;String referenceStr;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        //e.g.: ($l1=loop){...}
        
                          reference = jj_consume_token(IDENTIFIER_NAME);
        jj_consume_token(ASSIGN);
        joinPoint = getNoReservedIdentifier();
referenceStr = reference.image;
        jj_consume_token(RPAREN);
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        if (jj_2_12(2147483647)) {
          //e.g.: $l1=loop{...}
                            reference = jj_consume_token(IDENTIFIER_NAME);
          jj_consume_token(ASSIGN);
          joinPoint = getNoReservedIdentifier();
referenceStr = reference.image;
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case INCLUDE:
          case INPUT:
          case OUTPUT:
          case APPLY:
          case TO:
          case CALL:
          case CONDITION:
          case BEGIN:
          case BEFORE:
          case AFTER:
          case AROUND:
          case REPLACE:
          case CHECK:
          case END:
          case ELSE:
          case FOR:
          case FUNCTION:
          case FUNCTION_GEN:
          case IF:
          case IN:
          case RETURN:
          case YIELD:
          case VAR:
          case WHILE:
          case CASE:
          case CLASS:
          case _DEFAULT:
          case DO:
          case SWITCH:
          case INTANCE_OF:
          case IDENTIFIER_NAME:{
            joinPoint = getNoReservedIdentifier();
referenceStr = "$"+joinPoint.image;
            break;
            }
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
jjtn000.jjtSetValue(joinPoint.image);
                jjtn000.setReference(referenceStr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        PointcutFilters();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        Pointcut();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Pointcut  properties
	 * The properties of a pointcut can be declared in three different ways:
		- it can be any property (*)
		- a set of properties that will be mapped to the default attribute
		- a property expression
	 */
  final public         void PointcutFilters() throws ParseException {
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      jj_consume_token(STAR);
      break;
      }
    case DELETE:
    case FUNCTION:
    case FUNCTION_GEN:
    case NEW:
    case THIS:
    case TYPEOF:
    case VOID:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case PLUS:
    case MINUS:
    case INCR:
    case DECR:
    case BANG:
    case TILDE:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case CODE_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:{
ASTPointcutFilters jjtn002 = new ASTPointcutFilters(JJTPOINTCUTFILTERS);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_13(2147483647)) {
          OrFiltersExpr();
jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                  jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setFullSpecified(true);
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELETE:
          case FUNCTION:
          case FUNCTION_GEN:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
ASTOrFiltersExpr jjtn001 = new ASTOrFiltersExpr(JJTORFILTERSEXPR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
            try {
              ConditionalExpression();
              label_9:
              while (true) {
                switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                case COMMA:{
                  ;
                  break;
                  }
                default:
                  jj_la1[32] = jj_gen;
                  break label_9;
                }
                jj_consume_token(COMMA);
                ConditionalExpression();
              }
            } catch (Throwable jjte001) {
if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     {if (true) throw (RuntimeException)jjte001;}
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     {if (true) throw (ParseException)jjte001;}
                                   }
                                   {if (true) throw (Error)jjte001;}
            } finally {
if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
            }
jjtree.closeNodeScope(jjtn002, true);
                                    jjtc002 = false;
                                    jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setFullSpecified(false);
            break;
            }
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } catch (Throwable jjte002) {
if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     {if (true) throw (RuntimeException)jjte002;}
                   }
                   if (jjte002 instanceof ParseException) {
                     {if (true) throw (ParseException)jjte002;}
                   }
                   {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
      }
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
}

/** "OR" Property Expr
	 * In the pointcut properties declaration, the comma is used as an OR operator (similar to ||)
	 **/
  final public         void OrFiltersExpr() throws ParseException {
ASTOrFiltersExpr jjtn001 = new ASTOrFiltersExpr(JJTORFILTERSEXPR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
    try {
      ANDFiltersExpr();
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_10;
        }
        jj_consume_token(COMMA);
        ANDFiltersExpr();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte001;}
            }
            if (jjte001 instanceof ParseException) {
              {if (true) throw (ParseException)jjte001;}
            }
            {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
              jjtn001.jjtSetLastToken(getToken(0));
            }
    }
}

/** "AND" Property Expression
	 * To combine properties such as an AND operation, the properties are declared inside brackets, converting the comma (which is the OR operator) into an AND.
	 */
  final public         void ANDFiltersExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IDENTIFIER_NAME:{
      Filter();
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
ASTANDFiltersExpr jjtn001 = new ASTANDFiltersExpr(JJTANDFILTERSEXPR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        Filter();
        label_11:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[36] = jj_gen;
            break label_11;
          }
          jj_consume_token(COMMA);
          Filter();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   {if (true) throw (RuntimeException)jjte001;}
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   {if (true) throw (ParseException)jjte001;}
                                 }
                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/** Property
	 * The property is defined by comparing a join point attribute to a value
	 **/
  final public         void Filter() throws ParseException {/*@bgen(jjtree) Filter */
         ASTFilter jjtn000 = new ASTFilter(JJTFILTER);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token prop,op;
    try {
      prop = jj_consume_token(IDENTIFIER_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:
      case NE:
      case MATCH:
      case SEQ:
      case SNEQ:{
        EqualityOperator();
        break;
        }
      case IN:
      case LT:
      case GT:
      case LE:
      case GE:
      case INTANCE_OF:{
        RelationalOperator();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      ConditionalExpression();
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setProp(prop.image);
    } catch (Throwable jjte000) {
if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
    }
}

/** Around
	 * A Statement to occur around an apply
	 * It contains a list of applies that this statement refers to. The body of this statement is JavaScript, and can be used to prepare information for the applies.
	 **/
  final public         void AroundApply() throws ParseException {/*@bgen(jjtree) AroundApply */
         ASTAroundApply jjtn000 = new ASTAroundApply(JJTAROUNDAPPLY);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token name,when, end;
         String label = "";
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        name = jj_consume_token(IDENTIFIER_NAME);
        jj_consume_token(COLON);
label = name.image;
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BEFORE:{
        when = jj_consume_token(BEFORE);
        break;
        }
      case AFTER:{
        when = jj_consume_token(AFTER);
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
ASTApplies jjtn001 = new ASTApplies(JJTAPPLIES);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
        try {
          Identifier();
          label_12:
          while (true) {
            if (jj_2_14(2)) {
              ;
            } else {
              break label_12;
            }
            jj_consume_token(COMMA);
            Identifier();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
        }
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        ;
      }
      jj_consume_token(DO);
      JavaScript();
jjtn000.setName(label);
                        jjtn000.setWhen(when.image);
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Apply
	 * Old Version of apply, only static weaving
	 * Advice each join point of the related select(s).
	 * It can contain an unique label and a list of selects to be advised by the apply. If no select is inserted, the last select with no label will be used.
	 * The body contains JavaScript, in which the actions can be declared
	 **
	void Apply() #Apply:
	{Token name, apply, end;}
	{
	  [name=<IDENTIFIER_NAME>{jjtThis.setName(name.image);} <COLON>] apply=<APPLY> [To()]
	  		JavaScript()
	  end=<END>
	  { jjtThis.setCoord(apply,end);}
	}
	/**/

        /** Apply (Static/Dynamic)
	 * The new version of the Apply statement: static or dynamic weaving
	 * Advice each join point of the related select(s).
	 * It can contain an unique label and a list of selects to be advised by the apply. If no select is inserted, the last select with no label will be used.
	 * The body contains JavaScript, in which the actions can be declared
	 **/
  final public         void Apply() throws ParseException {/*@bgen(jjtree) Apply */
         ASTApply jjtn000 = new ASTApply(JJTAPPLY);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token name, apply, end;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        name = jj_consume_token(IDENTIFIER_NAME);
jjtn000.setName(name.image);
        jj_consume_token(COLON);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        ;
      }
      apply = jj_consume_token(APPLY);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DYNAMIC:{
        jj_consume_token(DYNAMIC);
jjtn000.setDynamic(true);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SEQUENCIAL:
        case PARALLEL:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case PARALLEL:{
            jj_consume_token(PARALLEL);
jjtn000.setConcurrent(true);
            break;
            }
          case SEQUENCIAL:{
            jj_consume_token(SEQUENCIAL);
jjtn000.setConcurrent(false);
            break;
            }
          default:
            jj_la1[43] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BEFORE:
        case AFTER:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BEFORE:{
            jj_consume_token(BEFORE);
jjtn000.setTrigger("before");
            break;
            }
          case AFTER:{
            jj_consume_token(AFTER);
jjtn000.setTrigger("after");
            break;
            }
          default:
            jj_la1[45] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TO:{
        To();
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      JavaScript();
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** To
	 * list of selects that will be influenced by the apply
	 **/
  final public         void To() throws ParseException {/*@bgen(jjtree) To */
  ASTTo jjtn000 = new ASTTo(JJTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(TO);
      FourthSetOp();
      label_13:
      while (true) {
        if (jj_2_15(2147483647)) {
          ;
        } else {
          break label_13;
        }
        jj_consume_token(COMMA);
        FourthSetOp();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void SimpleAction() throws ParseException {/*@bgen(jjtree) Action */
         ASTAction jjtn000 = new ASTAction(JJTACTION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:
      case REPLACE:{
        Insert();
        break;
        }
      case DEFINE:{
        Define();
        break;
        }
      case EXEC:{
        Perform();
        break;
        }
      case OUTPUT_ACT:{
        OutputAct();
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                {if (true) throw (RuntimeException)jjte000;}
              }
              if (jjte000 instanceof ParseException) {
                {if (true) throw (ParseException)jjte000;}
              }
              {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
              }
    }
}

/** Action
	 * Actions that can be used to influence the join points.
	 * A join point variable can be used to specify the targeted join point where the action takes place 
	 **/
  final public         void Action() throws ParseException {Token t;
ASTAction jjtn003 = new ASTAction(JJTACTION);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
    try {
ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
      try {
ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
        try {
          t = jj_consume_token(IDENTIFIER_NAME);
jjtree.closeNodeScope(jjtn001, true);
                                            jjtc001 = false;
                                            jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setName(t.image);jjtn001.jjtSetValue(t.image);
                                            //jjtThis.setCoord(t,t);

        } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
        }
        label_14:
        while (true) {
          if (jj_2_16(2147483647)) {
            ;
          } else {
            break label_14;
          }
          MemberExpressionPart();
        }
        jj_consume_token(DOT);
      } catch (Throwable jjte002) {
if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte002;}
                  }
                  if (jjte002 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte002;}
                  }
                  {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:
      case REPLACE:{
        Insert();
        break;
        }
      case DEFINE:{
        Define();
        break;
        }
      case EXEC:{
        Perform();
        break;
        }
      case OUTPUT_ACT:{
        OutputAct();
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte003) {
if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte003;}
            }
            if (jjte003 instanceof ParseException) {
              {if (true) throw (ParseException)jjte003;}
            }
            {if (true) throw (Error)jjte003;}
    } finally {
if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
    }
    EndStatement();
}

  final public void ActionOnAssign() throws ParseException {/*@bgen(jjtree) Action */
          ASTAction jjtn000 = new ASTAction(JJTACTION);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
        try {
ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
          try {
            t = jj_consume_token(IDENTIFIER_NAME);
jjtree.closeNodeScope(jjtn001, true);
                                            jjtc001 = false;
                                            jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setName(t.image);jjtn001.jjtSetValue(t.image);
                                            //jjtThis.setCoord(t,t);

          } finally {
if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
          }
          label_15:
          while (true) {
            if (jj_2_17(2147483647)) {
              ;
            } else {
              break label_15;
            }
            MemberExpressionPart();
          }
          jj_consume_token(DOT);
        } catch (Throwable jjte002) {
if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte002;}
                    }
                    if (jjte002 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte002;}
                    }
                    {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
        }
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        ;
      }
      ExecOnAssign();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/** Call
	 * Action to invoke an aspect.
	 * The aspect is called with the input arguments that requires and the call instance can have a reference variable to be used to recover information from the invoked aspect.
	 **/
  final public         void Call() throws ParseException {/*@bgen(jjtree) Call */
         ASTCall jjtn000 = new ASTCall(JJTCALL);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token aspVarName,aspName,ref, end;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:{
        jj_consume_token(CALL);
        if (jj_2_18(2147483647)) {
          LeftHandSideExpression();
          jj_consume_token(COLON);
        } else {
          ;
        }
        break;
        }
      case VAR:{
        jj_consume_token(VAR);
        Identifier();
        jj_consume_token(ASSIGN);
        jj_consume_token(CALL);
        break;
        }
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        LeftHandSideExpression();
        jj_consume_token(ASSIGN);
        jj_consume_token(CALL);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_19(2)) {
        FilePathNoSTar();
      } else {
        ;
      }
      aspName = jj_consume_token(IDENTIFIER_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        Arguments();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
      end = EndStatement();
jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setAspName(aspName.image);
            // jjtThis.setCoord(aspName,end);

    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Run
	 * Execution of an external tool.
	 **/
  final public         void Run() throws ParseException {/*@bgen(jjtree) Run */
         ASTRun jjtn000 = new ASTRun(JJTRUN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token run, toolName, end;
    try {
      run = jj_consume_token(RUN);
      if (jj_2_20(2147483647)) {
        LeftHandSideExpression();
        jj_consume_token(COLON);
      } else {
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:
      case INPUT:
      case OUTPUT:
      case APPLY:
      case TO:
      case CALL:
      case CONDITION:
      case BEGIN:
      case BEFORE:
      case AFTER:
      case AROUND:
      case REPLACE:
      case CHECK:
      case END:
      case ELSE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case IN:
      case RETURN:
      case YIELD:
      case VAR:
      case WHILE:
      case CASE:
      case CLASS:
      case _DEFAULT:
      case DO:
      case SWITCH:
      case INTANCE_OF:
      case IDENTIFIER_NAME:{
        toolName = getNoReservedIdentifier();
jjtn000.setToolName(toolName.image);
        break;
        }
      default:
        jj_la1[54] = jj_gen;
        ;
      }
      Arguments();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:{
        jj_consume_token(GT);
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        ;
      }
      end = EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
    }
}

/** Command
	 * Execution of a command.
	 **/
  final public         void Cmd() throws ParseException {/*@bgen(jjtree) Cmd */
         ASTCmd jjtn000 = new ASTCmd(JJTCMD);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token cmd, toolName, end;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CMD:{
        cmd = jj_consume_token(CMD);
        break;
        }
      case RUN:{
        cmd = jj_consume_token(RUN);
        jj_consume_token(CMD);
jjtn000.setNewVersion(true);
        break;
        }
      default:
        jj_la1[56] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      if (jj_2_21(2147483647)) {
        LeftHandSideExpression();
        jj_consume_token(COLON);
      } else {
        ;
      }
      Arguments();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GT:{
        jj_consume_token(GT);
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      end = EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

/** OLD CALL **
	void Call() #Call:
	{Token aspVarName,aspName,ref, end;}
	{
	   <CALL> [LOOKAHEAD(<IDENTIFIER_NAME> <COLON>)
	   					aspVarName=<IDENTIFIER_NAME><COLON>
	   							{jjtThis.setAspVarName(aspVarName.image);}]
   			  [LOOKAHEAD(2)FilePathNoSTar()]aspName=<IDENTIFIER_NAME>
		{jjtThis.setAspName(aspName.image);}
	    	[LOOKAHEAD(Arguments())Arguments()] end=<SEMICOLON>
	  // { jjtThis.setCoord(aspName,end);}
	}
	/***/

        /** Insert
	 * The insertion of code is made by indicating a codedefinition's identifier with the required arguments or writing the desired code, with the possibility of using LARA-code to be defined into the target language, such as insert<C> before %{�}%.
	 * It is also needed to say if the code is inserted before, after or around the pointcut.
	 **/
  final public         void Insert() throws ParseException {/*@bgen(jjtree) Insert */
         ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token when,language, begin, end;
    try {
jjtn000.setLanguage("native");
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:{
        begin = jj_consume_token(INSERT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BEFORE:
        case AFTER:
        case AROUND:
        case REPLACE:
        case LT:{
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case LT:{
            jj_consume_token(LT);
            language = jj_consume_token(IDENTIFIER_NAME);
            jj_consume_token(GT);
jjtn000.setLanguage(language.image);
            break;
            }
          default:
            jj_la1[58] = jj_gen;
            ;
          }
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case BEFORE:{
            when = jj_consume_token(BEFORE);
            break;
            }
          case AFTER:{
            when = jj_consume_token(AFTER);
            break;
            }
          case AROUND:{
            when = jj_consume_token(AROUND);
            break;
            }
          case REPLACE:{
            when = jj_consume_token(REPLACE);
            break;
            }
          default:
            jj_la1[59] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          ConditionalExpression();
jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setWhen(when.image);
          break;
          }
        case LPAREN:{
          Arguments();
          break;
          }
        default:
          jj_la1[60] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case REPLACE:{
        begin = jj_consume_token(REPLACE);
        ConditionalExpression();
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setWhen(begin.image);
        break;
        }
      default:
        jj_la1[61] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/** Perform
	 * Perform an action over the join point
	 **/
  final public         void Perform() throws ParseException {/*@bgen(jjtree) Perform */
         ASTPerform jjtn000 = new ASTPerform(JJTPERFORM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token action, begin, end, t;
    try {
      begin = jj_consume_token(EXEC);
      if (jj_2_22(2147483647)) {
        t = jj_consume_token(IDENTIFIER_NAME);
        jj_consume_token(COLON);
jjtn000.setVariable(t.image);
      } else {
        ;
      }
      action = getNoReservedIdentifier();
jjtn000.setAction(action.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case STRING_LITERAL:
      case CODE_LITERAL:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:
        case CODE_LITERAL:{
ASTFunctionCallParameters jjtn001 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
          try {
            TemplateLiteral();
          } catch (Throwable jjte001) {
if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
          }
          break;
          }
        case LPAREN:{
          Arguments();
          break;
          }
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[63] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/** Perform
	 * Perform an action over the join point
	 **/
  final public         void ExecOnAssign() throws ParseException {/*@bgen(jjtree) Perform */
         ASTPerform jjtn000 = new ASTPerform(JJTPERFORM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token action, begin, end, t;
    try {
      jj_consume_token(EXEC);
      //[LOOKAHEAD(< IDENTIFIER_NAME > < COLON > ) t=< IDENTIFIER_NAME > < COLON >{jjtThis.setVariable(t.image);} ]
                      action = getNoReservedIdentifier();
jjtn000.setAction(action.image);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:
      case CODE_LITERAL:{
ASTFunctionCallParameters jjtn001 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
        try {
          TemplateLiteral();
        } catch (Throwable jjte001) {
if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    {if (true) throw (RuntimeException)jjte001;}
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    {if (true) throw (ParseException)jjte001;}
                                  }
                                  {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
        }
        break;
        }
      case LPAREN:{
        Arguments();
        break;
        }
      default:
        jj_la1[64] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

// 	void CodeLiteralOnlyArgument()  #FunctionCallParameters: {}
//	{
//		TemplateLiteral()
//	}

        /** Output
	 * Similar to Insert, however it is used to output in runtime
	 **/
  final public          void OutputAct() throws ParseException {/*@bgen(jjtree) OutputAct */
          ASTOutputAct jjtn000 = new ASTOutputAct(JJTOUTPUTACT);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(OUTPUT_ACT);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRING_LITERAL:
        case CODE_LITERAL:{
          TemplateLiteral();
          break;
          }
        case IDENTIFIER_NAME:{
ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
          try {
            Identifier();
            if (jj_2_23(2147483647)) {
              Arguments();
            } else {
              ;
            }
          } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
          } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
          }
          break;
          }
        default:
          jj_la1[65] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      case LPAREN:{
        Arguments();
        break;
        }
      default:
        jj_la1[66] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               {if (true) throw (RuntimeException)jjte000;}
             }
             if (jjte000 instanceof ParseException) {
               {if (true) throw (ParseException)jjte000;}
             }
             {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
    }
}

/** Define
	 *  Assign a value to a join point attribute
	 **/
  final public         void Define() throws ParseException {/*@bgen(jjtree) Define */
         ASTDefine jjtn000 = new ASTDefine(JJTDEFINE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(DEFINE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:
      case INPUT:
      case OUTPUT:
      case APPLY:
      case TO:
      case CALL:
      case CONDITION:
      case BEGIN:
      case BEFORE:
      case AFTER:
      case AROUND:
      case REPLACE:
      case CHECK:
      case END:
      case DELETE:
      case ELSE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case IN:
      case RETURN:
      case YIELD:
      case VAR:
      case WHILE:
      case CASE:
      case CLASS:
      case _DEFAULT:
      case DO:
      case SWITCH:
      case INTANCE_OF:
      case IDENTIFIER_NAME:{
        noReservedIdentifier();
        jj_consume_token(ASSIGN);
        AssignmentExpression();
        break;
        }
      case LPAREN:{
        Arguments();
        break;
        }
      default:
        jj_la1[67] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/** Condition
	 *  Boolean expression that verifies if the apply can take place in a join point
	 **/
  final public         void Condition() throws ParseException {/*@bgen(jjtree) Condition */
         ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token t,begin, end;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        t = jj_consume_token(IDENTIFIER_NAME);
        jj_consume_token(COLON);
jjtn000.jjtSetValue(t.image);
        break;
        }
      default:
        jj_la1[68] = jj_gen;
        ;
      }
      begin = jj_consume_token(CONDITION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FOR:{
        jj_consume_token(FOR);
ASTFor jjtn001 = new ASTFor(JJTFOR);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                   jjtn001.jjtSetFirstToken(getToken(1));
        try {
          Identifier();
          label_16:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case COMMA:{
              ;
              break;
              }
            default:
              jj_la1[69] = jj_gen;
              break label_16;
            }
            jj_consume_token(COMMA);
            Identifier();
          }
        } catch (Throwable jjte001) {
if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     {if (true) throw (RuntimeException)jjte001;}
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     {if (true) throw (ParseException)jjte001;}
                                                   }
                                                   {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001, true);
                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                   }
        }
        break;
        }
      default:
        jj_la1[70] = jj_gen;
        ;
      }
      LogicalORExpression();
      end = jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             {if (true) throw (RuntimeException)jjte000;}
           }
           if (jjte000 instanceof ParseException) {
             {if (true) throw (ParseException)jjte000;}
           }
           {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
    }
}

/*******************************************************************************
 **********************   END OF LARA SYNTACTIC GRAMMAR    ********************* 
 *******************************************************************************/

        /* The following part of the grammar is the EcmaScript grammar created by The Dojo Foundation (2004-2005), and it was partially updated to conform to the requirements of LARA grammar, such as the use of actions and join point variables.
	**/

        /* Section 11.1: Primary Expressions */
  final public 
        void PrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case THIS:{
      This();
      break;
      }
    case LBRACE:{
      ObjectLiteral();
      break;
      }
    case LBRACKET:{
      ArrayLiteral();
      break;
      }
    case LPAREN:{
      ParenExpression();
      break;
      }
    case IDENTIFIER_NAME:{
      Identifier();
      break;
      }
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case CODE_LITERAL:
    case REGULAR_EXPRESSION_LITERAL:{
      Literal();
      break;
      }
    default:
      jj_la1[71] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void This() throws ParseException {/*@bgen(jjtree) ThisReference */
  ASTThisReference jjtn000 = new ASTThisReference(JJTTHISREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
ASTThisReference jjtn001 = new ASTThisReference(JJTTHISREFERENCE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(THIS);
      } finally {
if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
      }
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void ParenExpression() throws ParseException {/*@bgen(jjtree) ParenExpression */
  ASTParenExpression jjtn000 = new ASTParenExpression(JJTPARENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/* Section 7.8: Literals */
  final public 
        void Literal() throws ParseException {/*@bgen(jjtree) Literal */
          ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token t;
          Map objLiteral;
          List arrayLiteral;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DECIMAL_LITERAL:{
        t = jj_consume_token(DECIMAL_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setDecimalValue(t.image);
                        if(t.image.contains("."))
                                jjtn000.setType(Types.Float);
                        else jjtn000.setType(Types.Int);
        break;
        }
      case HEX_INTEGER_LITERAL:{
        t = jj_consume_token(HEX_INTEGER_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setHexValue(t.image);
                        jjtn000.setType(Types.Int);
        break;
        }
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStringValue(t.image);
                        jjtn000.setType(Types.String);
        break;
        }
      case BOOLEAN_LITERAL:{
        t = jj_consume_token(BOOLEAN_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setBooleanValue(t.image);
                        jjtn000.setType(Types.Boolean);
        break;
        }
      case NULL_LITERAL:{
        t = jj_consume_token(NULL_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setNullValue();
                        jjtn000.setType(Types.Null);
        break;
        }
      case REGULAR_EXPRESSION_LITERAL:{
        t = jj_consume_token(REGULAR_EXPRESSION_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setRegexValue(t.image);
                        jjtn000.setType(Types.RegEx);
        break;
        }
      case CODE_LITERAL:{
        t = jj_consume_token(CODE_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setCodeValue(t.image);
                        jjtn000.setType(Types.Code);
        break;
        }
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void TemplateLiteral() throws ParseException {/*@bgen(jjtree) Literal */
          ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STRING_LITERAL:{
        t = jj_consume_token(STRING_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setStringValue(t.image);
                        jjtn000.setType(Types.String);
        break;
        }
      case CODE_LITERAL:{
        t = jj_consume_token(CODE_LITERAL);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setCodeValue(t.image);
                        jjtn000.setType(Types.Code);
        break;
        }
      default:
        jj_la1[73] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void Identifier() throws ParseException {/*@bgen(jjtree) Identifier */
          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      t = jj_consume_token(IDENTIFIER_NAME);
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
           /*{jjtThis.setCoord(t,t); }*/

    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void LabelIdentifier() throws ParseException {/*@bgen(jjtree) Identifier */
          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LABEL_IDENTIFIER:{
        t = jj_consume_token(LABEL_IDENTIFIER);
        break;
        }
      case IDENTIFIER_NAME:{
        t = jj_consume_token(IDENTIFIER_NAME);
        break;
        }
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
           /*{jjtThis.setCoord(t,t); }*/

    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

/* Section 11.1.4: Array Initialiser */
  final public 
        void ArrayLiteral() throws ParseException {/*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACKET);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ElisionFirst();
        break;
        }
      default:
        jj_la1[75] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        ElementList();
        break;
        }
      default:
        jj_la1[76] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ElementList() throws ParseException {
    AssignmentExpression();
    label_17:
    while (true) {
      if (jj_2_24(2)) {
        ;
      } else {
        break label_17;
      }
      Elision();
      AssignmentExpression();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
      Elision();
      break;
      }
    default:
      jj_la1[77] = jj_gen;
      ;
    }
}

  final public void Elision() throws ParseException {
    jj_consume_token(COMMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMMA:{
ASTEmptyPositions jjtn001 = new ASTEmptyPositions(JJTEMPTYPOSITIONS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
      try {
        label_18:
        while (true) {
          jj_consume_token(COMMA);
jjtn001.inc();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[78] = jj_gen;
            break label_18;
          }
        }
      } finally {
if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
      }
      break;
      }
    default:
      jj_la1[79] = jj_gen;
      ;
    }
}

  final public void ElisionFirst() throws ParseException {/*@bgen(jjtree) EmptyPositions */
  ASTEmptyPositions jjtn000 = new ASTEmptyPositions(JJTEMPTYPOSITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(COMMA);
jjtn000.inc();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        label_19:
        while (true) {
          jj_consume_token(COMMA);
jjtn000.inc();
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case COMMA:{
            ;
            break;
            }
          default:
            jj_la1[80] = jj_gen;
            break label_19;
          }
        }
        break;
        }
      default:
        jj_la1[81] = jj_gen;
        ;
      }
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.1.5: Object Initialiser */
  final public 
        void ObjectLiteral() throws ParseException {/*@bgen(jjtree) ObjectLiteral */
  ASTObjectLiteral jjtn000 = new ASTObjectLiteral(JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
exprBraceCount++;
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:
      case INPUT:
      case OUTPUT:
      case APPLY:
      case TO:
      case CALL:
      case CONDITION:
      case BEGIN:
      case BEFORE:
      case AFTER:
      case AROUND:
      case REPLACE:
      case CHECK:
      case END:
      case DELETE:
      case ELSE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case IN:
      case RETURN:
      case YIELD:
      case VAR:
      case WHILE:
      case CASE:
      case CLASS:
      case _DEFAULT:
      case DO:
      case SWITCH:
      case INTANCE_OF:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        PropertyNameAndValueList();
        break;
        }
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
exprBraceCount--;
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void PropertyNameAndValueList() throws ParseException {
    PropertyNameAndValue();
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[83] = jj_gen;
        break label_20;
      }
      if (jj_2_25(2147483647)) {
        jj_consume_token(COMMA);
        PropertyNameAndValue();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          jj_consume_token(COMMA);
          break;
          }
        default:
          jj_la1[84] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
}

  final public void PropertyNameAndValue() throws ParseException {/*@bgen(jjtree) LiteralField */
  ASTLiteralField jjtn000 = new ASTLiteralField(JJTLITERALFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      PropertyName();
      jj_consume_token(COLON);
      AssignmentExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void PropertyName() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCLUDE:
    case INPUT:
    case OUTPUT:
    case APPLY:
    case TO:
    case CALL:
    case CONDITION:
    case BEGIN:
    case BEFORE:
    case AFTER:
    case AROUND:
    case REPLACE:
    case CHECK:
    case END:
    case DELETE:
    case ELSE:
    case FOR:
    case FUNCTION:
    case FUNCTION_GEN:
    case IF:
    case IN:
    case RETURN:
    case YIELD:
    case VAR:
    case WHILE:
    case CASE:
    case CLASS:
    case _DEFAULT:
    case DO:
    case SWITCH:
    case INTANCE_OF:
    case IDENTIFIER_NAME:{
      noReservedIdentifier();
      break;
      }
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case CODE_LITERAL:
    case REGULAR_EXPRESSION_LITERAL:{
      Literal();
      break;
      }
    default:
      jj_la1[85] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* Section 11.2: Left-Hand-Side Expressions */
  final public 
        void MemberExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case FUNCTION:
    case FUNCTION_GEN:
    case THIS:
    case LBRACE:
    case LPAREN:
    case LBRACKET:
    case DECIMAL_LITERAL:
    case HEX_INTEGER_LITERAL:
    case NULL_LITERAL:
    case BOOLEAN_LITERAL:
    case STRING_LITERAL:
    case CODE_LITERAL:
    case IDENTIFIER_NAME:
    case REGULAR_EXPRESSION_LITERAL:{
ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_26(2147483647)) {
          GeneratorFunctionExpression();
        } else if (jj_2_27(2147483647)) {
          FunctionExpression();
        } else if (jj_2_28(2147483647)) {
          ArrowFunctionExpression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case THIS:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            PrimaryExpression();
            break;
            }
          default:
            jj_la1[86] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        label_21:
        while (true) {
          if (jj_2_29(2)) {
            ;
          } else {
            break label_21;
          }
          MemberExpressionPart();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      break;
      }
    case NEW:{
      AllocationExpression();
      break;
      }
    default:
      jj_la1[87] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void MemberExpressionForIn() throws ParseException {
ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_30(2147483647)) {
        GeneratorFunctionExpression();
      } else if (jj_2_31(2147483647)) {
        FunctionExpression();
      } else if (jj_2_32(2147483647)) {
        ArrowFunctionExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case THIS:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          PrimaryExpression();
          break;
          }
        default:
          jj_la1[88] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      label_22:
      while (true) {
        if (jj_2_33(2)) {
          ;
        } else {
          break label_22;
        }
        MemberExpressionPart();
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void AllocationExpression() throws ParseException {/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(NEW);
        MemberExpression();
        label_23:
        while (true) {
          if (jj_2_34(2147483647)) {
            ;
          } else {
            break label_23;
          }
          Arguments();
          label_24:
          while (true) {
            if (jj_2_35(2)) {
              ;
            } else {
              break label_24;
            }
            MemberExpressionPart();
          }
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void MemberExpressionPart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:
    case LBRACKET:{
ASTPropertyValueReference jjtn001 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LBRACKET:{
          jj_consume_token(LBRACKET);
          Expression();
          jj_consume_token(RBRACKET);
          break;
          }
        case LBRACE:{
          jj_consume_token(LBRACE);
exprBraceCount++;
          Expression();
          jj_consume_token(RBRACE);
jjtree.closeNodeScope(jjtn001, true);
                                                                                                      jjtc001 = false;
                                                                                                      jjtn001.jjtSetLastToken(getToken(0));
exprBraceCount--;
          break;
          }
        default:
          jj_la1[89] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte001;}
                  }
                  if (jjte001 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte001;}
                  }
                  {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
      }
      break;
      }
    case DOT:{
ASTPropertyIdentifierReference jjtn002 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
                                                                                                                                                      boolean jjtc002 = true;
                                                                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                                                                      jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DOT);
        noReservedIdentifier();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                                                                                        jjtree.clearNodeScope(jjtn002);
                                                                                                                                                        jjtc002 = false;
                                                                                                                                                      } else {
                                                                                                                                                        jjtree.popNode();
                                                                                                                                                      }
                                                                                                                                                      if (jjte002 instanceof RuntimeException) {
                                                                                                                                                        {if (true) throw (RuntimeException)jjte002;}
                                                                                                                                                      }
                                                                                                                                                      if (jjte002 instanceof ParseException) {
                                                                                                                                                        {if (true) throw (ParseException)jjte002;}
                                                                                                                                                      }
                                                                                                                                                      {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                                                                                                                        jjtree.closeNodeScope(jjtn002, true);
                                                                                                                                                        jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                                                      }
      }
      break;
      }
    default:
      jj_la1[90] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void CallExpression() throws ParseException {/*@bgen(jjtree) #CompositeReference(> 1) */
  ASTCompositeReference jjtn000 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MemberExpression();
      Arguments();
      label_25:
      while (true) {
        if (jj_2_36(2)) {
          ;
        } else {
          break label_25;
        }
        CallExpressionPart();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void CallExpressionForIn() throws ParseException {/*@bgen(jjtree) #CompositeReference(> 1) */
  ASTCompositeReference jjtn000 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MemberExpressionForIn();
      Arguments();
      label_26:
      while (true) {
        if (jj_2_37(2)) {
          ;
        } else {
          break label_26;
        }
        CallExpressionPart();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void CallExpressionPart() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      Arguments();
      break;
      }
    case LBRACKET:{
ASTPropertyValueReference jjtn001 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LBRACKET);
        Expression();
        jj_consume_token(RBRACKET);
      } catch (Throwable jjte001) {
if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  {if (true) throw (RuntimeException)jjte001;}
                                }
                                if (jjte001 instanceof ParseException) {
                                  {if (true) throw (ParseException)jjte001;}
                                }
                                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
      }
      break;
      }
    case DOT:{
ASTPropertyIdentifierReference jjtn002 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
                                                                                   jjtn002.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(DOT);
        noReservedIdentifier();
      } catch (Throwable jjte002) {
if (jjtc002) {
                                                                                     jjtree.clearNodeScope(jjtn002);
                                                                                     jjtc002 = false;
                                                                                   } else {
                                                                                     jjtree.popNode();
                                                                                   }
                                                                                   if (jjte002 instanceof RuntimeException) {
                                                                                     {if (true) throw (RuntimeException)jjte002;}
                                                                                   }
                                                                                   if (jjte002 instanceof ParseException) {
                                                                                     {if (true) throw (ParseException)jjte002;}
                                                                                   }
                                                                                   {if (true) throw (Error)jjte002;}
      } finally {
if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                                     jjtn002.jjtSetLastToken(getToken(0));
                                                                                   }
      }
      break;
      }
    default:
      jj_la1[91] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void Arguments() throws ParseException {/*@bgen(jjtree) FunctionCallParameters */
  ASTFunctionCallParameters jjtn000 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCLUDE:
      case INPUT:
      case OUTPUT:
      case APPLY:
      case TO:
      case CALL:
      case CONDITION:
      case BEGIN:
      case BEFORE:
      case AFTER:
      case AROUND:
      case REPLACE:
      case CHECK:
      case END:
      case DELETE:
      case ELSE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case IN:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case CASE:
      case CLASS:
      case _DEFAULT:
      case DO:
      case SWITCH:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case INTANCE_OF:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        if (jj_2_38(2147483647)) {
          NamedArgumentList();
jjtn000.areNamed = true;
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELETE:
          case FUNCTION:
          case FUNCTION_GEN:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            ArgumentList();
            break;
            }
          default:
            jj_la1[92] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
        }
      default:
        jj_la1[93] = jj_gen;
        ;
      }
      jj_consume_token(RPAREN);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void NamedArgumentList() throws ParseException {
    NamedArgument();
    label_27:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[94] = jj_gen;
        break label_27;
      }
      jj_consume_token(COMMA);
      NamedArgument();
    }
}

  final public void NamedArgument() throws ParseException {/*@bgen(jjtree) NamedArgument */
         ASTNamedArgument jjtn000 = new ASTNamedArgument(JJTNAMEDARGUMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token argument;
    try {
      argument = getNoReservedIdentifier();
jjtn000.jjtSetValue(argument.image);
      jj_consume_token(COLON);
      AssignmentExpression();
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void ArgumentList() throws ParseException {
    AssignmentExpression();
    label_28:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[95] = jj_gen;
        break label_28;
      }
      jj_consume_token(COMMA);
      AssignmentExpression();
    }
}

  final public void LeftHandSideExpression() throws ParseException {
    if (jj_2_39(2147483647)) {
      CallExpression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        MemberExpression();
        break;
        }
      default:
        jj_la1[96] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void LeftHandSideExpressionForIn() throws ParseException {
    if (jj_2_40(2147483647)) {
      CallExpressionForIn();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case FUNCTION_GEN:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        MemberExpressionForIn();
        break;
        }
      default:
        jj_la1[97] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/* Section 11.3 Postfix Expressions */
  final public 
        void PostfixExpression() throws ParseException {/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LeftHandSideExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:
      case DECR:{
        PostfixOperator();
        break;
        }
      default:
        jj_la1[98] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void PostfixOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INCR:{
        op = jj_consume_token(INCR);
        break;
        }
      case DECR:{
        op = jj_consume_token(DECR);
        break;
        }
      default:
        jj_la1[99] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.4 Unary Operators */
  final public 
        void UnaryExpression() throws ParseException {/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        PostfixExpression();
        break;
        }
      case DELETE:
      case TYPEOF:
      case VOID:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:{
        UnaryOperator();
        UnaryExpression();
        break;
        }
      default:
        jj_la1[100] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void UnaryOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:{
        op = jj_consume_token(DELETE);
        break;
        }
      case VOID:{
        op = jj_consume_token(VOID);
        break;
        }
      case TYPEOF:{
        op = jj_consume_token(TYPEOF);
        break;
        }
      case INCR:{
        op = jj_consume_token(INCR);
        break;
        }
      case DECR:{
        op = jj_consume_token(DECR);
        break;
        }
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      case TILDE:{
        op = jj_consume_token(TILDE);
        break;
        }
      case BANG:{
        op = jj_consume_token(BANG);
        break;
        }
      default:
        jj_la1[101] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.5: Multiplicative Operators */
  final public 

        void MultiplicativeExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      UnaryExpression();
      label_29:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case REM:
        case SLASH:{
          ;
          break;
          }
        default:
          jj_la1[102] = jj_gen;
          break label_29;
        }
        MultiplicativeOperator();
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void MultiplicativeOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        op = jj_consume_token(STAR);
        break;
        }
      case SLASH:{
        op = jj_consume_token(SLASH);
        break;
        }
      case REM:{
        op = jj_consume_token(REM);
        break;
        }
      default:
        jj_la1[103] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.6: Additive Operators */
  final public 
        void AdditiveExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      MultiplicativeExpression();
      label_30:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PLUS:
        case MINUS:{
          ;
          break;
          }
        default:
          jj_la1[104] = jj_gen;
          break label_30;
        }
        AdditiveOperator();
        MultiplicativeExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void AdditiveOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PLUS:{
        op = jj_consume_token(PLUS);
        break;
        }
      case MINUS:{
        op = jj_consume_token(MINUS);
        break;
        }
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.7: Bitwise Shift Operators */
  final public 
        void ShiftExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AdditiveExpression();
      label_31:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LSHIFT:
        case RSHIFT:
        case RUNSHIFT:{
          ;
          break;
          }
        default:
          jj_la1[106] = jj_gen;
          break label_31;
        }
        ShiftOperator();
        AdditiveExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ShiftOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LSHIFT:{
        op = jj_consume_token(LSHIFT);
        break;
        }
      case RSHIFT:{
        op = jj_consume_token(RSHIFT);
        break;
        }
      case RUNSHIFT:{
        op = jj_consume_token(RUNSHIFT);
        break;
        }
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.4: Relational Operators */
  final public 
        void RelationalExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ShiftExpression();
      label_32:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IN:
        case LT:
        case GT:
        case LE:
        case GE:
        case INTANCE_OF:{
          ;
          break;
          }
        default:
          jj_la1[108] = jj_gen;
          break label_32;
        }
        RelationalOperator();
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void RelationalOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        op = jj_consume_token(LT);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        break;
        }
      case LE:{
        op = jj_consume_token(LE);
        break;
        }
      case GE:{
        op = jj_consume_token(GE);
        break;
        }
      case INTANCE_OF:{
        op = jj_consume_token(INTANCE_OF);
        break;
        }
      case IN:{
        op = jj_consume_token(IN);
        break;
        }
      default:
        jj_la1[109] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void RelationalExpressionNoIn() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      ShiftExpression();
      label_33:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LT:
        case GT:
        case LE:
        case GE:
        case INTANCE_OF:{
          ;
          break;
          }
        default:
          jj_la1[110] = jj_gen;
          break label_33;
        }
        RelationalNoInOperator();
        ShiftExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void RelationalNoInOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LT:{
        op = jj_consume_token(LT);
        break;
        }
      case GT:{
        op = jj_consume_token(GT);
        break;
        }
      case LE:{
        op = jj_consume_token(LE);
        break;
        }
      case GE:{
        op = jj_consume_token(GE);
        break;
        }
      case INTANCE_OF:{
        op = jj_consume_token(INTANCE_OF);
        break;
        }
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.9: Equality Operators */
  final public 
        void EqualityExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      RelationalExpression();
      label_34:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NE:
        case MATCH:
        case SEQ:
        case SNEQ:{
          ;
          break;
          }
        default:
          jj_la1[112] = jj_gen;
          break label_34;
        }
        EqualityOperator();
        RelationalExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void EqualityExpressionNoIn() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      RelationalExpressionNoIn();
      label_35:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case EQ:
        case NE:
        case MATCH:
        case SEQ:
        case SNEQ:{
          ;
          break;
          }
        default:
          jj_la1[113] = jj_gen;
          break label_35;
        }
        EqualityOperator();
        RelationalExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void EqualityOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQ:{
        op = jj_consume_token(EQ);
        break;
        }
      case NE:{
        op = jj_consume_token(NE);
        break;
        }
      case SEQ:{
        op = jj_consume_token(SEQ);
        break;
        }
      case SNEQ:{
        op = jj_consume_token(SNEQ);
        break;
        }
      case MATCH:{
        op = jj_consume_token(MATCH);
        break;
        }
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                         jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.10: Binary Bitwise Operators */
  final public 
        void BitwiseANDExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      EqualityExpression();
      label_36:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          jj_la1[115] = jj_gen;
          break label_36;
        }
        BitwiseANDOperator();
        EqualityExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseANDExpressionNoIn() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      EqualityExpressionNoIn();
      label_37:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_AND:{
          ;
          break;
          }
        default:
          jj_la1[116] = jj_gen;
          break label_37;
        }
        BitwiseANDOperator();
        EqualityExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseANDOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      op = jj_consume_token(BIT_AND);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseXORExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseANDExpression();
      label_38:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case XOR:{
          ;
          break;
          }
        default:
          jj_la1[117] = jj_gen;
          break label_38;
        }
        BitwiseXOROperator();
        BitwiseANDExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseXORExpressionNoIn() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseANDExpressionNoIn();
      label_39:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case XOR:{
          ;
          break;
          }
        default:
          jj_la1[118] = jj_gen;
          break label_39;
        }
        BitwiseXOROperator();
        BitwiseANDExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseXOROperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      op = jj_consume_token(XOR);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseORExpression() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseXORExpression();
      label_40:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          jj_la1[119] = jj_gen;
          break label_40;
        }
        BitwiseOROperator();
        BitwiseXORExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseORExpressionNoIn() throws ParseException {/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseXORExpressionNoIn();
      label_41:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case BIT_OR:{
          ;
          break;
          }
        default:
          jj_la1[120] = jj_gen;
          break label_41;
        }
        BitwiseOROperator();
        BitwiseXORExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void BitwiseOROperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      op = jj_consume_token(BIT_OR);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.11: Binary Logical Operators */
  final public 
        void LogicalANDExpression() throws ParseException {/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseORExpression();
      label_42:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_AND:{
          ;
          break;
          }
        default:
          jj_la1[121] = jj_gen;
          break label_42;
        }
        LogicalANDOperator();
        BitwiseORExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void LogicalANDExpressionNoIn() throws ParseException {/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      BitwiseORExpressionNoIn();
      label_43:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_AND:{
          ;
          break;
          }
        default:
          jj_la1[122] = jj_gen;
          break label_43;
        }
        LogicalANDOperator();
        BitwiseORExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void LogicalANDOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      op = jj_consume_token(SC_AND);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void LogicalORExpression() throws ParseException {/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalANDExpression();
      label_44:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_OR:{
          ;
          break;
          }
        default:
          jj_la1[123] = jj_gen;
          break label_44;
        }
        LogicalOROperator();
        LogicalANDExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void LogicalORExpressionNoIn() throws ParseException {/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalANDExpressionNoIn();
      label_45:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case SC_OR:{
          ;
          break;
          }
        default:
          jj_la1[124] = jj_gen;
          break label_45;
        }
        LogicalOROperator();
        LogicalANDExpressionNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void LogicalOROperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      op = jj_consume_token(SC_OR);
jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.12: Conditional Operator */
  final public 
        void ConditionalExpression() throws ParseException {/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalORExpression();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HOOK:{
        jj_consume_token(HOOK);
        AssignmentExpression();
        jj_consume_token(COLON);
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[125] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ConditionalExpressionNoIn() throws ParseException {/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      LogicalORExpressionNoIn();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case HOOK:{
        jj_consume_token(HOOK);
        AssignmentExpression();
        jj_consume_token(COLON);
        AssignmentExpressionNoIn();
        break;
        }
      default:
        jj_la1[126] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.13: Assignment Operators */
  final public 
        void AssignmentExpression() throws ParseException {/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_42(2147483647)) {
        LeftHandSideExpression();
        AssignmentOperator();
        if (jj_2_41(2147483647)) {
          ActionOnAssign();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELETE:
          case FUNCTION:
          case FUNCTION_GEN:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            AssignmentExpression();
            break;
            }
          default:
            jj_la1[127] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case FUNCTION_GEN:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ConditionalExpression();
          break;
          }
        default:
          jj_la1[128] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void AssignmentExpressionNoIn() throws ParseException {/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_44(2147483647)) {
        LeftHandSideExpression();
        AssignmentOperator();
        if (jj_2_43(2147483647)) {
          ActionOnAssign();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case DELETE:
          case FUNCTION:
          case FUNCTION_GEN:
          case NEW:
          case THIS:
          case TYPEOF:
          case VOID:
          case LBRACE:
          case LPAREN:
          case LBRACKET:
          case PLUS:
          case MINUS:
          case INCR:
          case DECR:
          case BANG:
          case TILDE:
          case DECIMAL_LITERAL:
          case HEX_INTEGER_LITERAL:
          case NULL_LITERAL:
          case BOOLEAN_LITERAL:
          case STRING_LITERAL:
          case CODE_LITERAL:
          case IDENTIFIER_NAME:
          case REGULAR_EXPRESSION_LITERAL:{
            AssignmentExpressionNoIn();
            break;
            }
          default:
            jj_la1[129] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case DELETE:
        case FUNCTION:
        case FUNCTION_GEN:
        case NEW:
        case THIS:
        case TYPEOF:
        case VOID:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ConditionalExpressionNoIn();
          break;
          }
        default:
          jj_la1[130] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void AssignmentOperator() throws ParseException {/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token op;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        op = jj_consume_token(ASSIGN);
        break;
        }
      case STARASSIGN:{
        op = jj_consume_token(STARASSIGN);
        break;
        }
      case SLASHASSIGN:{
        op = jj_consume_token(SLASHASSIGN);
        break;
        }
      case REMASSIGN:{
        op = jj_consume_token(REMASSIGN);
        break;
        }
      case PLUSASSIGN:{
        op = jj_consume_token(PLUSASSIGN);
        break;
        }
      case MINUSASSIGN:{
        op = jj_consume_token(MINUSASSIGN);
        break;
        }
      case LSHIFTASSIGN:{
        op = jj_consume_token(LSHIFTASSIGN);
        break;
        }
      case RSIGNEDSHIFTASSIGN:{
        op = jj_consume_token(RSIGNEDSHIFTASSIGN);
        break;
        }
      case RUNSIGNEDSHIFTASSIGN:{
        op = jj_consume_token(RUNSIGNEDSHIFTASSIGN);
        break;
        }
      case ANDASSIGN:{
        op = jj_consume_token(ANDASSIGN);
        break;
        }
      case XORASSIGN:{
        op = jj_consume_token(XORASSIGN);
        break;
        }
      case ORASSIGN:{
        op = jj_consume_token(ORASSIGN);
        break;
        }
      default:
        jj_la1[131] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
jjtn000.jjtSetValue(op.image);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 11.14: Comma Operator */
  final public 
        void Expression() throws ParseException {/*@bgen(jjtree) #ExpressionList(> 1) */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      AssignmentExpression();
      label_46:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[132] = jj_gen;
          break label_46;
        }
        jj_consume_token(COMMA);
        AssignmentExpression();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ExpressionNoIn() throws ParseException {
    AssignmentExpressionNoIn();
    label_47:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[133] = jj_gen;
        break label_47;
      }
      jj_consume_token(COMMA);
      AssignmentExpressionNoIn();
    }
}

/* Section 12: STATEMENTS */
  final public 
        void Statement() throws ParseException {{exprBraceCount =0;}
    if (jj_2_45(2)) {
      BodiedStatement();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case IMPORT:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        SingleStatement();
        break;
        }
      default:
        jj_la1[134] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void SingleStatement() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:{
        SimpleAction();
        break;
        }
      default:
        jj_la1[135] = jj_gen;
        if (jj_2_46(2147483647)) {
          Action();
        } else if (jj_2_47(2147483647)) {
          Call();
        } else if (jj_2_48(2147483647)) {
          Cmd();
        } else {
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case RUN:{
            Run();
            break;
            }
          default:
            jj_la1[136] = jj_gen;
            if (jj_2_49(2147483647)) {
              VariableStatement();
            } else {
              switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
              case SEMICOLON:{
                EmptyStatement();
                break;
                }
              default:
                jj_la1[137] = jj_gen;
                if (jj_2_50(2147483647)) {
                  ExpressionStatement();
                } else if (jj_2_51(2147483647)) {
                  LabelledStatement();
                } else {
                  switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
                  case CONTINUE:{
                    ContinueStatement();
                    break;
                    }
                  case YIELD:{
                    YieldStatement();
                    break;
                    }
                  case BREAK:{
                    BreakStatement();
                    break;
                    }
                  case IMPORT:{
                    ImportStatement();
                    break;
                    }
                  case RETURN:{
                    ReturnStatement();
                    break;
                    }
                  default:
                    jj_la1[138] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
                  }
                }
              }
            }
          }
        }
      }
    } catch (ParseException e) {
error_skipto(e,SEMICOLON);
    } catch (TokenMgrError error) {
exceptions.add(error);
                        if (exceptions.size() >= MAXIMUM_SYNTAX_EXCEPTIONS) {
                Exception e = new larac.exceptions.LARACompilerException("Lexer problems", error);
                error_skipto(new ParseException(error.getMessage()), SEMICOLON);
            }

//	      	error_skipto(new ParseException(e.getMessage()),SEMICOLON);
//			Exception e = new larac.exceptions.LARACompilerException("Lexer problems",error);
//			exceptions.add(error);
//	      	throw ;

    }
}

  final public void BodiedStatement() throws ParseException {
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        Block();
        break;
        }
      case IF:{
        IfStatement();
        break;
        }
      case FOR:
      case WHILE:
      case DO:{
        IterationStatement();
        break;
        }
      case SWITCH:{
        SwitchStatement();
        break;
        }
      case WITH:{
        WithStatement();
        break;
        }
      case THROW:{
        ThrowStatement();
        break;
        }
      case TRY:{
        TryStatement();
        break;
        }
      default:
        jj_la1[139] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (ParseException e) {
error_skipto(e,LBRACE);
    }
}

/* 12.1 Block Statement */
  final public 
        void Block() throws ParseException {/*@bgen(jjtree) Block */
         ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin, end;
    try {
      begin = jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        StatementList();
        break;
        }
      default:
        jj_la1[140] = jj_gen;
        ;
      }
      end = jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void StatementList() throws ParseException {/*@bgen(jjtree) #StatementList(> 1) */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      label_48:
      while (true) {
        Statement();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CALL:
        case RUN:
        case CMD:
        case INSERT:
        case EXEC:
        case OUTPUT_ACT:
        case REPLACE:
        case DEFINE:
        case BREAK:
        case CONTINUE:
        case DELETE:
        case FOR:
        case FUNCTION:
        case FUNCTION_GEN:
        case IF:
        case NEW:
        case RETURN:
        case YIELD:
        case THIS:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case WITH:
        case DO:
        case IMPORT:
        case SWITCH:
        case THROW:
        case TRY:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case SEMICOLON:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[141] = jj_gen;
          break label_48;
        }
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.2: Variable statement */
  final public 
        void VariableStatement() throws ParseException {/*@bgen(jjtree) VariableStatement */
         ASTVariableStatement jjtn000 = new ASTVariableStatement(JJTVARIABLESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin, end;
    try {
      begin = jj_consume_token(VAR);
      VariableDeclarationList();
      end = EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void VariableDeclarationList() throws ParseException {/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      VariableDeclaration();
      label_49:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[142] = jj_gen;
          break label_49;
        }
        jj_consume_token(COMMA);
        VariableDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void VariableDeclarationListNoIn() throws ParseException {/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      VariableDeclarationNoIn();
      label_50:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[143] = jj_gen;
          break label_50;
        }
        jj_consume_token(COMMA);
        VariableDeclarationNoIn();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void VariableDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
         ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token type;
    try {
      Identifier();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COLON:{
        jj_consume_token(COLON);
        type = getNoReservedIdentifier();
jjtn000.setType(type.image);
        break;
        }
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        Initialiser();
        break;
        }
      default:
        jj_la1[145] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void VariableDeclarationNoIn() throws ParseException {
    Identifier();
ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        InitialiserNoIn();
        break;
        }
      default:
        jj_la1[146] = jj_gen;
        ;
      }
    } catch (Throwable jjte001) {
if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 {if (true) throw (RuntimeException)jjte001;}
                               }
                               if (jjte001 instanceof ParseException) {
                                 {if (true) throw (ParseException)jjte001;}
                               }
                               {if (true) throw (Error)jjte001;}
    } finally {
if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
    }
}

  final public void Initialiser() throws ParseException {
    jj_consume_token(ASSIGN);
    if (jj_2_52(2147483647)) {
      ActionOnAssign();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DELETE:
      case FUNCTION:
      case FUNCTION_GEN:
      case NEW:
      case THIS:
      case TYPEOF:
      case VOID:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        AssignmentExpression();
        break;
        }
      default:
        jj_la1[147] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  final public void InitialiserNoIn() throws ParseException {
    jj_consume_token(ASSIGN);
    AssignmentExpressionNoIn();
}

/* Section 12.3: Empty Statement */
  final public 
        void EmptyStatement() throws ParseException {/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(SEMICOLON);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.4: Expression Statement */
  final public 
        void ExpressionStatement() throws ParseException {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Expression();
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public ASTExpressionStatement ParseExpression() throws ParseException {/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      if (jj_2_53(2147483647)) {
        CallExpression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FUNCTION:
        case FUNCTION_GEN:
        case NEW:
        case THIS:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          MemberExpression();
          break;
          }
        default:
          jj_la1[148] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
    throw new Error("Missing return statement in function");
}

/* Section 12.5: The if Statement */
  final public 
        void IfStatement() throws ParseException {/*@bgen(jjtree) IfStatement */
         ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(IF);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        Statement();
        break;
        }
      default:
        jj_la1[149] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.6: Iteration Statements */
  final public         void IterationStatement() throws ParseException {Token begin;Token end;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DO:{
      DoStatement();
      break;
      }
    case WHILE:{
      WhileStatement();
      break;
      }
    case FOR:{
      ForStatement();
      break;
      }
    default:
      jj_la1[150] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void DoStatement() throws ParseException {/*@bgen(jjtree) DoStatement */
         ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin, end;
    try {
      begin = jj_consume_token(DO);
      Statement();
      end = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void WhileStatement() throws ParseException {/*@bgen(jjtree) WhileStatement */
         ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void ForStatement() throws ParseException {Token begin;boolean isEach = false;
    begin = jj_consume_token(FOR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EACH:{
      jj_consume_token(EACH);
      jj_consume_token(LPAREN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
ASTForVarInStatement jjtn001 = new ASTForVarInStatement(JJTFORVARINSTATEMENT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtn001.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(VAR);
          VariableDeclarationNoIn();
          jj_consume_token(IN);
          Expression();
          jj_consume_token(RPAREN);
          Statement();
jjtree.closeNodeScope(jjtn001, true);
                                   jjtc001 = false;
                                   jjtn001.jjtSetLastToken(getToken(0));
jjtn001.setEach(true);
        } catch (Throwable jjte001) {
if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte001;}
                             }
                             if (jjte001 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte001;}
                             }
                             {if (true) throw (Error)jjte001;}
        } finally {
if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtn001.jjtSetLastToken(getToken(0));
                             }
        }
        break;
        }
      case FUNCTION:
      case FUNCTION_GEN:
      case THIS:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
ASTForInStatement jjtn002 = new ASTForInStatement(JJTFORINSTATEMENT);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                             jjtn002.jjtSetFirstToken(getToken(1));
        try {
          LeftHandSideExpressionForIn();
          jj_consume_token(IN);
          Expression();
          jj_consume_token(RPAREN);
          Statement();
jjtree.closeNodeScope(jjtn002, true);
                                   jjtc002 = false;
                                   jjtn002.jjtSetLastToken(getToken(0));
jjtn002.setEach(true);
        } catch (Throwable jjte002) {
if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               {if (true) throw (RuntimeException)jjte002;}
                             }
                             if (jjte002 instanceof ParseException) {
                               {if (true) throw (ParseException)jjte002;}
                             }
                             {if (true) throw (Error)jjte002;}
        } finally {
if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtn002.jjtSetLastToken(getToken(0));
                             }
        }
        break;
        }
      default:
        jj_la1[151] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      if (jj_2_54(2147483647)) {
ASTForStatement jjtn009 = new ASTForStatement(JJTFORSTATEMENT);
                                                                boolean jjtc009 = true;
                                                                jjtree.openNodeScope(jjtn009);
                                                                jjtn009.jjtSetFirstToken(getToken(1));
        try {
ASTEmptyExpression jjtn004 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                 boolean jjtc004 = true;
                                                                 jjtree.openNodeScope(jjtn004);
                                                                 jjtn004.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case FUNCTION_GEN:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INCR:
            case DECR:
            case BANG:
            case TILDE:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case STRING_LITERAL:
            case CODE_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:{
ASTPreAssignmentList jjtn003 = new ASTPreAssignmentList(JJTPREASSIGNMENTLIST);
                                                                   boolean jjtc003 = true;
                                                                   jjtree.openNodeScope(jjtn003);
                                                                   jjtn003.jjtSetFirstToken(getToken(1));
              try {
                ExpressionNoIn();
              } catch (Throwable jjte003) {
if (jjtc003) {
                                                                     jjtree.clearNodeScope(jjtn003);
                                                                     jjtc003 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte003 instanceof RuntimeException) {
                                                                     {if (true) throw (RuntimeException)jjte003;}
                                                                   }
                                                                   if (jjte003 instanceof ParseException) {
                                                                     {if (true) throw (ParseException)jjte003;}
                                                                   }
                                                                   {if (true) throw (Error)jjte003;}
              } finally {
if (jjtc003) {
                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                     jjtn003.jjtSetLastToken(getToken(0));
                                                                   }
              }
              break;
              }
            default:
              jj_la1[152] = jj_gen;
              ;
            }
          } catch (Throwable jjte004) {
if (jjtc004) {
                                                                   jjtree.clearNodeScope(jjtn004);
                                                                   jjtc004 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte004 instanceof RuntimeException) {
                                                                   {if (true) throw (RuntimeException)jjte004;}
                                                                 }
                                                                 if (jjte004 instanceof ParseException) {
                                                                   {if (true) throw (ParseException)jjte004;}
                                                                 }
                                                                 {if (true) throw (Error)jjte004;}
          } finally {
if (jjtc004) {
                                                                   jjtree.closeNodeScope(jjtn004,  jjtree . nodeArity ( ) == 0);
                                                                   jjtn004.jjtSetLastToken(getToken(0));
                                                                 }
          }
          jj_consume_token(SEMICOLON);
ASTEmptyExpression jjtn006 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc006 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn006);
                                                                                                                                     jjtn006.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case FUNCTION_GEN:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INCR:
            case DECR:
            case BANG:
            case TILDE:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case STRING_LITERAL:
            case CODE_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:{
ASTForConditionList jjtn005 = new ASTForConditionList(JJTFORCONDITIONLIST);
                                                                                                                                       boolean jjtc005 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn005);
                                                                                                                                       jjtn005.jjtSetFirstToken(getToken(1));
              try {
                Expression();
              } catch (Throwable jjte005) {
if (jjtc005) {
                                                                                                                                         jjtree.clearNodeScope(jjtn005);
                                                                                                                                         jjtc005 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte005 instanceof RuntimeException) {
                                                                                                                                         {if (true) throw (RuntimeException)jjte005;}
                                                                                                                                       }
                                                                                                                                       if (jjte005 instanceof ParseException) {
                                                                                                                                         {if (true) throw (ParseException)jjte005;}
                                                                                                                                       }
                                                                                                                                       {if (true) throw (Error)jjte005;}
              } finally {
if (jjtc005) {
                                                                                                                                         jjtree.closeNodeScope(jjtn005, true);
                                                                                                                                         jjtn005.jjtSetLastToken(getToken(0));
                                                                                                                                       }
              }
              break;
              }
            default:
              jj_la1[153] = jj_gen;
              ;
            }
          } catch (Throwable jjte006) {
if (jjtc006) {
                                                                                                                                       jjtree.clearNodeScope(jjtn006);
                                                                                                                                       jjtc006 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte006 instanceof RuntimeException) {
                                                                                                                                       {if (true) throw (RuntimeException)jjte006;}
                                                                                                                                     }
                                                                                                                                     if (jjte006 instanceof ParseException) {
                                                                                                                                       {if (true) throw (ParseException)jjte006;}
                                                                                                                                     }
                                                                                                                                     {if (true) throw (Error)jjte006;}
          } finally {
if (jjtc006) {
                                                                                                                                       jjtree.closeNodeScope(jjtn006,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn006.jjtSetLastToken(getToken(0));
                                                                                                                                     }
          }
          jj_consume_token(SEMICOLON);
ASTEmptyExpression jjtn008 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc008 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn008);
                                                                                                                                     jjtn008.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case FUNCTION_GEN:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INCR:
            case DECR:
            case BANG:
            case TILDE:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case STRING_LITERAL:
            case CODE_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:{
ASTPostAssignmentList jjtn007 = new ASTPostAssignmentList(JJTPOSTASSIGNMENTLIST);
                                                                                                                                       boolean jjtc007 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn007);
                                                                                                                                       jjtn007.jjtSetFirstToken(getToken(1));
              try {
                Expression();
              } catch (Throwable jjte007) {
if (jjtc007) {
                                                                                                                                         jjtree.clearNodeScope(jjtn007);
                                                                                                                                         jjtc007 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte007 instanceof RuntimeException) {
                                                                                                                                         {if (true) throw (RuntimeException)jjte007;}
                                                                                                                                       }
                                                                                                                                       if (jjte007 instanceof ParseException) {
                                                                                                                                         {if (true) throw (ParseException)jjte007;}
                                                                                                                                       }
                                                                                                                                       {if (true) throw (Error)jjte007;}
              } finally {
if (jjtc007) {
                                                                                                                                         jjtree.closeNodeScope(jjtn007, true);
                                                                                                                                         jjtn007.jjtSetLastToken(getToken(0));
                                                                                                                                       }
              }
              break;
              }
            default:
              jj_la1[154] = jj_gen;
              ;
            }
          } catch (Throwable jjte008) {
if (jjtc008) {
                                                                                                                                       jjtree.clearNodeScope(jjtn008);
                                                                                                                                       jjtc008 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte008 instanceof RuntimeException) {
                                                                                                                                       {if (true) throw (RuntimeException)jjte008;}
                                                                                                                                     }
                                                                                                                                     if (jjte008 instanceof ParseException) {
                                                                                                                                       {if (true) throw (ParseException)jjte008;}
                                                                                                                                     }
                                                                                                                                     {if (true) throw (Error)jjte008;}
          } finally {
if (jjtc008) {
                                                                                                                                       jjtree.closeNodeScope(jjtn008,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn008.jjtSetLastToken(getToken(0));
                                                                                                                                     }
          }
          jj_consume_token(RPAREN);
          Statement();
        } catch (Throwable jjte009) {
if (jjtc009) {
                                                                  jjtree.clearNodeScope(jjtn009);
                                                                  jjtc009 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte009 instanceof RuntimeException) {
                                                                  {if (true) throw (RuntimeException)jjte009;}
                                                                }
                                                                if (jjte009 instanceof ParseException) {
                                                                  {if (true) throw (ParseException)jjte009;}
                                                                }
                                                                {if (true) throw (Error)jjte009;}
        } finally {
if (jjtc009) {
                                                                  jjtree.closeNodeScope(jjtn009, true);
                                                                  jjtn009.jjtSetLastToken(getToken(0));
                                                                }
        }
      } else if (jj_2_55(2147483647)) {
ASTForVarStatement jjtn015 = new ASTForVarStatement(JJTFORVARSTATEMENT);
                                                                           boolean jjtc015 = true;
                                                                           jjtree.openNodeScope(jjtn015);
                                                                           jjtn015.jjtSetFirstToken(getToken(1));
        try {
          jj_consume_token(VAR);
ASTPreAssignmentList jjtn010 = new ASTPreAssignmentList(JJTPREASSIGNMENTLIST);
                                                                                  boolean jjtc010 = true;
                                                                                  jjtree.openNodeScope(jjtn010);
                                                                                  jjtn010.jjtSetFirstToken(getToken(1));
          try {
            VariableDeclarationList();
          } catch (Throwable jjte010) {
if (jjtc010) {
                                                                                    jjtree.clearNodeScope(jjtn010);
                                                                                    jjtc010 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte010 instanceof RuntimeException) {
                                                                                    {if (true) throw (RuntimeException)jjte010;}
                                                                                  }
                                                                                  if (jjte010 instanceof ParseException) {
                                                                                    {if (true) throw (ParseException)jjte010;}
                                                                                  }
                                                                                  {if (true) throw (Error)jjte010;}
          } finally {
if (jjtc010) {
                                                                                    jjtree.closeNodeScope(jjtn010, true);
                                                                                    jjtn010.jjtSetLastToken(getToken(0));
                                                                                  }
          }
          jj_consume_token(SEMICOLON);
ASTEmptyExpression jjtn012 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc012 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn012);
                                                                                                                                     jjtn012.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case FUNCTION_GEN:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INCR:
            case DECR:
            case BANG:
            case TILDE:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case STRING_LITERAL:
            case CODE_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:{
ASTForConditionList jjtn011 = new ASTForConditionList(JJTFORCONDITIONLIST);
                                                                                                                                       boolean jjtc011 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn011);
                                                                                                                                       jjtn011.jjtSetFirstToken(getToken(1));
              try {
                Expression();
              } catch (Throwable jjte011) {
if (jjtc011) {
                                                                                                                                         jjtree.clearNodeScope(jjtn011);
                                                                                                                                         jjtc011 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte011 instanceof RuntimeException) {
                                                                                                                                         {if (true) throw (RuntimeException)jjte011;}
                                                                                                                                       }
                                                                                                                                       if (jjte011 instanceof ParseException) {
                                                                                                                                         {if (true) throw (ParseException)jjte011;}
                                                                                                                                       }
                                                                                                                                       {if (true) throw (Error)jjte011;}
              } finally {
if (jjtc011) {
                                                                                                                                         jjtree.closeNodeScope(jjtn011, true);
                                                                                                                                         jjtn011.jjtSetLastToken(getToken(0));
                                                                                                                                       }
              }
              break;
              }
            default:
              jj_la1[155] = jj_gen;
              ;
            }
          } catch (Throwable jjte012) {
if (jjtc012) {
                                                                                                                                       jjtree.clearNodeScope(jjtn012);
                                                                                                                                       jjtc012 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte012 instanceof RuntimeException) {
                                                                                                                                       {if (true) throw (RuntimeException)jjte012;}
                                                                                                                                     }
                                                                                                                                     if (jjte012 instanceof ParseException) {
                                                                                                                                       {if (true) throw (ParseException)jjte012;}
                                                                                                                                     }
                                                                                                                                     {if (true) throw (Error)jjte012;}
          } finally {
if (jjtc012) {
                                                                                                                                       jjtree.closeNodeScope(jjtn012,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn012.jjtSetLastToken(getToken(0));
                                                                                                                                     }
          }
          jj_consume_token(SEMICOLON);
ASTEmptyExpression jjtn014 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc014 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn014);
                                                                                                                                     jjtn014.jjtSetFirstToken(getToken(1));
          try {
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case DELETE:
            case FUNCTION:
            case FUNCTION_GEN:
            case NEW:
            case THIS:
            case TYPEOF:
            case VOID:
            case LBRACE:
            case LPAREN:
            case LBRACKET:
            case PLUS:
            case MINUS:
            case INCR:
            case DECR:
            case BANG:
            case TILDE:
            case DECIMAL_LITERAL:
            case HEX_INTEGER_LITERAL:
            case NULL_LITERAL:
            case BOOLEAN_LITERAL:
            case STRING_LITERAL:
            case CODE_LITERAL:
            case IDENTIFIER_NAME:
            case REGULAR_EXPRESSION_LITERAL:{
ASTPostAssignmentList jjtn013 = new ASTPostAssignmentList(JJTPOSTASSIGNMENTLIST);
                                                                                                                                       boolean jjtc013 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn013);
                                                                                                                                       jjtn013.jjtSetFirstToken(getToken(1));
              try {
                Expression();
              } catch (Throwable jjte013) {
if (jjtc013) {
                                                                                                                                         jjtree.clearNodeScope(jjtn013);
                                                                                                                                         jjtc013 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte013 instanceof RuntimeException) {
                                                                                                                                         {if (true) throw (RuntimeException)jjte013;}
                                                                                                                                       }
                                                                                                                                       if (jjte013 instanceof ParseException) {
                                                                                                                                         {if (true) throw (ParseException)jjte013;}
                                                                                                                                       }
                                                                                                                                       {if (true) throw (Error)jjte013;}
              } finally {
if (jjtc013) {
                                                                                                                                         jjtree.closeNodeScope(jjtn013, true);
                                                                                                                                         jjtn013.jjtSetLastToken(getToken(0));
                                                                                                                                       }
              }
              break;
              }
            default:
              jj_la1[156] = jj_gen;
              ;
            }
          } catch (Throwable jjte014) {
if (jjtc014) {
                                                                                                                                       jjtree.clearNodeScope(jjtn014);
                                                                                                                                       jjtc014 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte014 instanceof RuntimeException) {
                                                                                                                                       {if (true) throw (RuntimeException)jjte014;}
                                                                                                                                     }
                                                                                                                                     if (jjte014 instanceof ParseException) {
                                                                                                                                       {if (true) throw (ParseException)jjte014;}
                                                                                                                                     }
                                                                                                                                     {if (true) throw (Error)jjte014;}
          } finally {
if (jjtc014) {
                                                                                                                                       jjtree.closeNodeScope(jjtn014,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn014.jjtSetLastToken(getToken(0));
                                                                                                                                     }
          }
          jj_consume_token(RPAREN);
          Statement();
        } catch (Throwable jjte015) {
if (jjtc015) {
                                                                             jjtree.clearNodeScope(jjtn015);
                                                                             jjtc015 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte015 instanceof RuntimeException) {
                                                                             {if (true) throw (RuntimeException)jjte015;}
                                                                           }
                                                                           if (jjte015 instanceof ParseException) {
                                                                             {if (true) throw (ParseException)jjte015;}
                                                                           }
                                                                           {if (true) throw (Error)jjte015;}
        } finally {
if (jjtc015) {
                                                                             jjtree.closeNodeScope(jjtn015, true);
                                                                             jjtn015.jjtSetLastToken(getToken(0));
                                                                           }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VAR:{
ASTForVarInStatement jjtn016 = new ASTForVarInStatement(JJTFORVARINSTATEMENT);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
                            jjtn016.jjtSetFirstToken(getToken(1));
          try {
            jj_consume_token(VAR);
            VariableDeclarationNoIn();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IN:{
              jj_consume_token(IN);
              break;
              }
            case OF:{
              jj_consume_token(OF);
isEach = true;
              break;
              }
            default:
              jj_la1[157] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Expression();
            jj_consume_token(RPAREN);
            Statement();
jjtree.closeNodeScope(jjtn016, true);
                                   jjtc016 = false;
                                   jjtn016.jjtSetLastToken(getToken(0));
jjtn016.setEach(isEach);
          } catch (Throwable jjte016) {
if (jjtc016) {
                              jjtree.clearNodeScope(jjtn016);
                              jjtc016 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte016 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte016;}
                            }
                            if (jjte016 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte016;}
                            }
                            {if (true) throw (Error)jjte016;}
          } finally {
if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016, true);
                              jjtn016.jjtSetLastToken(getToken(0));
                            }
          }
          break;
          }
        case FUNCTION:
        case FUNCTION_GEN:
        case THIS:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
ASTForInStatement jjtn017 = new ASTForInStatement(JJTFORINSTATEMENT);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
                            jjtn017.jjtSetFirstToken(getToken(1));
          try {
            LeftHandSideExpressionForIn();
            switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
            case IN:{
              jj_consume_token(IN);
              break;
              }
            case OF:{
              jj_consume_token(OF);
isEach = true;
              break;
              }
            default:
              jj_la1[158] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
            Expression();
            jj_consume_token(RPAREN);
            Statement();
jjtree.closeNodeScope(jjtn017, true);
                                    jjtc017 = false;
                                    jjtn017.jjtSetLastToken(getToken(0));
jjtn017.setEach(isEach);
          } catch (Throwable jjte017) {
if (jjtc017) {
                              jjtree.clearNodeScope(jjtn017);
                              jjtc017 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte017 instanceof RuntimeException) {
                              {if (true) throw (RuntimeException)jjte017;}
                            }
                            if (jjte017 instanceof ParseException) {
                              {if (true) throw (ParseException)jjte017;}
                            }
                            {if (true) throw (Error)jjte017;}
          } finally {
if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                              jjtn017.jjtSetLastToken(getToken(0));
                            }
          }
          break;
          }
        default:
          jj_la1[159] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
      }
    default:
      jj_la1[160] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

/* Section 12.7: The continue Statement */
  final public 
        void ContinueStatement() throws ParseException {/*@bgen(jjtree) ContinueStatement */
         ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(CONTINUE);
      if (jj_2_56(2147483647)) {
        LabelIdentifier();
      } else {
        ;
      }
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.8: The break Statement */
  final public 
        void BreakStatement() throws ParseException {/*@bgen(jjtree) BreakStatement */
         ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(BREAK);
      if (jj_2_57(2147483647)) {
        LabelIdentifier();
      } else {
        ;
      }
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.9 The return Statement */
  final public 
        void ReturnStatement() throws ParseException {/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(RETURN);
ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_58(2147483647)) {
          Expression();
        } else {
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             {if (true) throw (RuntimeException)jjte001;}
                           }
                           if (jjte001 instanceof ParseException) {
                             {if (true) throw (ParseException)jjte001;}
                           }
                           {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
      }
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Custom */
  final public         void YieldStatement() throws ParseException {/*@bgen(jjtree) YieldStatement */
         ASTYieldStatement jjtn000 = new ASTYieldStatement(JJTYIELDSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(YIELD);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case STAR:{
        YieldStar();
        break;
        }
      default:
        jj_la1[161] = jj_gen;
        ;
      }
ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        if (jj_2_59(2147483647)) {
          Expression();
        } else {
          ;
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte001;}
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte001;}
                                                 }
                                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
      }
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void YieldStar() throws ParseException {/*@bgen(jjtree) YieldStar */
  ASTYieldStar jjtn000 = new ASTYieldStar(JJTYIELDSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(STAR);
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.10: The with Statement */
  final public 
        void WithStatement() throws ParseException {/*@bgen(jjtree) WithStatement */
  ASTWithStatement jjtn000 = new ASTWithStatement(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(WITH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* 12.11 The switch Statement */
  final public 
        void SwitchStatement() throws ParseException {/*@bgen(jjtree) SwitchStatement */
         ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(SWITCH);
      jj_consume_token(LPAREN);
      Expression();
      jj_consume_token(RPAREN);
      CaseBlock();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void CaseBlock() throws ParseException {/*@bgen(jjtree) CaseGroups */
         ASTCaseGroups jjtn000 = new ASTCaseGroups(JJTCASEGROUPS);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin,end;
    try {
      begin = jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        CaseClauses();
        break;
        }
      default:
        jj_la1[162] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RBRACE:{
        end = jj_consume_token(RBRACE);
        break;
        }
      case _DEFAULT:{
        DefaultClause();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CASE:{
          CaseClauses();
          break;
          }
        default:
          jj_la1[163] = jj_gen;
          ;
        }
        end = jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[164] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void CaseClauses() throws ParseException {
    label_51:
    while (true) {
      CaseClause();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASE:{
        ;
        break;
        }
      default:
        jj_la1[165] = jj_gen;
        break label_51;
      }
    }
}

  final public void CaseClause() throws ParseException {/*@bgen(jjtree) CaseGroup */
         ASTCaseGroup jjtn000 = new ASTCaseGroup(JJTCASEGROUP);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
ASTCaseGuard jjtn001 = new ASTCaseGuard(JJTCASEGUARD);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        begin = jj_consume_token(CASE);
        Expression();
        jj_consume_token(COLON);
      } catch (Throwable jjte001) {
if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      {if (true) throw (RuntimeException)jjte001;}
                    }
                    if (jjte001 instanceof ParseException) {
                      {if (true) throw (ParseException)jjte001;}
                    }
                    {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        StatementList();
        break;
        }
      default:
        jj_la1[166] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void DefaultClause() throws ParseException {/*@bgen(jjtree) CaseGroup */
         ASTCaseGroup jjtn000 = new ASTCaseGroup(JJTCASEGROUP);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
ASTCaseGuard jjtn001 = new ASTCaseGuard(JJTCASEGUARD);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
      try {
        begin = jj_consume_token(_DEFAULT);
        jj_consume_token(COLON);
      } finally {
if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        StatementList();
        break;
        }
      default:
        jj_la1[167] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 12.12: Labelled Statements */
  final public 
        void LabelledStatement() throws ParseException {/*@bgen(jjtree) LabelledStatement */
  ASTLabelledStatement jjtn000 = new ASTLabelledStatement(JJTLABELLEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(COLON);
      Statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ThrowStatement() throws ParseException {/*@bgen(jjtree) ThrowStatement */
         ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(THROW);
      Expression();
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void TryStatement() throws ParseException {/*@bgen(jjtree) TryStatement */
         ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(TRY);
      Block();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FINALLY:{
        Finally();
        break;
        }
      case CATCH:{
        Catch();
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case FINALLY:{
          Finally();
          break;
          }
        default:
          jj_la1[168] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[169] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void Catch() throws ParseException {/*@bgen(jjtree) CatchClause */
         ASTCatchClause jjtn000 = new ASTCatchClause(JJTCATCHCLAUSE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(CATCH);
      jj_consume_token(LPAREN);
      Identifier();
      jj_consume_token(RPAREN);
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void Finally() throws ParseException {/*@bgen(jjtree) FinallyClause */
         ASTFinallyClause jjtn000 = new ASTFinallyClause(JJTFINALLYCLAUSE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(FINALLY);
      Block();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 13: Function Definition */
  final public 
        void FunctionDeclaration() throws ParseException {/*@bgen(jjtree) FunctionDeclaration */
         ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(FUNCTION);
      Identifier();
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER_NAME:{
          FormalParameterList();
          break;
          }
        default:
          jj_la1[170] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  {if (true) throw (RuntimeException)jjte001;}
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  {if (true) throw (ParseException)jjte001;}
                                                }
                                                {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void GeneratorFunctionDeclaration() throws ParseException {/*@bgen(jjtree) GeneratorFunctionDeclaration */
         ASTGeneratorFunctionDeclaration jjtn000 = new ASTGeneratorFunctionDeclaration(JJTGENERATORFUNCTIONDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(FUNCTION_GEN);
      Identifier();
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER_NAME:{
          FormalParameterList();
          break;
          }
        default:
          jj_la1[171] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   {if (true) throw (RuntimeException)jjte001;}
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   {if (true) throw (ParseException)jjte001;}
                                                 }
                                                 {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ArrowFunctionBody() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      label_52:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case CALL:
        case RUN:
        case CMD:
        case INSERT:
        case EXEC:
        case OUTPUT_ACT:
        case REPLACE:
        case DEFINE:
        case BREAK:
        case CONTINUE:
        case DELETE:
        case FOR:
        case FUNCTION:
        case FUNCTION_GEN:
        case IF:
        case NEW:
        case RETURN:
        case YIELD:
        case THIS:
        case TYPEOF:
        case VAR:
        case VOID:
        case WHILE:
        case WITH:
        case DO:
        case IMPORT:
        case SWITCH:
        case THROW:
        case TRY:
        case LBRACE:
        case LPAREN:
        case LBRACKET:
        case SEMICOLON:
        case PLUS:
        case MINUS:
        case INCR:
        case DECR:
        case BANG:
        case TILDE:
        case DECIMAL_LITERAL:
        case HEX_INTEGER_LITERAL:
        case NULL_LITERAL:
        case BOOLEAN_LITERAL:
        case STRING_LITERAL:
        case CODE_LITERAL:
        case IDENTIFIER_NAME:
        case REGULAR_EXPRESSION_LITERAL:{
          ;
          break;
          }
        default:
          jj_la1[172] = jj_gen;
          break label_52;
        }
        Statement();
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void ArrowFunctionExpression() throws ParseException {/*@bgen(jjtree) ArrowFunctionExpression */
  ASTArrowFunctionExpression jjtn000 = new ASTArrowFunctionExpression(JJTARROWFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
      try {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case LPAREN:{
          jj_consume_token(LPAREN);
          switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
          case IDENTIFIER_NAME:{
            FormalParameterList();
            break;
            }
          default:
            jj_la1[173] = jj_gen;
            ;
          }
          jj_consume_token(RPAREN);
          break;
          }
        case IDENTIFIER_NAME:{
          Identifier();
          break;
          }
        default:
          jj_la1[174] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } catch (Throwable jjte001) {
if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte001;}
          }
          if (jjte001 instanceof ParseException) {
            {if (true) throw (ParseException)jjte001;}
          }
          {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
      }
      jj_consume_token(ARROW);
      if (jj_2_60(2147483647)) {
        ArrowFunctionBody();
      } else if (jj_2_61(2147483647)) {
        ExpressionNoIn();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            {if (true) throw (RuntimeException)jjte000;}
          }
          if (jjte000 instanceof ParseException) {
            {if (true) throw (ParseException)jjte000;}
          }
          {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
    }
}

  final public void FunctionExpression() throws ParseException {/*@bgen(jjtree) FunctionExpression */
         ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(FUNCTION);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        Identifier();
        break;
        }
      default:
        jj_la1[175] = jj_gen;
        ;
      }
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER_NAME:{
          FormalParameterList();
          break;
          }
        default:
          jj_la1[176] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       {if (true) throw (RuntimeException)jjte001;}
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       {if (true) throw (ParseException)jjte001;}
                                                     }
                                                     {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtn001.jjtSetLastToken(getToken(0));
                                                     }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void GeneratorFunctionExpression() throws ParseException {/*@bgen(jjtree) GeneratorFunctionExpression */
         ASTGeneratorFunctionExpression jjtn000 = new ASTGeneratorFunctionExpression(JJTGENERATORFUNCTIONEXPRESSION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));Token begin;
    try {
      begin = jj_consume_token(FUNCTION_GEN);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER_NAME:{
        Identifier();
        break;
        }
      default:
        jj_la1[177] = jj_gen;
        ;
      }
ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                      jjtn001.jjtSetFirstToken(getToken(1));
      try {
        jj_consume_token(LPAREN);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IDENTIFIER_NAME:{
          FormalParameterList();
          break;
          }
        default:
          jj_la1[178] = jj_gen;
          ;
        }
        jj_consume_token(RPAREN);
      } catch (Throwable jjte001) {
if (jjtc001) {
                                                        jjtree.clearNodeScope(jjtn001);
                                                        jjtc001 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte001 instanceof RuntimeException) {
                                                        {if (true) throw (RuntimeException)jjte001;}
                                                      }
                                                      if (jjte001 instanceof ParseException) {
                                                        {if (true) throw (ParseException)jjte001;}
                                                      }
                                                      {if (true) throw (Error)jjte001;}
      } finally {
if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                        jjtn001.jjtSetLastToken(getToken(0));
                                                      }
      }
      FunctionBody();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void FormalParameterList() throws ParseException {
    Identifier();
    label_53:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[179] = jj_gen;
        break label_53;
      }
      jj_consume_token(COMMA);
      Identifier();
    }
}

  final public void FunctionBody() throws ParseException {/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(LBRACE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        SourceElements();
        break;
        }
      default:
        jj_la1[180] = jj_gen;
        ;
      }
      jj_consume_token(RBRACE);
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

/* Section 14: Program *

	ASTProgram Program() #Program :
	{}
	{  
		JavaScript()
				<EOF>
		{ return jjtThis; }
	}
	/**/
  final public 
        void JavaScript() throws ParseException {/*@bgen(jjtree) JavaScript */
  ASTJavaScript jjtn000 = new ASTJavaScript(JJTJAVASCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        SourceElements();
        break;
        }
      default:
        jj_la1[181] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              {if (true) throw (RuntimeException)jjte000;}
            }
            if (jjte000 instanceof ParseException) {
              {if (true) throw (ParseException)jjte000;}
            }
            {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
    }
}

  final public void SourceElements() throws ParseException {
    label_54:
    while (true) {
      SourceElement();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        ;
        break;
        }
      default:
        jj_la1[182] = jj_gen;
        break label_54;
      }
    }
}

  final public void SourceElement() throws ParseException {
    if (jj_2_62(2147483647)) {
      GeneratorFunctionDeclaration();
    } else if (jj_2_63(2147483647)) {
      FunctionDeclaration();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CALL:
      case RUN:
      case CMD:
      case INSERT:
      case EXEC:
      case OUTPUT_ACT:
      case REPLACE:
      case DEFINE:
      case BREAK:
      case CONTINUE:
      case DELETE:
      case FOR:
      case FUNCTION:
      case FUNCTION_GEN:
      case IF:
      case NEW:
      case RETURN:
      case YIELD:
      case THIS:
      case TYPEOF:
      case VAR:
      case VOID:
      case WHILE:
      case WITH:
      case DO:
      case IMPORT:
      case SWITCH:
      case THROW:
      case TRY:
      case LBRACE:
      case LPAREN:
      case LBRACKET:
      case SEMICOLON:
      case PLUS:
      case MINUS:
      case INCR:
      case DECR:
      case BANG:
      case TILDE:
      case DECIMAL_LITERAL:
      case HEX_INTEGER_LITERAL:
      case NULL_LITERAL:
      case BOOLEAN_LITERAL:
      case STRING_LITERAL:
      case CODE_LITERAL:
      case IDENTIFIER_NAME:
      case REGULAR_EXPRESSION_LITERAL:{
        Statement();
        break;
        }
      default:
        jj_la1[183] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

/*
	 * Grammar for parsing JScript .NET contructs: ( import System; var contents :
	 * String = reader.ReadToEnd(); ) Refer: src/hostenv_jsc.js
	 */
  final public 
        void ImportStatement() throws ParseException {
    jj_consume_token(IMPORT);
    Name();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DOT:{
      jj_consume_token(DOT);
      jj_consume_token(STAR);
      break;
      }
    default:
      jj_la1[184] = jj_gen;
      ;
    }
    EndStatement();
}

  final public void Name() throws ParseException {
    jj_consume_token(IDENTIFIER_NAME);
    label_55:
    while (true) {
      if (jj_2_64(2)) {
        ;
      } else {
        break label_55;
      }
      jj_consume_token(DOT);
      jj_consume_token(IDENTIFIER_NAME);
    }
}

  final public void JScriptVarStatement() throws ParseException {/*@bgen(jjtree) VariableStatement */
  ASTVariableStatement jjtn000 = new ASTVariableStatement(JJTVARIABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      jj_consume_token(VAR);
      JScriptVarDeclarationList();
      EndStatement();
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void JScriptVarDeclarationList() throws ParseException {/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      JScriptVarDeclaration();
      label_56:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[185] = jj_gen;
          break label_56;
        }
        jj_consume_token(COMMA);
        JScriptVarDeclaration();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public void JScriptVarDeclaration() throws ParseException {/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
    try {
      Identifier();
      jj_consume_token(COLON);
      jj_consume_token(IDENTIFIER_NAME);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        Initialiser();
        break;
        }
      default:
        jj_la1[186] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    {if (true) throw (RuntimeException)jjte000;}
                  }
                  if (jjte000 instanceof ParseException) {
                    {if (true) throw (ParseException)jjte000;}
                  }
                  {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
    }
}

  final public Token EndStatement() throws ParseException {Token end;
    try {
      end = jj_consume_token(SEMICOLON);
{if ("" != null) return end;}
    } catch (ParseException e) {
if(e.expectedTokenSet.size() > MAX_EXCEPTION_TOKEN_SIZE
                          || (e.expectedTokenSet.size() == 1  && e.expectedTokenSet.get(0).equals(";"))){

                                Token foundToken = getToken(1);
                                String line = "at line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn;
                                String message = line+": did you forget a ';'?";
                                if (foundToken != null){
                                        message+=" (possible errant token: "+ foundToken + ")";
                                }
                            e = new ParseException(message);
                            SimpleNode currNode = getCurrentNode();
                                exceptions.add(e);
                                ParseExceptionData excData = new ParseExceptionData(e);
                                 if (currNode != null){
                                        currNode.setExceptionData(excData);
                                }
                        }else{
                          error_skipto(e, SEMICOLON);
                        }

                    //

    }
{if ("" != null) return new Token(SEMICOLON);}
    throw new Error("Missing return statement in function");
}

  void error_skipto(ParseException e, int kind) throws ParseException {//  ParseException e = generateParseException();  // generate the exception object.
//  System.out.println(e.toString());  // print the error message
  exceptions.add(e);
  SimpleNode currNode = getCurrentNode();
  ParseExceptionData excData = new ParseExceptionData(e);
  excData.setSkippedToToken(kind);
  Token t = null;
//  int braceCount = 0;
  skipper: do {
    Token test = getToken(1);
//    System.out.println(exprBraceCount);
        if(test == null || test.kind == END)
        {
//		System.out.println("I'm breaking here with:"+test);
        break;
    }
        switch(test.kind)
        {
          case RBRACE:
                        exprBraceCount--;
                        if(exprBraceCount < 0)
                                break skipper;
                        break;
        }


    t = getNextToken();

    if(t != null)
        excData.addSkippedToken(t);
//	System.out.println("Skipped: "+t+" token("+test+")");
  } while (t != null && (t.kind != kind && t.kind != EOF));
    // The above loop consumes tokens all the way up to a token of
// "kind".  We use a do-while loop rather than a while because the
// current token is the one immediately before the erroneous token
// (in our case the token immediately before what should have been
// "if"/"while".

        if (currNode != null){
         currNode.setExceptionData(excData);
        }
        if(t == null || t.kind == EOF){
                throw new StopParseException();
        }
  }

  void error_noSkip(ParseException e) throws ParseException {System.out.println("--------------NO SKIP-----------------");
//  ParseException e = generateParseException();  // generate the exception object.
//  System.out.println(e.toString());  // print the error message
  SimpleNode currNode = getCurrentNode();
  ParseExceptionData excData = new ParseExceptionData(e);
    if (currNode != null){
         currNode.setExceptionData(excData);
        }
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_1()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_2()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_3()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_4()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_5()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_6()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_7()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_8()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_9()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_10()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_11()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_12()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_13()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_14()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_15()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_16()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_17()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_18()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_19()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_20()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_21()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_22()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_23()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_24()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_25()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_26()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_27()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_28()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_29()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_30()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_31()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_32()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_33()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_34()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_35()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_36()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_37()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_38()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_39()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_40()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_41()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_42()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_43()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_44()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_45()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_46()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_47()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_48()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_49()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_50()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_51()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_52()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_53()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_54()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_55()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_56()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_57()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_58()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_59()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_60()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_61()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_62()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_63()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return (!jj_3_64()); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_3R_ForStatement_2931_134_384()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2930_134_383()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_Elision_2279_18_101()
 {
    Token xsp;
    if (jj_3R_Elision_2278_19_146()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Elision_2278_19_146()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Elision_2278_19_146()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_ThrowStatement_3045_17_164()
 {
    if (jj_scan_token(THROW)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Elision_2277_17_71()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Elision_2279_18_101()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ForStatement_2926_134_382()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2925_134_381()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_LabelledStatement_3039_17_288()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_ArrayLiteral_2250_35_281()
 {
    if (jj_3R_ElementList_2262_17_302()) return true;
    return false;
  }

  private boolean jj_3R_ElementList_2269_14_336()
 {
    if (jj_3R_Elision_2277_17_71()) return true;
    return false;
  }

  private boolean jj_3R_ArrayLiteral_2248_34_280()
 {
    if (jj_3R_ElisionFirst_2285_17_301()) return true;
    return false;
  }

  private boolean jj_3R_DefaultClause_3029_17_355()
 {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_DefaultClause_3029_58_371()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ElementList_2262_17_302()
 {
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    xsp = jj_scanpos;
    if (jj_3R_ElementList_2269_14_336()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_Elision_2277_17_71()) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_CaseBlock_3006_36_337()
 {
    if (jj_3R_CaseClauses_3016_17_354()) return true;
    return false;
  }

  private boolean jj_3R_CaseClause_3022_17_387()
 {
    if (jj_scan_token(CASE)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(COLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CaseClause_3022_68_394()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CaseClauses_3016_19_370()
 {
    if (jj_3R_CaseClause_3022_17_387()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_CaseClauses_3016_17_354()
 {
    Token xsp;
    if (jj_3R_CaseClauses_3016_19_370()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_CaseClauses_3016_19_370()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ArrayLiteral_2247_17_252()
 {
    if (jj_scan_token(LBRACKET)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayLiteral_2248_34_280()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrayLiteral_2250_35_281()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_YieldStatement_2975_50_323()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_CaseBlock_3006_17_304()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CaseBlock_3006_36_337()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(84)) {
    jj_scanpos = xsp;
    if (jj_3R_CaseBlock_3008_66_338()) return true;
    }
    return false;
  }

  private boolean jj_3R_SwitchStatement_2999_17_162()
 {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_CaseBlock_3006_17_304()) return true;
    return false;
  }

  private boolean jj_3R_LabelIdentifier_2234_11_87()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(152)) {
    jj_scanpos = xsp;
    if (jj_scan_token(153)) return true;
    }
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_FilePathNoSTar_1464_11_69()
 {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_YieldStatement_2975_33_322()
 {
    if (jj_3R_YieldStar_2982_17_343()) return true;
    return false;
  }

  private boolean jj_3R_WithStatement_2990_17_163()
 {
    if (jj_scan_token(WITH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2936_65_386()
 {
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2933_68_385()
 {
    if (jj_scan_token(OF)) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3R_YieldStar_2982_17_343()
 {
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_Identifier_2221_11_57()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_LabelIdentifier_2234_11_87()) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_2967_28_327()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    return false;
  }

  private boolean jj_3R_YieldStatement_2975_17_290()
 {
    if (jj_scan_token(YIELD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_YieldStatement_2975_33_322()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_YieldStatement_2975_50_323()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_TemplateLiteral_2208_17_231()
 {
    if (jj_scan_token(CODE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_LabelIdentifier_2234_11_87()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2924_66_380()
 {
    if (jj_3R_ExpressionNoIn_2697_17_90()) return true;
    return false;
  }

  private boolean jj_3R_BreakStatement_2957_32_324()
 {
    if (jj_3R_LabelIdentifier_2234_11_87()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_ReturnStatement_2967_17_293()
 {
    if (jj_scan_token(RETURN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ReturnStatement_2967_28_327()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_ContinueStatement_2946_36_321()
 {
    if (jj_3R_LabelIdentifier_2234_11_87()) return true;
    return false;
  }

  private boolean jj_3R_TemplateLiteral_2202_11_188()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TemplateLiteral_2202_11_230()) {
    jj_scanpos = xsp;
    if (jj_3R_TemplateLiteral_2208_17_231()) return true;
    }
    return false;
  }

  private boolean jj_3R_TemplateLiteral_2202_11_230()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_BreakStatement_2957_17_291()
 {
    if (jj_scan_token(BREAK)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BreakStatement_2957_32_324()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Literal_2190_17_216()
 {
    if (jj_scan_token(CODE_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_Literal_2184_17_215()
 {
    if (jj_scan_token(REGULAR_EXPRESSION_LITERAL)) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_VariableDeclarationList_2811_17_86()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2936_27_369()
 {
    if (jj_3R_LeftHandSideExpressionForIn_2420_17_379()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2936_65_386()) return true;
    }
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_ContinueStatement_2946_17_289()
 {
    if (jj_scan_token(CONTINUE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ContinueStatement_2946_36_321()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Literal_2178_17_214()
 {
    if (jj_scan_token(NULL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_null_2923_39_85()
 {
    if (jj_3R_ExpressionNoIn_2697_17_90()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_2923_39_85()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2933_27_368()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_VariableDeclarationNoIn_2830_17_378()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2933_68_385()) return true;
    }
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_Literal_2172_17_213()
 {
    if (jj_scan_token(BOOLEAN_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2928_27_367()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_VariableDeclarationList_2811_17_86()) return true;
    if (jj_scan_token(SEMICOLON)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2930_134_383()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2931_134_384()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2923_27_366()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2924_66_380()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2925_134_381()) jj_scanpos = xsp;
    if (jj_scan_token(SEMICOLON)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2926_134_382()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_Literal_2166_17_212()
 {
    if (jj_scan_token(STRING_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2918_28_365()
 {
    if (jj_3R_LeftHandSideExpressionForIn_2420_17_379()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_2882_63_303()
 {
    if (jj_scan_token(ELSE)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_Literal_2160_17_211()
 {
    if (jj_scan_token(HEX_INTEGER_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2915_28_364()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_VariableDeclarationNoIn_2830_17_378()) return true;
    if (jj_scan_token(IN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2922_17_256()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2923_27_366()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2928_27_367()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2933_27_368()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2936_27_369()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Literal_2152_17_180()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Literal_2152_17_210()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2160_17_211()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2166_17_212()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2172_17_213()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2178_17_214()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2184_17_215()) {
    jj_scanpos = xsp;
    if (jj_3R_Literal_2190_17_216()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Literal_2152_17_210()
 {
    if (jj_scan_token(DECIMAL_LITERAL)) return true;
    return false;
  }

  private boolean jj_3R_ForStatement_2914_17_255()
 {
    if (jj_scan_token(EACH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2915_28_364()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2918_28_365()) return true;
    }
    return false;
  }

  private boolean jj_3R_noReservedIdentifier_1380_11_143()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_ForStatement_2913_11_235()
 {
    if (jj_scan_token(FOR)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ForStatement_2914_17_255()) {
    jj_scanpos = xsp;
    if (jj_3R_ForStatement_2922_17_256()) return true;
    }
    return false;
  }

  private boolean jj_3R_VariableDeclaration_2824_99_171()
 {
    if (jj_3R_Initialiser_2836_17_201()) return true;
    return false;
  }

  private boolean jj_3R_ParenExpression_2140_11_253()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_WhileStatement_2906_11_234()
 {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2126_19_229()
 {
    if (jj_3R_Literal_2152_17_180()) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_2893_19_192()
 {
    if (jj_3R_ForStatement_2913_11_235()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2125_19_228()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_This_2133_11_250()
 {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_2892_19_191()
 {
    if (jj_3R_WhileStatement_2906_11_234()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2124_19_227()
 {
    if (jj_3R_ParenExpression_2140_11_253()) return true;
    return false;
  }

  private boolean jj_3R_IterationStatement_2891_19_161()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IterationStatement_2891_19_190()) {
    jj_scanpos = xsp;
    if (jj_3R_IterationStatement_2892_19_191()) {
    jj_scanpos = xsp;
    if (jj_3R_IterationStatement_2893_19_192()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_IterationStatement_2891_19_190()
 {
    if (jj_3R_DoStatement_2899_11_233()) return true;
    return false;
  }

  private boolean jj_3R_DoStatement_2899_11_233()
 {
    if (jj_scan_token(DO)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2123_19_226()
 {
    if (jj_3R_ArrayLiteral_2247_17_252()) return true;
    return false;
  }

  private boolean jj_3R_getNoReservedIdentifier_1363_11_76()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(153)) {
    jj_scanpos = xsp;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_scan_token(31)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(52)) {
    jj_scanpos = xsp;
    if (jj_scan_token(53)) {
    jj_scanpos = xsp;
    if (jj_scan_token(63)) {
    jj_scanpos = xsp;
    if (jj_scan_token(59)) {
    jj_scanpos = xsp;
    if (jj_scan_token(60)) {
    jj_scanpos = xsp;
    if (jj_scan_token(54)) {
    jj_scanpos = xsp;
    if (jj_scan_token(50)) {
    jj_scanpos = xsp;
    if (jj_scan_token(26)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) {
    jj_scanpos = xsp;
    if (jj_scan_token(79)) {
    jj_scanpos = xsp;
    if (jj_scan_token(67)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(30)) {
    jj_scanpos = xsp;
    if (jj_scan_token(72)) {
    jj_scanpos = xsp;
    if (jj_scan_token(69)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(51)) {
    jj_scanpos = xsp;
    if (jj_scan_token(65)) {
    jj_scanpos = xsp;
    if (jj_scan_token(73)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) {
    jj_scanpos = xsp;
    if (jj_scan_token(40)) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2122_19_225()
 {
    if (jj_3R_ObjectLiteral_2294_17_251()) return true;
    return false;
  }

  private boolean jj_3R_Initialiser_2836_72_243()
 {
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2121_13_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PrimaryExpression_2121_13_224()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2122_19_225()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2123_19_226()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2124_19_227()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2125_19_228()) {
    jj_scanpos = xsp;
    if (jj_3R_PrimaryExpression_2126_19_229()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_PrimaryExpression_2121_13_224()
 {
    if (jj_3R_This_2133_11_250()) return true;
    return false;
  }

  private boolean jj_3R_IfStatement_2882_17_160()
 {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Statement_2709_25_172()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_IfStatement_2882_63_303()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_MemberExpression_2333_17_77()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_Define_2091_25_196()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_Define_2089_25_195()
 {
    if (jj_3R_noReservedIdentifier_1380_11_143()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_OutputAct_2072_41_258()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionStatement_2860_17_84()
 {
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Define_2086_17_167()
 {
    if (jj_scan_token(DEFINE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Define_2089_25_195()) {
    jj_scanpos = xsp;
    if (jj_3R_Define_2091_25_196()) return true;
    }
    return false;
  }

  private boolean jj_3R_EmptyStatement_2851_17_287()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3R_OutputAct_2075_25_200()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_OutputAct_2072_25_241()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutputAct_2072_41_258()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_VariableDeclarationNoIn_2830_32_391()
 {
    if (jj_3R_InitialiserNoIn_2842_17_399()) return true;
    return false;
  }

  private boolean jj_3R_OutputAct_2070_25_240()
 {
    if (jj_3R_TemplateLiteral_2202_11_188()) return true;
    return false;
  }

  private boolean jj_3R_InitialiserNoIn_2842_17_399()
 {
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_AssignmentExpressionNoIn_2671_17_135()) return true;
    return false;
  }

  private boolean jj_3R_Initialiser_2836_22_242()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3R_OutputAct_2069_19_199()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutputAct_2070_25_240()) {
    jj_scanpos = xsp;
    if (jj_3R_OutputAct_2072_25_241()) return true;
    }
    return false;
  }

  private boolean jj_3R_VariableDeclaration_2824_30_170()
 {
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    return false;
  }

  private boolean jj_3R_Initialiser_2836_17_201()
 {
    if (jj_scan_token(ASSIGN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Initialiser_2836_22_242()) {
    jj_scanpos = xsp;
    if (jj_3R_Initialiser_2836_72_243()) return true;
    }
    return false;
  }

  private boolean jj_3R_VariableDeclarationList_2811_41_132()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_VariableDeclaration_2823_17_131()) return true;
    return false;
  }

  private boolean jj_3R_ExecOnAssign_2051_33_158()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_ExecOnAssign_2048_33_157()
 {
    if (jj_3R_TemplateLiteral_2202_11_188()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarationNoIn_2830_17_378()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableDeclarationNoIn_2830_32_391()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_OutputAct_2067_12_169()
 {
    if (jj_scan_token(OUTPUT_ACT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_OutputAct_2069_19_199()) {
    jj_scanpos = xsp;
    if (jj_3R_OutputAct_2075_25_200()) return true;
    }
    return false;
  }

  private boolean jj_3R_VariableDeclaration_2823_17_131()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableDeclaration_2824_30_170()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_VariableDeclaration_2824_99_171()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Perform_2032_33_239()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_Perform_2030_33_198()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Perform_2030_33_238()) {
    jj_scanpos = xsp;
    if (jj_3R_Perform_2032_33_239()) return true;
    }
    return false;
  }

  private boolean jj_3R_Perform_2030_33_238()
 {
    if (jj_3R_TemplateLiteral_2202_11_188()) return true;
    return false;
  }

  private boolean jj_3R_VariableDeclarationList_2811_17_86()
 {
    if (jj_3R_VariableDeclaration_2823_17_131()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_VariableDeclarationList_2811_41_132()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ExecOnAssign_2042_17_115()
 {
    if (jj_scan_token(EXEC)) return true;
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ExecOnAssign_2048_33_157()) {
    jj_scanpos = xsp;
    if (jj_3R_ExecOnAssign_2051_33_158()) return true;
    }
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_VariableStatement_2802_17_286()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_VariableDeclarationList_2811_17_86()) return true;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Block_2785_27_189()
 {
    if (jj_3R_StatementList_2793_17_232()) return true;
    return false;
  }

  private boolean jj_3R_StatementList_2793_19_254()
 {
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_Perform_2025_18_197()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_StatementList_2793_17_232()
 {
    Token xsp;
    if (jj_3R_StatementList_2793_19_254()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_StatementList_2793_19_254()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Perform_2024_17_168()
 {
    if (jj_scan_token(EXEC)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Perform_2025_18_197()) jj_scanpos = xsp;
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    xsp = jj_scanpos;
    if (jj_3R_Perform_2030_33_198()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_Block_2784_17_159()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Block_2785_27_189()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_null_2727_71_130()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2770_27_119()
 {
    if (jj_3R_SwitchStatement_2999_17_162()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2769_27_118()
 {
    if (jj_3R_IterationStatement_2891_19_161()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2768_27_117()
 {
    if (jj_3R_IfStatement_2882_17_160()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2773_19_122()
 {
    if (jj_3R_TryStatement_3052_17_165()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2767_25_116()
 {
    if (jj_3R_Block_2784_17_159()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2772_19_121()
 {
    if (jj_3R_ThrowStatement_3045_17_164()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2771_19_120()
 {
    if (jj_3R_WithStatement_2990_17_163()) return true;
    return false;
  }

  private boolean jj_3R_Insert_1990_30_237()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_Insert_2005_14_194()
 {
    if (jj_scan_token(REPLACE)) return true;
    if (jj_3R_ConditionalExpression_2648_17_147()) return true;
    return false;
  }

  private boolean jj_3R_BodiedStatement_2765_17_81()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_BodiedStatement_2767_25_116()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2768_27_117()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2769_27_118()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2770_27_119()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2771_19_120()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2772_19_121()) {
    jj_scanpos = xsp;
    if (jj_3R_BodiedStatement_2773_19_122()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Insert_1978_31_257()
 {
    if (jj_scan_token(LT)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(GT)) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_Insert_1977_30_236()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Insert_1978_31_257()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) {
    jj_scanpos = xsp;
    if (jj_scan_token(37)) {
    jj_scanpos = xsp;
    if (jj_scan_token(38)) return true;
    }
    }
    }
    if (jj_3R_ConditionalExpression_2648_17_147()) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_ExpressionStatement_2860_17_84()) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_null_2727_41_129()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  private boolean jj_3R_null_2727_40_83()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_2727_41_129()) {
    jj_scanpos = xsp;
    if (jj_3R_null_2727_71_130()) return true;
    }
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(CALL)) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(28)) jj_scanpos = xsp;
    if (jj_scan_token(CMD)) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2738_27_267()
 {
    if (jj_3R_LabelledStatement_3039_17_288()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2736_27_266()
 {
    if (jj_3R_ExpressionStatement_2860_17_84()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2744_19_272()
 {
    if (jj_3R_ReturnStatement_2967_17_293()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2743_19_271()
 {
    if (jj_3R_ImportStatement_3193_17_292()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2742_19_270()
 {
    if (jj_3R_BreakStatement_2957_17_291()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2733_27_264()
 {
    if (jj_3R_VariableStatement_2802_17_286()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2741_19_269()
 {
    if (jj_3R_YieldStatement_2975_17_290()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2740_19_268()
 {
    if (jj_3R_ContinueStatement_2946_17_289()) return true;
    return false;
  }

  private boolean jj_3_47()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(27)) {
    jj_scanpos = xsp;
    if (jj_3R_null_2727_40_83()) return true;
    }
    return false;
  }

  private boolean jj_3R_Insert_1974_14_193()
 {
    if (jj_scan_token(INSERT)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Insert_1977_30_236()) {
    jj_scanpos = xsp;
    if (jj_3R_Insert_1990_30_237()) return true;
    }
    return false;
  }

  private boolean jj_3R_SingleStatement_2728_27_262()
 {
    if (jj_3R_Cmd_1940_9_284()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_Action_1826_11_82()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2735_19_265()
 {
    if (jj_3R_EmptyStatement_2851_17_287()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2730_19_263()
 {
    if (jj_3R_Run_1925_12_285()) return true;
    return false;
  }

  private boolean jj_3R_Insert_1970_11_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Insert_1974_14_193()) {
    jj_scanpos = xsp;
    if (jj_3R_Insert_2005_14_194()) return true;
    }
    return false;
  }

  private boolean jj_3R_AssignmentExpressionNoIn_2674_72_204()
 {
    if (jj_3R_AssignmentExpressionNoIn_2671_17_135()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2727_19_261()
 {
    if (jj_3R_Call_1895_11_283()) return true;
    return false;
  }

  private boolean jj_3R_Cmd_1944_34_317()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2725_19_260()
 {
    if (jj_3R_Action_1826_11_82()) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoIn_2697_46_136()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_AssignmentExpressionNoIn_2671_17_135()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2724_19_259()
 {
    if (jj_3R_SimpleAction_1804_13_282()) return true;
    return false;
  }

  private boolean jj_3R_SingleStatement_2721_17_244()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SingleStatement_2724_19_259()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2725_19_260()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2727_19_261()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2728_27_262()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2730_19_263()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2733_27_264()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2735_19_265()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2736_27_266()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2738_27_267()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2740_19_268()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2741_19_269()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2742_19_270()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2743_19_271()) {
    jj_scanpos = xsp;
    if (jj_3R_SingleStatement_2744_19_272()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_Statement_2711_25_202()
 {
    if (jj_3R_SingleStatement_2721_17_244()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_BodiedStatement_2765_17_81()) return true;
    return false;
  }

  private boolean jj_3R_Statement_2709_25_172()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) {
    jj_scanpos = xsp;
    if (jj_3R_Statement_2711_25_202()) return true;
    }
    return false;
  }

  private boolean jj_3R_Expression_2691_42_133()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_Cmd_1941_23_315()
 {
    if (jj_scan_token(RUN)) return true;
    if (jj_scan_token(CMD)) return true;
    return false;
  }

  private boolean jj_3R_Run_1928_34_320()
 {
    if (jj_scan_token(GT)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpression_2664_64_182()
 {
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_Cmd_1942_13_316()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_Cmd_1940_9_284()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(29)) {
    jj_scanpos = xsp;
    if (jj_3R_Cmd_1941_23_315()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_Cmd_1942_13_316()) jj_scanpos = xsp;
    if (jj_3R_Arguments_2387_17_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_Cmd_1944_34_317()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_Run_1925_23_318()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_ExpressionNoIn_2697_17_90()
 {
    if (jj_3R_AssignmentExpressionNoIn_2671_17_135()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ExpressionNoIn_2697_46_136()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Run_1926_20_319()
 {
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3R_Expression_2691_17_88()
 {
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Expression_2691_42_133()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Run_1925_12_285()
 {
    if (jj_scan_token(RUN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Run_1925_23_318()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_Run_1926_20_319()) jj_scanpos = xsp;
    if (jj_3R_Arguments_2387_17_70()) return true;
    xsp = jj_scanpos;
    if (jj_3R_Run_1928_34_320()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpressionNoIn_2674_26_203()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpressionNoIn_2654_45_246()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_AssignmentExpressionNoIn_2671_17_135()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentOperator_2681_17_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(120)) {
    jj_scanpos = xsp;
    if (jj_scan_token(123)) {
    jj_scanpos = xsp;
    if (jj_scan_token(167)) {
    jj_scanpos = xsp;
    if (jj_scan_token(124)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(122)) {
    jj_scanpos = xsp;
    if (jj_scan_token(125)) {
    jj_scanpos = xsp;
    if (jj_scan_token(126)) {
    jj_scanpos = xsp;
    if (jj_scan_token(127)) {
    jj_scanpos = xsp;
    if (jj_scan_token(128)) {
    jj_scanpos = xsp;
    if (jj_scan_token(130)) {
    jj_scanpos = xsp;
    if (jj_scan_token(129)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_3R_AssignmentOperator_2681_17_80()) return true;
    return false;
  }

  private boolean jj_3R_Call_1909_18_314()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpressionNoIn_2675_19_174()
 {
    if (jj_3R_ConditionalExpressionNoIn_2654_17_205()) return true;
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_3R_AssignmentOperator_2681_17_80()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_2648_41_217()
 {
    if (jj_scan_token(HOOK)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpressionNoIn_2671_17_135()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentExpressionNoIn_2671_17_173()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentExpressionNoIn_2675_19_174()) return true;
    }
    return false;
  }

  private boolean jj_3R_AssignmentExpressionNoIn_2671_17_173()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_3R_AssignmentOperator_2681_17_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentExpressionNoIn_2674_26_203()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentExpressionNoIn_2674_72_204()) return true;
    }
    return false;
  }

  private boolean jj_3R_Call_1901_17_312()
 {
    if (jj_scan_token(VAR)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(CALL)) return true;
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_FilePathNoSTar_1464_11_69()) return true;
    return false;
  }

  private boolean jj_3R_Call_1897_20_342()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpression_2665_19_103()
 {
    if (jj_3R_ConditionalExpression_2648_17_147()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpression_2664_19_181()
 {
    if (jj_3R_ActionOnAssign_1866_17_79()) return true;
    return false;
  }

  private boolean jj_3R_AssignmentExpression_2663_17_102()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_3R_AssignmentOperator_2681_17_80()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentExpression_2664_19_181()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentExpression_2664_64_182()) return true;
    }
    return false;
  }

  private boolean jj_3R_AssignmentExpression_2663_17_72()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_AssignmentExpression_2663_17_102()) {
    jj_scanpos = xsp;
    if (jj_3R_AssignmentExpression_2665_19_103()) return true;
    }
    return false;
  }

  private boolean jj_3R_Call_1903_9_313()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_scan_token(CALL)) return true;
    return false;
  }

  private boolean jj_3R_LogicalORExpressionNoIn_2634_45_274()
 {
    if (jj_3R_LogicalOROperator_2640_17_277()) return true;
    if (jj_3R_LogicalANDExpressionNoIn_2616_17_273()) return true;
    return false;
  }

  private boolean jj_3R_Call_1897_12_311()
 {
    if (jj_scan_token(CALL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Call_1897_20_342()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ActionOnAssign_1879_28_156()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3R_Call_1895_11_283()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Call_1897_12_311()) {
    jj_scanpos = xsp;
    if (jj_3R_Call_1901_17_312()) {
    jj_scanpos = xsp;
    if (jj_3R_Call_1903_9_313()) return true;
    }
    }
    xsp = jj_scanpos;
    if (jj_3_19()) jj_scanpos = xsp;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    xsp = jj_scanpos;
    if (jj_3R_Call_1909_18_314()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpressionNoIn_2654_17_205()
 {
    if (jj_3R_LogicalORExpressionNoIn_2634_17_245()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionalExpressionNoIn_2654_45_246()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LogicalORExpression_2628_41_248()
 {
    if (jj_3R_LogicalOROperator_2640_17_277()) return true;
    if (jj_3R_LogicalANDExpression_2610_17_209()) return true;
    return false;
  }

  private boolean jj_3R_ConditionalExpression_2648_17_147()
 {
    if (jj_3R_LogicalORExpression_2628_17_179()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ConditionalExpression_2648_41_217()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_LogicalANDExpressionNoIn_2616_44_295()
 {
    if (jj_3R_LogicalANDOperator_2622_17_298()) return true;
    if (jj_3R_BitwiseORExpressionNoIn_2597_17_294()) return true;
    return false;
  }

  private boolean jj_3R_LogicalOROperator_2640_17_277()
 {
    if (jj_scan_token(SC_OR)) return true;
    return false;
  }

  private boolean jj_3R_ActionOnAssign_1868_19_114()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ActionOnAssign_1879_28_156()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3R_LogicalORExpressionNoIn_2634_17_245()
 {
    if (jj_3R_LogicalANDExpressionNoIn_2616_17_273()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LogicalORExpressionNoIn_2634_45_274()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ActionOnAssign_1866_17_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ActionOnAssign_1868_19_114()) jj_scanpos = xsp;
    if (jj_3R_ExecOnAssign_2042_17_115()) return true;
    return false;
  }

  private boolean jj_3R_LogicalANDExpression_2610_40_276()
 {
    if (jj_3R_LogicalANDOperator_2622_17_298()) return true;
    if (jj_3R_BitwiseORExpression_2591_17_247()) return true;
    return false;
  }

  private boolean jj_3R_LogicalORExpression_2628_17_179()
 {
    if (jj_3R_LogicalANDExpression_2610_17_209()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LogicalORExpression_2628_41_248()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_BitwiseORExpressionNoIn_2597_45_329()
 {
    if (jj_3R_BitwiseOROperator_2603_17_332()) return true;
    if (jj_3R_BitwiseXORExpressionNoIn_2579_17_328()) return true;
    return false;
  }

  private boolean jj_3R_Action_1846_28_123()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3R_Action_1854_19_127()
 {
    if (jj_3R_OutputAct_2067_12_169()) return true;
    return false;
  }

  private boolean jj_3R_LogicalANDOperator_2622_17_298()
 {
    if (jj_scan_token(SC_AND)) return true;
    return false;
  }

  private boolean jj_3R_Action_1853_19_126()
 {
    if (jj_3R_Perform_2024_17_168()) return true;
    return false;
  }

  private boolean jj_3R_Action_1852_19_125()
 {
    if (jj_3R_Define_2086_17_167()) return true;
    return false;
  }

  private boolean jj_3R_Action_1851_19_124()
 {
    if (jj_3R_Insert_1970_11_166()) return true;
    return false;
  }

  private boolean jj_3R_LogicalANDExpressionNoIn_2616_17_273()
 {
    if (jj_3R_BitwiseORExpressionNoIn_2597_17_294()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LogicalANDExpressionNoIn_2616_44_295()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_BitwiseORExpression_2591_41_297()
 {
    if (jj_3R_BitwiseOROperator_2603_17_332()) return true;
    if (jj_3R_BitwiseXORExpression_2573_17_275()) return true;
    return false;
  }

  private boolean jj_3R_LogicalANDExpression_2610_17_209()
 {
    if (jj_3R_BitwiseORExpression_2591_17_247()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_LogicalANDExpression_2610_40_276()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_BitwiseXORExpressionNoIn_2579_45_345()
 {
    if (jj_3R_BitwiseXOROperator_2585_17_348()) return true;
    if (jj_3R_BitwiseANDExpressionNoIn_2561_17_344()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseOROperator_2603_17_332()
 {
    if (jj_scan_token(BIT_OR)) return true;
    return false;
  }

  private boolean jj_3R_BitwiseXORExpression_2573_41_331()
 {
    if (jj_3R_BitwiseXOROperator_2585_17_348()) return true;
    if (jj_3R_BitwiseANDExpression_2555_17_296()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseORExpressionNoIn_2597_17_294()
 {
    if (jj_3R_BitwiseXORExpressionNoIn_2579_17_328()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseORExpressionNoIn_2597_45_329()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_FourthSetOp_1610_17_65()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseORExpression_2591_17_247()
 {
    if (jj_3R_BitwiseXORExpression_2573_17_275()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseORExpression_2591_41_297()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_BitwiseANDExpressionNoIn_2561_43_358()
 {
    if (jj_3R_BitwiseANDOperator_2567_17_361()) return true;
    if (jj_3R_EqualityExpressionNoIn_2541_17_357()) return true;
    return false;
  }

  private boolean jj_3R_Action_1826_11_82()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_Action_1846_28_123()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(DOT)) return true;
    xsp = jj_scanpos;
    if (jj_3R_Action_1851_19_124()) {
    jj_scanpos = xsp;
    if (jj_3R_Action_1852_19_125()) {
    jj_scanpos = xsp;
    if (jj_3R_Action_1853_19_126()) {
    jj_scanpos = xsp;
    if (jj_3R_Action_1854_19_127()) return true;
    }
    }
    }
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseXOROperator_2585_17_348()
 {
    if (jj_scan_token(XOR)) return true;
    return false;
  }

  private boolean jj_3R_SimpleAction_1811_21_310()
 {
    if (jj_3R_OutputAct_2067_12_169()) return true;
    return false;
  }

  private boolean jj_3R_SimpleAction_1809_21_309()
 {
    if (jj_3R_Perform_2024_17_168()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseXORExpressionNoIn_2579_17_328()
 {
    if (jj_3R_BitwiseANDExpressionNoIn_2561_17_344()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseXORExpressionNoIn_2579_45_345()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_BitwiseANDExpression_2555_40_347()
 {
    if (jj_3R_BitwiseANDOperator_2567_17_361()) return true;
    if (jj_3R_EqualityExpression_2535_17_330()) return true;
    return false;
  }

  private boolean jj_3R_SimpleAction_1807_21_308()
 {
    if (jj_3R_Define_2086_17_167()) return true;
    return false;
  }

  private boolean jj_3R_SimpleAction_1805_21_307()
 {
    if (jj_3R_Insert_1970_11_166()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseXORExpression_2573_17_275()
 {
    if (jj_3R_BitwiseANDExpression_2555_17_296()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseXORExpression_2573_41_331()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EqualityExpressionNoIn_2541_46_373()
 {
    if (jj_3R_EqualityOperator_2547_17_139()) return true;
    if (jj_3R_RelationalExpressionNoIn_2519_17_372()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseANDOperator_2567_17_361()
 {
    if (jj_scan_token(BIT_AND)) return true;
    return false;
  }

  private boolean jj_3R_SimpleAction_1804_13_282()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SimpleAction_1805_21_307()) {
    jj_scanpos = xsp;
    if (jj_3R_SimpleAction_1807_21_308()) {
    jj_scanpos = xsp;
    if (jj_3R_SimpleAction_1809_21_309()) {
    jj_scanpos = xsp;
    if (jj_3R_SimpleAction_1811_21_310()) return true;
    }
    }
    }
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseANDExpressionNoIn_2561_17_344()
 {
    if (jj_3R_EqualityExpressionNoIn_2541_17_357()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseANDExpressionNoIn_2561_43_358()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EqualityExpression_2535_42_360()
 {
    if (jj_3R_EqualityOperator_2547_17_139()) return true;
    if (jj_3R_RelationalExpression_2506_17_346()) return true;
    return false;
  }

  private boolean jj_3R_BitwiseANDExpression_2555_17_296()
 {
    if (jj_3R_EqualityExpression_2535_17_330()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_BitwiseANDExpression_2555_40_347()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EqualityOperator_2547_17_139()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(96)) {
    jj_scanpos = xsp;
    if (jj_scan_token(97)) {
    jj_scanpos = xsp;
    if (jj_scan_token(99)) {
    jj_scanpos = xsp;
    if (jj_scan_token(100)) {
    jj_scanpos = xsp;
    if (jj_scan_token(98)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_EqualityExpressionNoIn_2541_17_357()
 {
    if (jj_3R_RelationalExpressionNoIn_2519_17_372()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EqualityExpressionNoIn_2541_46_373()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_RelationalExpressionNoIn_2519_37_388()
 {
    if (jj_3R_RelationalNoInOperator_2526_17_395()) return true;
    if (jj_3R_ShiftExpression_2491_17_359()) return true;
    return false;
  }

  private boolean jj_3R_SourceElement_3178_145_351()
 {
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3R_EqualityExpression_2535_17_330()
 {
    if (jj_3R_RelationalExpression_2506_17_346()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_EqualityExpression_2535_42_360()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_RelationalNoInOperator_2526_17_395()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_RelationalExpression_2506_37_375()
 {
    if (jj_3R_RelationalOperator_2512_17_140()) return true;
    if (jj_3R_ShiftExpression_2491_17_359()) return true;
    return false;
  }

  private boolean jj_3R_RelationalExpressionNoIn_2519_17_372()
 {
    if (jj_3R_ShiftExpression_2491_17_359()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RelationalExpressionNoIn_2519_37_388()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_2491_40_390()
 {
    if (jj_3R_ShiftOperator_2497_17_398()) return true;
    if (jj_3R_AdditiveExpression_2476_17_374()) return true;
    return false;
  }

  private boolean jj_3R_RelationalOperator_2512_17_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(92)) {
    jj_scanpos = xsp;
    if (jj_scan_token(93)) {
    jj_scanpos = xsp;
    if (jj_scan_token(94)) {
    jj_scanpos = xsp;
    if (jj_scan_token(95)) {
    jj_scanpos = xsp;
    if (jj_scan_token(131)) {
    jj_scanpos = xsp;
    if (jj_scan_token(55)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_RelationalExpression_2506_17_346()
 {
    if (jj_3R_ShiftExpression_2491_17_359()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_RelationalExpression_2506_37_375()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_AdditiveExpression_2476_46_397()
 {
    if (jj_3R_AdditiveOperator_2482_17_405()) return true;
    if (jj_3R_MultiplicativeExpression_2461_17_389()) return true;
    return false;
  }

  private boolean jj_3R_ShiftOperator_2497_17_398()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) {
    jj_scanpos = xsp;
    if (jj_scan_token(109)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_MemberExpressionPart_2363_149_97()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_noReservedIdentifier_1380_11_143()) return true;
    return false;
  }

  private boolean jj_3R_Arguments_2388_123_145()
 {
    if (jj_3R_ArgumentList_2406_17_178()) return true;
    return false;
  }

  private boolean jj_3R_ShiftExpression_2491_17_359()
 {
    if (jj_3R_AdditiveExpression_2476_17_374()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ShiftExpression_2491_40_390()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_null_1670_68_95()
 {
    if (jj_3R_RelationalOperator_2512_17_140()) return true;
    return false;
  }

  private boolean jj_3R_AdditiveOperator_2482_17_405()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) return true;
    }
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_2461_37_404()
 {
    if (jj_3R_MultiplicativeOperator_2468_17_412()) return true;
    if (jj_3R_UnaryExpression_2444_17_396()) return true;
    return false;
  }

  private boolean jj_3R_SourceElement_3178_86_350()
 {
    if (jj_3R_FunctionDeclaration_3078_17_363()) return true;
    return false;
  }

  private boolean jj_3R_AdditiveExpression_2476_17_374()
 {
    if (jj_3R_MultiplicativeExpression_2461_17_389()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AdditiveExpression_2476_46_397()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_LeftHandSideExpressionForIn_2420_69_393()
 {
    if (jj_3R_MemberExpressionForIn_2345_17_401()) return true;
    return false;
  }

  private boolean jj_3R_null_1670_49_94()
 {
    if (jj_3R_EqualityOperator_2547_17_139()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeOperator_2468_17_412()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(103)) {
    jj_scanpos = xsp;
    if (jj_scan_token(168)) {
    jj_scanpos = xsp;
    if (jj_scan_token(104)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_UnaryExpression_2444_39_403()
 {
    if (jj_3R_UnaryOperator_2450_17_411()) return true;
    if (jj_3R_UnaryExpression_2444_17_396()) return true;
    return false;
  }

  private boolean jj_3R_LeftHandSideExpression_2413_70_99()
 {
    if (jj_3R_MemberExpression_2333_17_77()) return true;
    return false;
  }

  private boolean jj_3R_MultiplicativeExpression_2461_17_389()
 {
    if (jj_3R_UnaryExpression_2444_17_396()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_MultiplicativeExpression_2461_37_404()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_EndStatement_3225_17_128()
 {
    if (jj_scan_token(SEMICOLON)) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_2428_44_413()
 {
    if (jj_3R_PostfixOperator_2434_17_414()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    return false;
  }

  private boolean jj_3R_UnaryOperator_2450_17_411()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(49)) {
    jj_scanpos = xsp;
    if (jj_scan_token(64)) {
    jj_scanpos = xsp;
    if (jj_scan_token(62)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(101)) {
    jj_scanpos = xsp;
    if (jj_scan_token(102)) {
    jj_scanpos = xsp;
    if (jj_scan_token(114)) {
    jj_scanpos = xsp;
    if (jj_scan_token(113)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_null_1670_29_66()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1670_49_94()) {
    jj_scanpos = xsp;
    if (jj_3R_null_1670_68_95()) return true;
    }
    return false;
  }

  private boolean jj_3_13()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1670_29_66()) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) return true;
    }
    return false;
  }

  private boolean jj_3R_CallExpressionPart_2382_82_111()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_noReservedIdentifier_1380_11_143()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2444_17_402()
 {
    if (jj_3R_PostfixExpression_2428_17_410()) return true;
    return false;
  }

  private boolean jj_3R_UnaryExpression_2444_17_396()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_UnaryExpression_2444_17_402()) {
    jj_scanpos = xsp;
    if (jj_3R_UnaryExpression_2444_39_403()) return true;
    }
    return false;
  }

  private boolean jj_3R_ImportStatement_3193_35_326()
 {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(STAR)) return true;
    return false;
  }

  private boolean jj_3R_PostfixOperator_2434_17_414()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) return true;
    }
    return false;
  }

  private boolean jj_3R_Name_3200_17_325()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_CallExpression_2369_17_78()) return true;
    return false;
  }

  private boolean jj_3R_ArgumentList_2406_41_208()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_PostfixExpression_2428_17_410()
 {
    if (jj_3R_LeftHandSideExpression_2413_17_68()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PostfixExpression_2428_44_413()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_ImportStatement_3193_17_292()
 {
    if (jj_scan_token(IMPORT)) return true;
    if (jj_3R_Name_3200_17_325()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ImportStatement_3193_35_326()) jj_scanpos = xsp;
    if (jj_3R_EndStatement_3225_17_128()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_MemberExpression_2333_17_77()) return true;
    if (jj_scan_token(LPAREN)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_LeftHandSideExpressionForIn_2420_17_392()
 {
    if (jj_3R_CallExpressionForIn_2375_17_400()) return true;
    return false;
  }

  private boolean jj_3R_LeftHandSideExpressionForIn_2420_17_379()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LeftHandSideExpressionForIn_2420_17_392()) {
    jj_scanpos = xsp;
    if (jj_3R_LeftHandSideExpressionForIn_2420_69_393()) return true;
    }
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_scan_token(IDENTIFIER_NAME)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_LeftHandSideExpression_2413_17_98()
 {
    if (jj_3R_CallExpression_2369_17_78()) return true;
    return false;
  }

  private boolean jj_3R_LeftHandSideExpression_2413_17_68()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_LeftHandSideExpression_2413_17_98()) {
    jj_scanpos = xsp;
    if (jj_3R_LeftHandSideExpression_2413_70_99()) return true;
    }
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_CallExpressionPart_2381_17_75()) return true;
    return false;
  }

  private boolean jj_3R_NamedArgumentList_2394_35_207()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_NamedArgument_2400_11_206()) return true;
    return false;
  }

  private boolean jj_3R_SourceElement_3178_17_349()
 {
    if (jj_3R_GeneratorFunctionDeclaration_3085_17_362()) return true;
    return false;
  }

  private boolean jj_3R_SourceElement_3178_17_333()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_SourceElement_3178_17_349()) {
    jj_scanpos = xsp;
    if (jj_3R_SourceElement_3178_86_350()) {
    jj_scanpos = xsp;
    if (jj_3R_SourceElement_3178_145_351()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_null_1579_82_61()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_GeneratorFunctionExpression_3134_61_220()
 {
    if (jj_3R_FormalParameterList_3141_17_183()) return true;
    return false;
  }

  private boolean jj_3R_SourceElements_3172_18_299()
 {
    if (jj_3R_SourceElement_3178_17_333()) return true;
    return false;
  }

  private boolean jj_3R_ArgumentList_2406_17_178()
 {
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArgumentList_2406_41_208()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_SourceElements_3172_17_278()
 {
    Token xsp;
    if (jj_3R_SourceElements_3172_18_299()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_SourceElements_3172_18_299()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_FirstSetOp_1623_32_176()
 {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_FourthSetOp_1610_17_65()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionExpression_3127_60_223()
 {
    if (jj_3R_FormalParameterList_3141_17_183()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_CallExpressionPart_2381_17_75()) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_ThirdSetOp_1617_31_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(110)) return true;
    }
    if (jj_3R_ThirdSetOp_1617_17_93()) return true;
    return false;
  }

  private boolean jj_3R_CallExpressionPart_2382_31_110()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_NamedArgumentList_2394_18_177()
 {
    if (jj_3R_NamedArgument_2400_11_206()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_NamedArgumentList_2394_35_207()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_NamedArgument_2400_11_206()
 {
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_Arguments_2387_22_100()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Arguments_2387_22_144()) {
    jj_scanpos = xsp;
    if (jj_3R_Arguments_2388_123_145()) return true;
    }
    return false;
  }

  private boolean jj_3R_Arguments_2387_22_144()
 {
    if (jj_3R_NamedArgumentList_2394_18_177()) return true;
    return false;
  }

  private boolean jj_3R_FunctionBody_3147_29_249()
 {
    if (jj_3R_SourceElements_3172_17_278()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_FourthSetOp_1610_17_65()) return true;
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_3R_ExpressionNoIn_2697_17_90()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameterList_3141_34_218()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_FirstSetOp_1623_17_137()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FirstSetOp_1623_17_175()) {
    jj_scanpos = xsp;
    if (jj_3R_FirstSetOp_1623_32_176()) return true;
    }
    return false;
  }

  private boolean jj_3R_FirstSetOp_1623_17_175()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionPart_2362_45_142()
 {
    if (jj_scan_token(LBRACE)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_Arguments_2387_17_70()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_Arguments_2387_22_100()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_GeneratorFunctionExpression_3134_37_219()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_2356_47_187()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_35()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ThirdSetOp_1617_17_93()
 {
    if (jj_3R_FirstSetOp_1623_17_137()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ThirdSetOp_1617_31_138()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CallExpressionPart_2381_17_109()
 {
    if (jj_3R_Arguments_2387_17_70()) return true;
    return false;
  }

  private boolean jj_3R_CallExpressionPart_2381_17_75()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CallExpressionPart_2381_17_109()) {
    jj_scanpos = xsp;
    if (jj_3R_CallExpressionPart_2382_31_110()) {
    jj_scanpos = xsp;
    if (jj_3R_CallExpressionPart_2382_82_111()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3100_65_108()
 {
    if (jj_3R_ExpressionNoIn_2697_17_90()) return true;
    return false;
  }

  private boolean jj_3R_null_1601_29_64()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(85)) jj_scanpos = xsp;
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionBody_3147_17_221()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionBody_3147_29_249()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_FunctionExpression_3127_36_222()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3R_FourthSetOp_1610_17_65()
 {
    if (jj_3R_ThirdSetOp_1617_17_93()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_CallExpressionForIn_2375_17_400()
 {
    if (jj_3R_MemberExpressionForIn_2345_17_401()) return true;
    if (jj_3R_Arguments_2387_17_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_37()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_9()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1600_25_63()) {
    jj_scanpos = xsp;
    if (jj_3R_null_1601_29_64()) return true;
    }
    return false;
  }

  private boolean jj_3R_null_1600_25_63()
 {
    if (jj_3R_getNoReservedIdentifier_1363_11_76()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(89)) {
    jj_scanpos = xsp;
    if (jj_scan_token(43)) return true;
    }
    }
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_ArrowFunctionExpression_3099_9_74()) return true;
    return false;
  }

  private boolean jj_3R_FormalParameterList_3141_17_183()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_FormalParameterList_3141_34_218()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    return false;
  }

  private boolean jj_3R_null_1581_38_62()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_CallExpression_2369_17_78()
 {
    if (jj_3R_MemberExpression_2333_17_77()) return true;
    if (jj_3R_Arguments_2387_17_70()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_8()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1581_38_62()) jj_scanpos = xsp;
    if (jj_scan_token(CONDITION)) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_FourthSetOp_1610_17_65()) return true;
    return false;
  }

  private boolean jj_3R_null_1579_38_92()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_GeneratorFunctionExpression_3134_17_184()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeneratorFunctionExpression_3134_37_219()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_GeneratorFunctionExpression_3134_61_220()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_FunctionBody_3147_17_221()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1579_37_60()) {
    jj_scanpos = xsp;
    if (jj_3R_null_1579_82_61()) return true;
    }
    return false;
  }

  private boolean jj_3R_null_1579_37_60()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1579_38_92()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(35)) {
    jj_scanpos = xsp;
    if (jj_scan_token(36)) return true;
    }
    return false;
  }

  private boolean jj_3R_MemberExpressionForIn_2349_33_409()
 {
    if (jj_3R_PrimaryExpression_2121_13_186()) return true;
    return false;
  }

  private boolean jj_3R_null_1577_38_91()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionForIn_2348_33_408()
 {
    if (jj_3R_ArrowFunctionExpression_3099_9_74()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1577_37_59()) {
    jj_scanpos = xsp;
    if (jj_scan_token(25)) return true;
    }
    return false;
  }

  private boolean jj_3R_null_1577_37_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1577_38_91()) jj_scanpos = xsp;
    if (jj_scan_token(APPLY)) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionPart_2362_19_141()
 {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_Expression_2691_17_88()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionForIn_2347_33_407()
 {
    if (jj_3R_FunctionExpression_3127_17_185()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionForIn_2346_33_406()
 {
    if (jj_3R_GeneratorFunctionExpression_3134_17_184()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionPart_2362_17_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberExpressionPart_2362_19_141()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpressionPart_2362_45_142()) return true;
    }
    return false;
  }

  private boolean jj_3R_MemberExpressionPart_2362_17_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberExpressionPart_2362_17_96()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpressionPart_2363_149_97()) return true;
    }
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_ArrowFunctionExpression_3099_9_74()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_scan_token(FUNCTION)) return true;
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3099_46_106()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    return false;
  }

  private boolean jj_3R_FunctionExpression_3127_17_185()
 {
    if (jj_scan_token(FUNCTION)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionExpression_3127_36_222()) jj_scanpos = xsp;
    if (jj_scan_token(LPAREN)) return true;
    xsp = jj_scanpos;
    if (jj_3R_FunctionExpression_3127_60_223()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_FunctionBody_3147_17_221()) return true;
    return false;
  }

  private boolean jj_3R_null_1575_34_58()
 {
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(COLON)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_null_1575_34_58()) jj_scanpos = xsp;
    if (jj_scan_token(SELECT)) return true;
    return false;
  }

  private boolean jj_3R_GeneratorFunctionDeclaration_3085_56_376()
 {
    if (jj_3R_FormalParameterList_3141_17_183()) return true;
    return false;
  }

  private boolean jj_3R_AllocationExpression_2356_17_155()
 {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_MemberExpression_2333_17_77()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_AllocationExpression_2356_47_187()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2337_33_154()
 {
    if (jj_3R_PrimaryExpression_2121_13_186()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2336_33_153()
 {
    if (jj_3R_ArrowFunctionExpression_3099_9_74()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2335_33_152()
 {
    if (jj_3R_FunctionExpression_3127_17_185()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2334_33_151()
 {
    if (jj_3R_GeneratorFunctionExpression_3134_17_184()) return true;
    return false;
  }

  private boolean jj_3R_FunctionDeclaration_3078_55_377()
 {
    if (jj_3R_FormalParameterList_3141_17_183()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2339_26_113()
 {
    if (jj_3R_AllocationExpression_2356_17_155()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpressionForIn_2345_17_401()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberExpressionForIn_2346_33_406()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpressionForIn_2347_33_407()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpressionForIn_2348_33_408()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpressionForIn_2349_33_409()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_33()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_MemberExpressionPart_2362_17_67()) return true;
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PropertyNameAndValue_2309_17_73()) return true;
    return false;
  }

  private boolean jj_3R_ArrowFunctionBody_3093_29_134()
 {
    if (jj_3R_Statement_2709_25_172()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_ArrowFunctionBody_3093_17_89()) return true;
    return false;
  }

  private boolean jj_3R_MemberExpression_2333_17_112()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberExpression_2334_33_151()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpression_2335_33_152()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpression_2336_33_153()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpression_2337_33_154()) return true;
    }
    }
    }
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_29()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_MemberExpression_2333_17_77()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_MemberExpression_2333_17_112()) {
    jj_scanpos = xsp;
    if (jj_3R_MemberExpression_2339_26_113()) return true;
    }
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3099_16_150()
 {
    if (jj_3R_FormalParameterList_3141_17_183()) return true;
    return false;
  }

  private boolean jj_3R_PropertyNameAndValueList_2303_42_352()
 {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_PropertyNameAndValue_2309_17_73()) return true;
    return false;
  }

  private boolean jj_3R_PropertyNameAndValueList_2303_42_334()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PropertyNameAndValueList_2303_42_352()) {
    jj_scanpos = xsp;
    if (jj_scan_token(91)) return true;
    }
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3100_11_107()
 {
    if (jj_3R_ArrowFunctionBody_3093_17_89()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_3054_56_341()
 {
    if (jj_3R_Finally_3069_17_339()) return true;
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3099_11_105()
 {
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrowFunctionExpression_3099_16_150()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_ArrowFunctionBody_3093_17_89()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ArrowFunctionBody_3093_29_134()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_PropertyName_2317_25_149()
 {
    if (jj_3R_Literal_2152_17_180()) return true;
    return false;
  }

  private boolean jj_3R_ArrowFunctionExpression_3099_9_74()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ArrowFunctionExpression_3099_11_105()) {
    jj_scanpos = xsp;
    if (jj_3R_ArrowFunctionExpression_3099_46_106()) return true;
    }
    if (jj_scan_token(ARROW)) return true;
    xsp = jj_scanpos;
    if (jj_3R_ArrowFunctionExpression_3100_11_107()) {
    jj_scanpos = xsp;
    if (jj_3R_ArrowFunctionExpression_3100_65_108()) return true;
    }
    return false;
  }

  private boolean jj_3R_PropertyName_2315_21_104()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_PropertyName_2315_21_148()) {
    jj_scanpos = xsp;
    if (jj_3R_PropertyName_2317_25_149()) return true;
    }
    return false;
  }

  private boolean jj_3R_PropertyName_2315_21_148()
 {
    if (jj_3R_noReservedIdentifier_1380_11_143()) return true;
    return false;
  }

  private boolean jj_3R_GeneratorFunctionDeclaration_3085_17_362()
 {
    if (jj_scan_token(FUNCTION_GEN)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_GeneratorFunctionDeclaration_3085_56_376()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_FunctionBody_3147_17_221()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_3054_47_306()
 {
    if (jj_3R_Catch_3062_17_340()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TryStatement_3054_56_341()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_FunctionDeclaration_3078_17_363()
 {
    if (jj_scan_token(FUNCTION)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(LPAREN)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_FunctionDeclaration_3078_55_377()) jj_scanpos = xsp;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_FunctionBody_3147_17_221()) return true;
    return false;
  }

  private boolean jj_3R_PropertyNameAndValue_2309_17_73()
 {
    if (jj_3R_PropertyName_2315_21_104()) return true;
    if (jj_scan_token(COLON)) return true;
    if (jj_3R_AssignmentExpression_2663_17_72()) return true;
    return false;
  }

  private boolean jj_3R_CaseBlock_3008_84_356()
 {
    if (jj_3R_CaseClauses_3016_17_354()) return true;
    return false;
  }

  private boolean jj_3R_CaseClause_3022_68_394()
 {
    if (jj_3R_StatementList_2793_17_232()) return true;
    return false;
  }

  private boolean jj_3R_TryStatement_3054_35_305()
 {
    if (jj_3R_Finally_3069_17_339()) return true;
    return false;
  }

  private boolean jj_3R_ObjectLiteral_2295_27_279()
 {
    if (jj_3R_PropertyNameAndValueList_2303_17_300()) return true;
    return false;
  }

  private boolean jj_3R_DefaultClause_3029_58_371()
 {
    if (jj_3R_StatementList_2793_17_232()) return true;
    return false;
  }

  private boolean jj_3R_PropertyNameAndValueList_2303_17_300()
 {
    if (jj_3R_PropertyNameAndValue_2309_17_73()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_PropertyNameAndValueList_2303_42_334()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_Finally_3069_17_339()
 {
    if (jj_scan_token(FINALLY)) return true;
    if (jj_3R_Block_2784_17_159()) return true;
    return false;
  }

  private boolean jj_3R_Catch_3062_17_340()
 {
    if (jj_scan_token(CATCH)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_Identifier_2221_11_57()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_Block_2784_17_159()) return true;
    return false;
  }

  private boolean jj_3R_ObjectLiteral_2294_17_251()
 {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ObjectLiteral_2295_27_279()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_CaseBlock_3008_66_338()
 {
    if (jj_3R_DefaultClause_3029_17_355()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_CaseBlock_3008_84_356()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  private boolean jj_3R_ElisionFirst_2286_19_353()
 {
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_ElisionFirst_2286_18_335()
 {
    Token xsp;
    if (jj_3R_ElisionFirst_2286_19_353()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_ElisionFirst_2286_19_353()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_ElisionFirst_2285_17_301()
 {
    if (jj_scan_token(COMMA)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_ElisionFirst_2286_18_335()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_TryStatement_3052_17_165()
 {
    if (jj_scan_token(TRY)) return true;
    if (jj_3R_Block_2784_17_159()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_TryStatement_3054_35_305()) {
    jj_scanpos = xsp;
    if (jj_3R_TryStatement_3054_47_306()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public LARAEcmaScriptTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[187];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static private int[] jj_la1_4;
  static private int[] jj_la1_5;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	   jj_la1_init_2();
	   jj_la1_init_3();
	   jj_la1_init_4();
	   jj_la1_init_5();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xce640000,0xce640000,0x0,0x180000,0x180000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe00000,0xe00000,0x0,0x0,0x7b000000,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0xce640000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x8000000,0x0,0xce640000,0x0,0x30000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xce640000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xce640000,0x0,0x0,0xce640000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xce640000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38000000,0x0,0x10000000,0x0,0x0,0x0,0x38000000,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38000000,0x38000000,0x0,0x0,0x0,0x0,0x38000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x38000000,0x38000000,0x38000000,0x38000000,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x98fc0978,0x98fe0978,0x0,0xa4300000,0xa4300000,0x0,0xa4300000,0x0,0x0,0x0,0x0,0x0,0x0,0x80300000,0x80300000,0x64320000,0x0,0x0,0x0,0x200,0x100,0xfc7b80df,0xfc7b80c7,0x400,0x0,0x0,0x0,0x0,0x0,0x98fc0978,0x0,0x0,0x0,0x64320000,0x64320000,0x0,0x0,0x0,0x800000,0x0,0x18,0x0,0x0,0x6000,0x6000,0x18,0x18,0x1000,0x0,0xc7,0xc7,0x0,0xa4300000,0x0,0x98fc0978,0x0,0x0,0x0,0x0,0x78,0x78,0x41,0x0,0x0,0x0,0x0,0x0,0x98fe0978,0x0,0x0,0x80000,0x20000000,0x0,0x0,0x0,0x0,0x64320000,0x0,0x0,0x0,0x0,0x0,0x98fe0978,0x0,0x0,0x98fe0978,0x20000000,0x24300000,0x20000000,0x0,0x0,0x0,0x64320000,0xfcfe0978,0x0,0x0,0x24300000,0x20300000,0x0,0x0,0x64320000,0x40020000,0x0,0x0,0x0,0x0,0x0,0x0,0x800000,0x800000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x64320000,0x64320000,0x64320000,0x64320000,0x0,0x0,0x0,0xfc3380c7,0xc7,0x0,0x0,0x18018000,0x480000,0xfc7b80c7,0xfc7b80c7,0x0,0x0,0x0,0x0,0x0,0x64320000,0x24300000,0x40000,0x80000,0xa0300000,0x64320000,0x64320000,0x64320000,0x64320000,0x64320000,0x1800000,0x1800000,0xa0300000,0x2000000,0x0,0x0,0x0,0x0,0x0,0xfc7b80c7,0xfc7b80c7,0x0,0x0,0x0,0x0,0xfc7b80c7,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xfc7b80c7,0xfc7b80c7,0xfc7b80c7,0xfc7b80c7,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_2() {
	   jj_la1_2 = new int[] {0x832a,0x832a,0x2000,0xa80000,0xa80000,0x4000000,0xa80000,0x0,0x10000000,0x0,0x200000,0x4000000,0x4000000,0x0,0x0,0xa80001,0x4000000,0x0,0x0,0x0,0x0,0x4aba207,0x4aba207,0x0,0x0,0x0,0x0,0x200000,0x200000,0x832a,0x80000,0x2000000,0x8000000,0xa80001,0xa80001,0x8000000,0x8000000,0x200000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa80000,0x200000,0x832a,0x20000000,0x0,0x20000000,0x10000000,0x0,0x10200000,0x0,0x200000,0x200000,0x200000,0x0,0x200000,0x20832a,0x0,0x8000000,0x0,0xa80000,0x0,0x0,0x0,0x8000000,0xa80001,0x8000000,0x8000000,0x8000000,0x8000000,0x8000000,0x832a,0x8000000,0x8000000,0x832a,0xa80000,0xa80000,0xa80000,0x880000,0x2880000,0x2a00000,0xa80001,0xa8832b,0x8000000,0x8000000,0xa80000,0xa80000,0x0,0x0,0xa80001,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0xf0000000,0xf0000000,0xf0000000,0xf0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa80001,0xa80001,0xa80001,0xa80001,0x0,0x8000000,0x8000000,0x4a82001,0x0,0x0,0x4000000,0x2000,0xb8206,0x4aba207,0x4aba207,0x8000000,0x8000000,0x0,0x0,0x0,0xa80001,0xa80000,0x0,0x202,0xa80000,0xa80001,0xa80001,0xa80001,0xa80001,0xa80001,0x0,0x0,0xa80000,0x200000,0x0,0x8,0x8,0x100100,0x8,0x4aba207,0x4aba207,0x1000,0x1010,0x0,0x0,0x4aba207,0x0,0x200000,0x0,0x0,0x0,0x0,0x8000000,0x4aba207,0x4aba207,0x4aba207,0x4aba207,0x2000000,0x8000000,0x0,};
	}
	private static void jj_la1_init_3() {
	   jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60660,0x0,0x0,0x0,0x0,0x0,0x60660,0x60660,0x0,0x0,0x404000,0x404000,0x0,0x0,0x0,0x0,0x0,0x0,0x60660,0x606e0,0x0,0x0,0x0,0x1f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60660,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60660,0x60660,0x0,0x0,0x0,0x0,0x600,0x600,0x60660,0x60660,0x180,0x180,0x60,0x60,0x3800,0x3800,0x0,0x0,0x0,0x0,0x1f,0x1f,0x1f,0x4000,0x4000,0x10000,0x10000,0x8000,0x8000,0x80000,0x80000,0x100000,0x100000,0x200000,0x200000,0x60660,0x60660,0x60660,0x60660,0xff000000,0x0,0x0,0x60660,0x0,0x0,0x0,0x0,0x0,0x60660,0x60660,0x0,0x0,0x800000,0x1000000,0x1000000,0x60660,0x0,0x0,0x0,0x0,0x60660,0x60660,0x60660,0x60660,0x60660,0x0,0x0,0x0,0x0,0x80,0x0,0x0,0x0,0x0,0x60660,0x60660,0x0,0x0,0x0,0x0,0x60660,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x60660,0x60660,0x60660,0x60660,0x0,0x0,0x1000000,};
	}
	private static void jj_la1_init_4() {
	   jj_la1_4 = new int[] {0x2000008,0x2000008,0x0,0x2803910,0x2803910,0x0,0x2803910,0x2000000,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x2803910,0x0,0x0,0x0,0x0,0x0,0x2803910,0x2803910,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x2000008,0x0,0x0,0x0,0x2803910,0x2803910,0x0,0x0,0x2000000,0x8,0x2000000,0x0,0x2000000,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000000,0x2803910,0x0,0x2000008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x802000,0x802000,0x802000,0x2802000,0x2802000,0x2000008,0x2000000,0x0,0x0,0x2803910,0x803910,0x802000,0x3000000,0x0,0x2803910,0x0,0x0,0x0,0x0,0x0,0x2803918,0x0,0x0,0x2803918,0x2803910,0x2803910,0x2803910,0x0,0x0,0x0,0x2803910,0x2803918,0x0,0x0,0x2803910,0x2803910,0x0,0x0,0x2803910,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2803910,0x2803910,0x2803910,0x2803910,0x7,0x0,0x0,0x2803910,0x0,0x0,0x0,0x0,0x0,0x2803910,0x2803910,0x0,0x0,0x0,0x0,0x0,0x2803910,0x2803910,0x0,0x0,0x2803910,0x2803910,0x2803910,0x2803910,0x2803910,0x2803910,0x0,0x0,0x2803910,0x0,0x0,0x0,0x0,0x0,0x0,0x2803910,0x2803910,0x0,0x0,0x2000000,0x2000000,0x2803910,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x2000000,0x0,0x2803910,0x2803910,0x2803910,0x2803910,0x0,0x0,0x0,};
	}
	private static void jj_la1_init_5() {
	   jj_la1_5 = new int[] {0x0,0x0,0x0,0x200,0x200,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x200,0x200,0x200,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x200,0x200,0x0,0x0,0x200,0x0,0x100,0x100,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x200,0x80,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x200,0x200,0x200,0x200,0x200,0x200,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x200,0x200,0x200,0x200,0x0,0x0,0x0,};
	}
  final private JJCalls[] jj_2_rtns = new JJCalls[64];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public LARAEcmaScript(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public LARAEcmaScript(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new LARAEcmaScriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public LARAEcmaScript(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new LARAEcmaScriptTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new LARAEcmaScriptTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public LARAEcmaScript(LARAEcmaScriptTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LARAEcmaScriptTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jjtree.reset();
	 jj_gen = 0;
	 for (int i = 0; i < 187; i++) jj_la1[i] = -1;
	 for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   if (++jj_gc > 100) {
		 jj_gc = 0;
		 for (int i = 0; i < jj_2_rtns.length; i++) {
		   JJCalls c = jj_2_rtns[i];
		   while (c != null) {
			 if (c.gen < jj_gen) c.first = null;
			 c = c.next;
		   }
		 }
	   }
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error {
    @Override
    public Throwable fillInStackTrace() {
      return this;
    }
  }
  static private final LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
	 if (jj_scanpos == jj_lastpos) {
	   jj_la--;
	   if (jj_scanpos.next == null) {
		 jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
	   } else {
		 jj_lastpos = jj_scanpos = jj_scanpos.next;
	   }
	 } else {
	   jj_scanpos = jj_scanpos.next;
	 }
	 if (jj_rescan) {
	   int i = 0; Token tok = token;
	   while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
	   if (tok != null) jj_add_error_token(kind, i);
	 }
	 if (jj_scanpos.kind != kind) return true;
	 if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
	 return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
	 if (pos >= 100) {
		return;
	 }

	 if (pos == jj_endpos + 1) {
	   jj_lasttokens[jj_endpos++] = kind;
	 } else if (jj_endpos != 0) {
	   jj_expentry = new int[jj_endpos];

	   for (int i = 0; i < jj_endpos; i++) {
		 jj_expentry[i] = jj_lasttokens[i];
	   }

	   for (int[] oldentry : jj_expentries) {
		 if (oldentry.length == jj_expentry.length) {
		   boolean isMatched = true;

		   for (int i = 0; i < jj_expentry.length; i++) {
			 if (oldentry[i] != jj_expentry[i]) {
			   isMatched = false;
			   break;
			 }

		   }
		   if (isMatched) {
			 jj_expentries.add(jj_expentry);
			 break;
		   }
		 }
	   }

	   if (pos != 0) {
		 jj_lasttokens[(jj_endpos = pos) - 1] = kind;
	   }
	 }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[171];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 187; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		   if ((jj_la1_2[i] & (1<<j)) != 0) {
			 la1tokens[64+j] = true;
		   }
		   if ((jj_la1_3[i] & (1<<j)) != 0) {
			 la1tokens[96+j] = true;
		   }
		   if ((jj_la1_4[i] & (1<<j)) != 0) {
			 la1tokens[128+j] = true;
		   }
		   if ((jj_la1_5[i] & (1<<j)) != 0) {
			 la1tokens[160+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 171; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 jj_endpos = 0;
	 jj_rescan_token();
	 jj_add_error_token(0, 0);
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
	 jj_rescan = true;
	 for (int i = 0; i < 64; i++) {
	   try {
		 JJCalls p = jj_2_rtns[i];

		 do {
		   if (p.gen > jj_gen) {
			 jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
			 switch (i) {
			   case 0: jj_3_1(); break;
			   case 1: jj_3_2(); break;
			   case 2: jj_3_3(); break;
			   case 3: jj_3_4(); break;
			   case 4: jj_3_5(); break;
			   case 5: jj_3_6(); break;
			   case 6: jj_3_7(); break;
			   case 7: jj_3_8(); break;
			   case 8: jj_3_9(); break;
			   case 9: jj_3_10(); break;
			   case 10: jj_3_11(); break;
			   case 11: jj_3_12(); break;
			   case 12: jj_3_13(); break;
			   case 13: jj_3_14(); break;
			   case 14: jj_3_15(); break;
			   case 15: jj_3_16(); break;
			   case 16: jj_3_17(); break;
			   case 17: jj_3_18(); break;
			   case 18: jj_3_19(); break;
			   case 19: jj_3_20(); break;
			   case 20: jj_3_21(); break;
			   case 21: jj_3_22(); break;
			   case 22: jj_3_23(); break;
			   case 23: jj_3_24(); break;
			   case 24: jj_3_25(); break;
			   case 25: jj_3_26(); break;
			   case 26: jj_3_27(); break;
			   case 27: jj_3_28(); break;
			   case 28: jj_3_29(); break;
			   case 29: jj_3_30(); break;
			   case 30: jj_3_31(); break;
			   case 31: jj_3_32(); break;
			   case 32: jj_3_33(); break;
			   case 33: jj_3_34(); break;
			   case 34: jj_3_35(); break;
			   case 35: jj_3_36(); break;
			   case 36: jj_3_37(); break;
			   case 37: jj_3_38(); break;
			   case 38: jj_3_39(); break;
			   case 39: jj_3_40(); break;
			   case 40: jj_3_41(); break;
			   case 41: jj_3_42(); break;
			   case 42: jj_3_43(); break;
			   case 43: jj_3_44(); break;
			   case 44: jj_3_45(); break;
			   case 45: jj_3_46(); break;
			   case 46: jj_3_47(); break;
			   case 47: jj_3_48(); break;
			   case 48: jj_3_49(); break;
			   case 49: jj_3_50(); break;
			   case 50: jj_3_51(); break;
			   case 51: jj_3_52(); break;
			   case 52: jj_3_53(); break;
			   case 53: jj_3_54(); break;
			   case 54: jj_3_55(); break;
			   case 55: jj_3_56(); break;
			   case 56: jj_3_57(); break;
			   case 57: jj_3_58(); break;
			   case 58: jj_3_59(); break;
			   case 59: jj_3_60(); break;
			   case 60: jj_3_61(); break;
			   case 61: jj_3_62(); break;
			   case 62: jj_3_63(); break;
			   case 63: jj_3_64(); break;
			 }
		   }
		   p = p.next;
		 } while (p != null);

		 } catch(LookaheadSuccess ls) { }
	 }
	 jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
	 JJCalls p = jj_2_rtns[index];
	 while (p.gen > jj_gen) {
	   if (p.next == null) { p = p.next = new JJCalls(); break; }
	   p = p.next;
	 }

	 p.gen = jj_gen + xla - jj_la; 
	 p.first = token;
	 p.arg = xla;
  }

  static final class JJCalls {
	 int gen;
	 Token first;
	 int arg;
	 JJCalls next;
  }

}
