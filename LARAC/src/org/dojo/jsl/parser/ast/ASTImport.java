/* Generated By:JJTree: Do not edit this line. ASTImport.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.lara.interpreter.weaver.utils.LaraResourceProvider;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.LaraC;
import larac.exceptions.LARACompilerException;
import larac.utils.output.MessageConstants;
import pt.up.fe.specs.util.SpecsIo;
import tdrc.utils.StringUtils;

public class ASTImport extends SimpleNode {

    public ASTImport(int id) {
        super(id);
    }

    public ASTImport(LARAEcmaScript p, int id) {
        super(p, id);
    }

    @Override
    public Object organize(Object obj) {
        declareGlobal(getLara());
        return null;
    }

    @Override
    public void declareGlobal(LaraC lara) {

        // Ignore imports if in documentation mode
        if (lara.getOptions().isDocumentationMode()) {
            return;
        }

        String filePath = "";
        if (getChildren() != null) {
            for (final Node n : getChildren()) {
                filePath += ((ASTIdentifier) n).value + File.separator;
            }
        }

        MessageConstants.addSpace();
        if (value.equals("*")) {

            importAllLara(lara, filePath);

        } else {
            // String fileName = value + ".lara";
            // var validLaraImport = importSingleLara(lara, value + ".lara", filePath);
            // var validScriptImport = importSingleScript(lara, value.toString(), filePath);

            var validImport = importSingleName(lara, value.toString(), filePath);

            // var validImport = validLaraImport || validScriptImport;
            if (!validImport) {
                var importValue = filePath + value;
                var exts = LaraC.getSupportedExtensions().stream().collect(Collectors.joining(", .", ".", ""));
                throw newException(
                        "No valid file (" + exts + ") was found in the included folders/resources for the import: "
                                + importValue);
            }

        }
        MessageConstants.removeSpace();
        lara.println("");

    }

    /**
     * Imports all lara files/resources containing the input file path prefix
     * 
     * @param lara
     * @param filePath
     */
    private void importAllLara(final LaraC lara, String filePath) {

        boolean anyImported = false;

        // 1.
        // Search all included folders that contains the path as child
        for (final File path : lara.getOptions().getIncludeFolders()) {
            if ((new File(path, filePath).exists())) {

                final File importingDir = new File(path, filePath);

                importLaraFiles(importingDir, filePath, lara);
                anyImported = true;
            }
        }

        // 2.
        // Search the resources defined in the given package;

        var resources = lara.getOptions().getIncludeResourcesMap().get(filePath);
        // List<LaraResourceProvider> resources = lara.getOptions().getIncludeResources().stream()
        // // .filter(r -> r.getResourceLocation().replace("/", File.separator).equals(filePath))
        // .filter(r -> r.getFileLocation().replace("/", File.separator).equals(filePath))
        // .collect(Collectors.toList());
        if (!resources.isEmpty()) {
            resources.forEach(r -> importLaraResource(lara, filePath, r));
            anyImported = true;
        }

        if (!anyImported) {
            throw newException("No aspect was found in the included folder for the aspect file: "
                    + filePath.replace("*.lara", ""));
        }
    }

    private void importLaraFiles(final File importingDir, String filePath, final LaraC lara) {
        lara.printSubTopic("Importing all lara files from " + importingDir.getAbsolutePath());
        if (!importingDir.isDirectory()) {
            throw newException("Import: The following path is not a directory: " + importingDir);
        }

        MessageConstants.addSpace();
        final File[] files = importingDir.listFiles();
        if (files.length != 0) {
            for (final File importingLaraFile : files) {
                var extension = SpecsIo.getExtension(importingLaraFile);
                if (importingLaraFile.isFile() && LaraC.getSupportedExtensions().contains(extension)) {
                    importLaraFile(lara, filePath, importingLaraFile);
                }
            }
        } else {
            lara.warnln("No LARA files to import.");
        }
        MessageConstants.removeSpace();
    }

    /**
     * Import a single lara file with a given name, in the file path
     * 
     * @param lara
     * @param fileName
     * @param filePath
     * @return true if the file was a valid .lara file for import, false otherwise
     */
    // private boolean importSingleLara(final LaraC lara, String fileName, String filePath) {
    // String relativePath = filePath + fileName;
    //
    // // 1.
    // // Check include folders
    // for (final File path : lara.getOptions().getIncludeFolders()) {
    // final File importingFile = new File(path, relativePath);
    // if (importingFile.exists()) {
    // lara.printSubTopic("Importing " + importingFile);
    // importLaraFile(lara, relativePath, importingFile);
    // return true;
    // }
    // }
    //
    // // 2.
    // // Check resource by filename, instead of resource name
    // Optional<LaraResourceProvider> findFirst = lara.getOptions().getIncludeResources().stream()
    // // .filter(r -> r.getResource().replace("/", File.separator).equals(relativePath))
    // .filter(r -> r.getFileLocation().replace("/", File.separator).equals(relativePath))
    // .findFirst();
    //
    // if (findFirst.isPresent()) {
    // importLaraResource(lara, relativePath, findFirst.get());
    // return true;
    // }
    //
    // return false;
    //
    // // throw newException(
    // // "No aspect was found in the included folders/resources for the aspect file: " + relativePath);
    //
    // }

    /**
     * Imports a single file (either .js or .lara) with a given name, in the file path
     * 
     * @param lara
     * @param fileName
     * @param filePath
     */
    // private boolean importSingleScript(final LaraC lara, String fileName, String filePath) {
    // String relativePath = filePath + fileName;
    //
    // var filesToCheck = getFilesToCheck(lara, relativePath);
    //
    // var foundImport = false;
    //
    // // 1.
    // // Check include folders
    // for (final File path : lara.getOptions().getIncludeFolders()) {
    // for (var ext : LaraC.getSupportedScriptExtensions()) {
    // var filepath = relativePath + "." + ext;
    //
    // final File importingFile = new File(path, filepath);
    // if (importingFile.exists()) {
    // lara.printSubTopic("Importing " + importingFile);
    // importLaraFile(lara, filepath, importingFile);
    // foundImport = true;
    // break;
    // }
    // }
    // }
    //
    // // 2.
    // // Check resource by filename, instead of resource name
    // for (var ext : LaraC.getSupportedScriptExtensions()) {
    // var filepath = relativePath + "." + ext;
    //
    // Optional<LaraResourceProvider> findFirst = lara.getOptions().getIncludeResources().stream()
    // .filter(r -> r.getFileLocation().replace("/", File.separator).equals(filepath))
    // .findFirst();
    //
    // if (findFirst.isPresent()) {
    // importLaraResource(lara, filepath, findFirst.get());
    //
    // // importScriptFile(lara, filepath, findFirst.get());
    // foundImport = true;
    // break;
    // }
    //
    // }
    //
    // return foundImport;
    //
    // }

    /**
     * Imports all files associated with a single import name (e.g. .lara, .js).
     * 
     * <p>
     * For instance, if filePath and fileName resolve to lara.EgImport, will import lara/EgImport.lara and
     * lara/EgImport.js, if they exist.
     * 
     * @param lara
     * @param fileName
     * @param filePath
     */
    private boolean importSingleName(final LaraC lara, String fileName, String filePath) {
        String relativePath = filePath + fileName;

        var foundImport = false;

        // var filesToCheck = getFilesToCheck(lara, relativePath);

        // 1.
        // Check include folders
        for (final File path : lara.getOptions().getIncludeFolders()) {
            for (var ext : LaraC.getSupportedExtensions()) {
                var importPath = relativePath + "." + ext;

                final File importingFile = new File(path, importPath);
                if (importingFile.exists()) {
                    lara.printSubTopic("Importing " + importingFile);
                    importLaraFile(lara, importPath, importingFile);
                    foundImport = true;
                }
            }
        }

        // 2.
        // Check resource by filename, instead of resource name
        for (var ext : LaraC.getSupportedExtensions()) {
            var importPath = relativePath + "." + ext;

            var resource = lara.getOptions().getIncludeResourcesMap().get(importPath);
            if (!resource.isEmpty()) {
                importLaraResource(lara, importPath, resource.get(0));

                // importScriptFile(lara, filepath, findFirst.get());
                foundImport = true;
            }

            // Optional<LaraResourceProvider> findFirst = lara.getOptions().getIncludeResources().stream()
            // .filter(r -> r.getFileLocation().replace("/", File.separator).equals(importPath))
            // .findFirst();
            //
            // if (findFirst.isPresent()) {
            // importLaraResource(lara, importPath, findFirst.get());
            //
            // // importScriptFile(lara, filepath, findFirst.get());
            // foundImport = true;
            // }

        }

        return foundImport;

    }

    /*
    private boolean importFromResource(final LaraC lara, String relativePath) {
    
        // Check resource by filename, instead of resource name
        Optional<LaraResourceProvider> findFirst = lara.getOptions().getIncludeResources().stream()
                // .filter(r -> r.getResource().replace("/", File.separator).equals(relativePath))
                .filter(r -> r.getFileLocation().replace("/", File.separator).equals(relativePath))
                .findFirst();
    
        if (findFirst.isPresent()) {
            importLaraResource(lara, relativePath, findFirst.get());
            return true;
        }
    
        return false;
    }
    */
    /*
    private boolean importFromInclude(final LaraC lara, String fileName, String filePath) {
        String relativePath = filePath + fileName;
    
        for (final File path : lara.getOptions().getIncludeFolders()) {
            final File importingFile = new File(path, relativePath);
            if (importingFile.exists()) {
                lara.printSubTopic("Importing " + importingFile);
                if (!importingFile.exists()) {
                    throw newException(
                            "Import: Could not find file '" + fileName + "' on file path: " + path + relativePath);
                }
    
                importLaraFile(lara, relativePath, importingFile);
                return true;
            }
        }
    
        return false;
    }
    */

    private List<String> getFilesToCheck(LaraC lara, String relativePath) {

        var filesToCheck = new ArrayList<String>();

        for (final File path : lara.getOptions().getIncludeFolders()) {
            for (var ext : LaraC.getSupportedScriptExtensions()) {
                filesToCheck.add(relativePath + "." + ext);
            }
        }

        return filesToCheck;
    }

    private static void importLaraFile(final LaraC lara, final String importPath, final File importingFile) {
        String canonicalPath = SpecsIo.getCanonicalPath(importingFile);
        if (lara.wasImported(canonicalPath)) {
            LaraC importedLARA = lara.getImportedLARA(canonicalPath);
            if (importedLARA == null) {
                throw new LARACompilerException("Problem with recursive import with file: " + canonicalPath
                        + " one occurrence is: " + lara.getLaraPath());
            }
            // LaraLog.debug("ALREADY IMPORTED:" + importedLARA);
            lara.addPreviouslyImportedLARA(importedLARA);
            lara.println(" Aspects from file " + importPath + " were already imported. Will ignore this import.");
            return;
        }
        lara.printSubTopic(" Importing aspects from file " + importPath);
        lara.addImportedLARA(canonicalPath, null);
        final LaraC importingLara = LaraC.newImporter(importingFile, lara.getOptions(), lara.languageSpec(),
                lara.getPrint(), lara.getImportedLARA());
        rearrangeImportedLaraAndImportAspects(lara, importPath, importingLara);
        lara.setImportedLARA(importingLara.getImportedLARA());
        lara.addImportedLARA(canonicalPath, importingLara);
    }

    private static void importLaraResource(final LaraC lara, String filePath,
            final LaraResourceProvider importingResource) {
        String importName = importingResource.getFileLocation();
        String resource = importingResource.getResource();
        // if (lara.wasImported(resource)) {

        if (lara.wasImported(importName)) {
            LaraC importedLARA = lara.getImportedLARA(importName);
            if (importedLARA == null) {
                throw new LARACompilerException("Problem with recursive import with resource: " + resource
                        + " one occurrence is: " + lara.getLaraPath());
            }
            lara.addPreviouslyImportedLARA(importedLARA);
            lara.println(" Aspects from import " + importName + " were already imported. Will ignore this import.");
            return;
        }

        if (importName.equals(resource)) {
            lara.printSubTopic(" Importing aspects from resource " + resource);
        } else {
            lara.printSubTopic(" Importing aspects from resource " + resource + " (import '" + importName + "')");
        }

        // lara.addImportedLARA(resource);
        lara.addImportedLARA(importName, null);
        final LaraC importingLara = LaraC.newImporter(importingResource, lara.getOptions(), lara.languageSpec(),
                lara.getPrint(), lara.getImportedLARA());
        rearrangeImportedLaraAndImportAspects(lara, resource.replace("/", File.separator), importingLara);
        lara.setImportedLARA(importingLara.getImportedLARA());
        lara.addImportedLARA(importName, importingLara);

    }

    private static void rearrangeImportedLaraAndImportAspects(final LaraC lara, String filePath,
            final LaraC importingLara) {
        String prefix = filePath.replace(".lara", MessageConstants.NAME_SEPARATOR);
        prefix = prefix.replace(File.separator, MessageConstants.NAME_SEPARATOR);

        importingLara.setPrefix(prefix);
        lara.println("Organizing imported aspects from " + filePath);
        importingLara.toAspectIR();
        lara.println("Finished organizing imported aspects!");
        importAspects(lara, filePath, importingLara);
    }

    public static void importAspects(final LaraC lara, String filePath, final LaraC importingLara) {
        List<ASTAspectDef> importingAspects = importingLara.aspectIR().getAspectdefs();

        if (!importingAspects.isEmpty()) {
            for (final ASTAspectDef importingAsp : importingAspects) {
                final String key = importingLara.getPrefix() + importingAsp.getName();

                lara.aspectIR().getImportedAspectDefs().put(key, importingAsp);
            }
            String importingAspectsStr = StringUtils.join(importingAspects, ASTAspectDef::getName, ", ");
            lara.println(" Imported the following aspects: " + importingAspectsStr);
        }

        Map<String, SimpleNode> globalElements = importingLara.aspectIR().getGlobalElements();

        if (!globalElements.isEmpty()) {
            globalElements.entrySet()
                    .forEach(e -> lara.aspectIR().addGlobalElement(e.getKey(), e.getValue(), filePath));
            String importingAspectsStr = StringUtils.join(globalElements.keySet(), ", ");
            lara.println(" Imported the following aspects: " + importingAspectsStr);
        }
        // Recursive import
        Map<String, ASTAspectDef> recursiveImport = importingLara.aspectIR().getImportedAspectDefs();
        if (!recursiveImport.isEmpty()) {
            lara.aspectIR().getImportedAspectDefs().putAll(recursiveImport);
            String importedFromImporting = StringUtils.join(recursiveImport.keySet(),
                    s -> s.replace(MessageConstants.NAME_SEPARATOR, "."), ",");
            lara.println(" Recursive import: " + importedFromImporting);
        }
    }

    @Override
    public void toXML(Document doc, Element parent) {
    }
}
/*
 * JavaCC - OriginalChecksum=70d3639852523f4c77e45a34861ed251 (do not edit this
 * line)
 */
