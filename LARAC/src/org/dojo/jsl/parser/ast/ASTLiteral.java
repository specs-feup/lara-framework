/* Generated By:JJTree: Do not edit this line. ASTLiteral.java Version 4.3 */
/*
 * JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=false,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,
 * NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true
 */
package org.dojo.jsl.parser.ast;

import java.io.UnsupportedEncodingException;
import java.util.List;

import javax.xml.bind.DatatypeConverter;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

import larac.objects.Enums.Types;

public class ASTLiteral extends SimpleNode {
    private Types type;
    private List<String> codeParams = null;

    // private String codeFileName;

    public ASTLiteral(int id) {
        super(id);
    }

    public ASTLiteral(LARAEcmaScript p, int id) {
        super(p, id);
    }

    public void setStringValue(String image) {
        value = image.substring(1, image.length() - 1);
    }

    public void setDecimalValue(String image) {

        try {
            value = Long.valueOf(image);
        } catch (final NumberFormatException e) {
            // it's a floating point
            value = Double.valueOf(image);
        }
    }

    public void setHexValue(String image) {

        value = Long.valueOf(image.substring(2), 16);
    }

    public void setFloatingPointValue(String image) {
        value = Double.valueOf(image);
    }

    public void setBooleanValue(String image) {
        value = Boolean.valueOf((image);
    }

    public void setNullValue() {
    }

    public void setRegexValue(String image) {
        value = image;

    }

    public void setCodeValue(String image) {
        value = image;
    }

    public void setType(Types type) {
        this.type = type;
    }

    public Types getType() {
        return type;
    }

    @Override
    public String toString() {
        String ret = LARAEcmaScriptTreeConstants.jjtNodeName[id];

        if (type.equals(Types.Null)) {
            ret += " [null]";
        } else {
            ret += value != null ? (" [" + type + "," + value + "]") : "";
        }
        return ret;
    }

    public Element getFilterElement(Document doc, String prefix) {
        final Element literalEl = doc.createElement("literal");
        // literalEl.setAttribute("type", type.name());
        literalEl.setAttribute("value", prefix + value.toString().replace("\"", ""));
        return literalEl;
    }

    @Override
    public Types getExpressionType() {
        return getType();
    }

    @Override
    public Object organize(Object obj) {
        if (type.equals(Types.Code)) {
            codeParams = getCodeArguments(value.toString());
            try {
                value = value.toString().substring(2, value.toString().length() - 2);
                value = DatatypeConverter.printBase64Binary(value.toString().getBytes("UTF-8"));

            } catch (final UnsupportedEncodingException e) {

                e.printStackTrace();
            }
            // LaraC lara = getLara();
            //
            // codeFileName = lara.aspectIR().generateNewCodeName();
            // String fileSep = System.getProperty("file.separator");
            // File outputDir = lara.getOptions().getOutputDir();
            // FileUtils.toFile(lara.getPrint(), codeFileName, ".code",
            // value.toString().substring(2, value.toString().length() - 2),
            // outputDir);
            // File codeFile = new File(outputDir, codeFileName + ".code");
            // value = codeFile.getAbsolutePath().replace(fileSep, fileSep +
            // fileSep);
        }
        if (obj instanceof ASTInsert && type.equals(Types.String)) {
            codeParams = getCodeArguments(value.toString());
        }
        return type;
    }

    @Override
    public void toXML(Document doc, Element parent) {
        final Element literalEl = doc.createElement("literal");

        if (type.equals(Types.Null)) {
            literalEl.setAttribute("value", "null");
            literalEl.setAttribute("type", Types.Object.toString());
        } else {

            if (type.equals(Types.Code) || (type.equals(Types.String) && codeParams != null && !codeParams.isEmpty())) {
                // final SimpleNode obj = ((SimpleNode)
                // this.parent).getParentById(LARAEcmaScriptTreeConstants.JJTACTION);
                // if (obj == null) {
                codeToXML(doc, parent);
                return;
                // }
                // literalEl.setAttribute("type", Types.Base64.toString());
            } else {
                literalEl.setAttribute("type", type.toString());
            }

            literalEl.setAttribute("value", value.toString());

        }
        parent.appendChild(literalEl);
    }

    @Override
    public void toXMLTemplate(Document doc, Element parent) {
        final Element literalEl = doc.createElement("literal");
        literalEl.setAttribute("type", Types.Object.toString());
        literalEl.setAttribute("desc", Types.Code.toString());
        parent.appendChild(literalEl);
        final Element propEl = doc.createElement("key");
        literalEl.appendChild(propEl);
        propEl.setAttribute("name", "code");
        if (type == Types.String) {
            codeParams = getCodeArguments(value.toString());
        }
        toXML(doc, propEl);
        if (codeParams != null) {
            verifyCodeArguments(codeParams);
            codeTemplateArgumentsToXML(doc, literalEl, codeParams);
        }
    }

    public void codeToXML(Document doc, Element parent) {
        final Element literalEl = doc.createElement("literal");
        literalEl.setAttribute("type", Types.Object.toString());
        literalEl.setAttribute("desc", Types.Code.toString());
        parent.appendChild(literalEl);

        final Element propEl = doc.createElement("key");
        literalEl.appendChild(propEl);
        propEl.setAttribute("name", "code");

        final Element literalCodeEl = doc.createElement("literal");
        literalCodeEl.setAttribute("value", value.toString());
        literalCodeEl.setAttribute("type", type.toString());
        propEl.appendChild(literalCodeEl);
        if (codeParams != null) {
            verifyCodeArguments(codeParams);
            codeTemplateArgumentsToXML(doc, literalEl, codeParams);
        }
    }

    @Override
    public String toSource(int indentation) {

        String string = value.toString();
        if (type == Types.String) {
            string = '"' + string + '"';
        }
        return indent(indentation) + string;
    }
}
/*
 * JavaCC - OriginalChecksum=de0fd5e10db38b45e5e755afa080eb7f (do not edit this
 * line)
 */
