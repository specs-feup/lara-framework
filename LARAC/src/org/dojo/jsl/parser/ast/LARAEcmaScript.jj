/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. LARAEcmaScript.jj */
/*@egen*//*
 * Copyright 2013 SPeCS.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License. under the License.
 */
 

options {
 
	/*
	 * Default value is true. If true, all methods and class variables 
	 * are specified as static in the generated parser and token manager. This allows only 
	 * one parser object to be present, but it improves the performance of the parser.
	 */
	STATIC = false;

	/*
	 * Options for obtaining debugging information
	 */
	DEBUG_PARSER = false;

	DEBUG_TOKEN_MANAGER = false;

	/*
	 * Default value is false. When set to true, the generated parser 
	 * uses an input stream object that processes Java Unicode escapes before 
	 * sending characters to the token manager. 
	 */
	JAVA_UNICODE_ESCAPE = true;

	/*
	 * Default value is false. When set to true, the generated parser 
	 * uses uses an input stream object that reads Unicode files. By default, ASCII files 
	 * are assumed. 
	 */
	UNICODE_INPUT = true;

	  
	                                                             
	                                                                      
	   
	           

	  
	                                                                
	                                                       
	   
	                       

	  
	                                                  
	   
	                                         

	  
	                                                 
	   
	                                
 
	  
	                                                              
	                                                                               
	                                 
	   
	              

	  
	                                                               
	                                                                             
	   
	                      
	                     //sets first and last token of the node
	/*
	 * JDK Version
	 */
	JDK_VERSION = "1.5";

	/*
	 * Ignore case for keywords
	 */
	//IGNORE_CASE = true;
}

PARSER_BEGIN(LARAEcmaScript)

package org.dojo.jsl.parser.ast;

import java.io.*;
import java.util.*;
import java.io.File;
import java.io.FileReader;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import larac.utils.output.ErrorMsg;
import larac.objects.Enums.Types;
import larac.exceptions.ParseExceptionData;
import larac.exceptions.StopParseException;

public class LARAEcmaScript extends LARAParserBase/*@bgen(jjtree)*/implements LARAEcmaScriptTreeConstants/*@egen*/{/*@bgen(jjtree)*/
  protected JJTLARAEcmaScriptState jjtree = new JJTLARAEcmaScriptState();

/*@egen*/
  	private static final int MAX_EXCEPTION_TOKEN_SIZE = 6;
    private static final int MAXIMUM_SYNTAX_EXCEPTIONS = 5;
  	
  	public File inputAspectFile = null;
  	public FileReader inputAspectFr = null;
  	public BufferedReader inputAspectBr = null;
    public List<Throwable> exceptions = new ArrayList<Throwable>() ;
    private int exprBraceCount = 0;

	public ASTExpressionStatement parseExpression(String expression) throws ParseException{
		 return ParseExpression();
	}
	
	public ASTStart parse() throws ParseException{
	      this.exceptions = new ArrayList<Throwable>(); 
	
	      return this.Start();
	}

  	/* Old Code */
	@Deprecated
	public static ASTStart parseFile(String fileName){
    	return parseFile(new File(fileName));
		}
  	@Deprecated
	public static ASTStart parseFile(File laraFile){
	    ASTStart start = null;
	    File inputAspectFile = laraFile;
		FileReader inputAspectFr = null;
		BufferedReader inputAspectBr = null;
	    try{
		  inputAspectFr = new FileReader(inputAspectFile);
		  inputAspectBr = new BufferedReader(inputAspectFr);
	      LARAEcmaScript aspectParser = new LARAEcmaScript(inputAspectBr);
	      start = aspectParser.Start();
	    }
	    catch (Exception e)
	    {
	      try {
		    if(inputAspectFr != null)
			inputAspectFr.close();
		    if(inputAspectBr != null)
			inputAspectBr.close();
		} catch (IOException e1) {
				throw new RuntimeException(e1);
		}
	    }

	     try {
		    if(inputAspectFr != null)
			inputAspectFr.close();
		    if(inputAspectBr != null)
			inputAspectBr.close();
		    
		} catch (IOException e1) {
		    throw new RuntimeException(e1);
		}
	   return start;
  }
	
}
PARSER_END(LARAEcmaScript)

TOKEN_MGR_DECLS : { 
	public int htmlTokenNestingLevel = 0;
	public boolean expectActionScript = false;
}


/*****************************************
 * LEXICAL & REGEXP GRAMMARS STARTS HERE *
 *****************************************/


/* Section 7 : Lexical Conventions */

/* Section 7.2 : White Space */

<DEFAULT, IN_REGEX>
SKIP: //SPECIAL_TOKEN :
{
	<WHITE_SPACE: <TAB> | <VT> | <FF> | <SP> | <NBSP> >
| 
	< #TAB: "	" | "\t" > /* TAB */
|
	< #VT: "\u000b" > /* Vertical Tab */
| 
	< #FF: "" | "\f"> /* Form Feed */
| 
	< #SP: " " | " " > /* Space */
| 
	< #NBSP: "\u00a0" > /* No-break space */
| 
	< #USP: /* Other Unicode space seperator */
		["\u2000"] 
		| ["\u2001"] 
		| ["\u2002"] 
		| ["\u2003"] 
		| ["\u2004"] 
		| ["\u2005"] 
		| ["\u2006"] 
		| ["\u2007"]
		| ["\u2008"] 
		| ["\u2009"] 
		| ["\u200a"] 
		| ["\u200b"]
		| ["\u3000"]
	>
}

/* Section 7.3 : Line Terminators */

<DEFAULT, IN_REGEX>
SKIP: //SPECIAL_TOKEN :
{
	<LINE_TERMINATOR: <LF> | <CR> | <LS> | <PS> >
| 
	< #LF: "\n" > /* Line Feed */
| 
	< #CR: "\r" > /* Carriage Return */
| 
	< #LS: "\u2028" > /* Line separator */
| 
	< #PS: "\u2029" > /* Paragraph separator */
}


/* Comments */

<DEFAULT, IN_REGEX>
MORE :
{
	"//" : IN_SINGLE_LINE_COMMENT
|
	"/*" : IN_MULTI_LINE_COMMENT
//|
//	"/**" : IN_MULTI_LINE_DOC
}

<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<SINGLE_LINE_COMMENT: (~["\n","\r"])* ("\n"|"\r"|"\r\n")? > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
	<MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

//<IN_MULTI_LINE_DOC>
//SPECIAL_TOKEN :
//{
//	<MULTI_LINE_DOC: "**/" > : DEFAULT
//}

<IN_SINGLE_LINE_COMMENT,IN_MULTI_LINE_COMMENT, IN_PATTERN>
MORE :
{
	< ~[] >
}



/* Section 7.5.1: Reserved Words */

<DEFAULT, IN_REGEX>
TOKEN :
{
 /************************** LARA TOKENS *************************************/
  <INCLUDE: "include">: DEFAULT
| 
	<ASPECTDEF: "aspectdef">: DEFAULT
| 
	<CODEDEF: "codedef">: DEFAULT
| 
	<INPUT: "input">: DEFAULT
| 
	<OUTPUT: "output">: DEFAULT
| 
	< STATICDECL: "static" > : DEFAULT 
| 
	<SELECT: "select" >: DEFAULT 
| 
	<APPLY: "apply">: DEFAULT 
|
	<TO: "to">: DEFAULT
| 
	<CALL: "call" >: DEFAULT
| 
	<RUN: "run" >: DEFAULT 
|
	<CMD: "cmd" >: DEFAULT 
| 
	<CONDITION: "condition" >: DEFAULT 
| 
	<BEGIN: "begin">: DEFAULT 
| 
	<INSERT: "insert">: DEFAULT
| 
	<EXEC: "exec">: DEFAULT
| 
	<OUTPUT_ACT: "out">: DEFAULT
| 
	<BEFORE: "before">: DEFAULT 
| 
	<AFTER: "after">: DEFAULT
|
	<AROUND: "around">: DEFAULT
|
	<REPLACE: "replace">: DEFAULT
| 
	<DEFINE: "def">: DEFAULT 
|
	<CHECK: "check" >: DEFAULT
| 
	<INITIALIZE: "initialize" >: DEFAULT
| 
	<FINALIZE: "finalize" >: DEFAULT
| 
	<END: "end"> : DEFAULT 
|
 /*******Tokens required for the dynamic apply ******/
	<DYNAMIC: "dynamic">: DEFAULT 
|
	<SEQUENCIAL: "seq">: DEFAULT 
|
	<PARALLEL: "par">: DEFAULT 
|
 /************************** LARA TOKENS *************************************/
	< BREAK: "break" > : DEFAULT
| 
	< CONTINUE: "continue" > : DEFAULT
| 
	< DELETE: "delete" > : DEFAULT
| 
	< ELSE: "else" > : DEFAULT
| 
	< FOR: "for" > : DEFAULT
| 
	< FUNCTION: "function" > : DEFAULT
| 
	< FUNCTION_GEN: "function*" > : DEFAULT	
| 
	< IF: "if" > : DEFAULT
| 
	< IN: "in" > : DEFAULT
| 
	< OF: "of" > : DEFAULT
| 
	< EACH: "each" > : DEFAULT
| 
	< NEW: "new" > : DEFAULT
| 
	< RETURN: "return" > : DEFAULT
| 
	< YIELD: "yield" > : DEFAULT	
| 
	< THIS: "this" > : IN_REGEX
| 
	< TYPEOF: "typeof" > : DEFAULT
| 
	< VAR: "var" > : DEFAULT
| 
	< VOID: "void" > : DEFAULT
| 
	< WHILE: "while" > : DEFAULT
| 
	< WITH: "with" > : DEFAULT
| 
	< CASE: "case" > : DEFAULT
| 
	< CATCH: "catch" > : DEFAULT
| 
	< CLASS: "class" > : DEFAULT
| 
	< CONST: "const" > : DEFAULT
| 
	< DEBUGGER: "debugger" > : DEFAULT
| 
	< _DEFAULT: "default" > : DEFAULT
| 
	< DO: "do" > : DEFAULT
| 
	< ENUM: "enum" > : DEFAULT
| 
	< EXTENDS: "extends" > : DEFAULT
| 
	< FINALLY: "finally" > : DEFAULT
| 
	< IMPORT: "import" > : DEFAULT
| 
	< SUPER: "super" > : DEFAULT
| 
	< SWITCH: "switch" > : DEFAULT
| 
	< THROW: "throw" > : DEFAULT
| 
	< TRY: "try" > : DEFAULT
| 
	< ARROW: "=>" > : DEFAULT	
//|
//	< UTF8_BOM: "\u00ef\u00bb\u00bf" > : DEFAULT
}



/* JScript .NET Tokens

TOKEN :
{
	< BYTE: "byte" >
	| < SBYTE: "sbyte" >
	| < SHORT: "short" >
	| < USHORT: "ushort" >
	| < UINT: "uint" >
	| < LONG: "long" >
	| < ULONG: "ulong" >
	| < FLOAT: "float" >
	| < NUMBER: "Number" >
	| < DOUBLE: "double" >
	| < DECIMAL: "decimal" >
	| < BOOLEAN: "boolean" >
	| < STRING: "String" >
	| < CHAR: "char" >
}

*/


/* Section 7.7: Punctuators */

<DEFAULT, IN_REGEX>
TOKEN :
{
	< LBRACE: "{" > : DEFAULT
|
	< RBRACE: "}" > : IN_REGEX
|
	< LPAREN: "(" > : DEFAULT
|
	< RPAREN: ")" > : IN_REGEX
|
	< LBRACKET: "[" > : DEFAULT
|
	< RBRACKET: "]" > : IN_REGEX
|
	< DOT: "." > : DEFAULT
|
	< SEMICOLON: ";" > : DEFAULT
|
	< COMMA: "," > : DEFAULT
|
	< LT: "<" > : DEFAULT
|
	< GT: ">" > : DEFAULT
|
	< LE: "<=" > : DEFAULT
|
	< GE: ">=" > : DEFAULT
|
	< EQ: "==" > : DEFAULT
|
	< NE: "!=" > : DEFAULT
|
	<MATCH:"~=" >: DEFAULT  /* LARA operator */
|
	< SEQ: "===" > : DEFAULT /* Strict Equals Operator */
|
	< SNEQ: "!==" >	 : DEFAULT /* Strict Does-not-equal Operator */
|
	< PLUS: "+" > : DEFAULT
|
	< MINUS: "-" > : DEFAULT
|
	< STAR: "*" > : DEFAULT
|
	< REM: "%" > : DEFAULT
|
	< INCR: "++" > : IN_REGEX
|
	< DECR: "--" > : IN_REGEX
|
	< LSHIFT: "<<" > : DEFAULT
|
	< RSHIFT: ">>" > : DEFAULT
|
	< RUNSHIFT: ">>>" > : DEFAULT /* Unsigned Right Shift Operator */
|
	< BIT_AND: "&" > : DEFAULT
|
	< BIT_OR: "|" > : DEFAULT
|
	< XOR: "^" > : DEFAULT
|
	< BANG: "!" > : DEFAULT
|
	< TILDE: "~" > : IN_REGEX
|
	< SC_AND: "&&" > : DEFAULT
|
	< SC_OR: "||" > : DEFAULT
|
	< HOOK: "?" > : DEFAULT
|
	< NATURAL_JOIN: "::" > : DEFAULT /* LARA Operator*/
|
	< COLON: ":" > : DEFAULT
| 
	< ASSIGN: "=" > : DEFAULT
|
	< PLUSASSIGN: "+=" > : DEFAULT
|
	< MINUSASSIGN: "-=" > : DEFAULT
|
	< STARASSIGN: "*=" > : DEFAULT
|
	< REMASSIGN: "%=" > : DEFAULT
|
	< LSHIFTASSIGN: "<<=" > : DEFAULT
|
	< RSIGNEDSHIFTASSIGN: ">>=" > : DEFAULT
|
	< RUNSIGNEDSHIFTASSIGN: ">>>=" > : DEFAULT
|
	< ANDASSIGN: "&=" > : DEFAULT
|
	< ORASSIGN: "|=" > : DEFAULT
|
	< XORASSIGN: "^=" > : DEFAULT
|
	< INTANCE_OF: "instanceof" > : DEFAULT
}


/* Section 7.8.3: Numeric Literals */

<DEFAULT, IN_REGEX>
TOKEN:
{ 
	< DECIMAL_LITERAL :
		<DECIMAL_INTEGER_LITERAL> "." (<DECIMAL_DIGITS>)? (<EXPONENT_PART>)?
	| 
		"." <DECIMAL_DIGITS> (<EXPONENT_PART>)?
	| 
		<DECIMAL_INTEGER_LITERAL> (<EXPONENT_PART>)? 
	>  : IN_REGEX
|  
	< #NON_ZERO_DIGIT: ["1"-"9"] >
|
	< #EXPONENT_PART: ("e" | "E") (["+","-"])? <DECIMAL_DIGITS> >
}

<DEFAULT, IN_REGEX>
TOKEN:
{
	< DECIMAL_INTEGER_LITERAL: 
		"0" | <NON_ZERO_DIGIT> (<DECIMAL_DIGITS>)?
	> : IN_REGEX
}

<DEFAULT, IN_REGEX>
TOKEN:
{
	< HEX_INTEGER_LITERAL: "0" ["x","X"] (<HEX_DIGIT>)+ > : IN_REGEX
}

<DEFAULT, IN_REGEX>
TOKEN:
{  < DECIMAL_DIGITS: (<DECIMAL_DIGIT>)+ > : IN_REGEX }

TOKEN:
{
	< DECIMAL_DIGIT: ["0"-"9"] >
}

/* Section 7.8.1: NULL Literals */

<DEFAULT, IN_REGEX>
TOKEN:
{ 
	< NULL_LITERAL: "null" > : IN_REGEX
}

/* Section 7.8.2: Boolean Literals */

<DEFAULT, IN_REGEX>
TOKEN:
{ 
	< BOOLEAN_LITERAL: "true" | "false" > : IN_REGEX
}



/* Section 7.8.4: String Literals */

<DEFAULT, IN_REGEX>
TOKEN:
{
	< STRING_LITERAL:
		"\"" (<DOUBLE_STRING_CHARACTERS>)? "\""  | "'" (<SINGLE_STRING_CHARACTERS>)? "'"
	>	 : IN_REGEX
|
	< #DOUBLE_STRING_CHARACTERS: (<DOUBLE_STRING_CHARACTER>)* >
|
	< #SINGLE_STRING_CHARACTERS: (<SINGLE_STRING_CHARACTER>)* >
|
	< #DOUBLE_STRING_CHARACTER:
		(~["\"","\\","\n","\r","\u2028","\u2029"])* 
		| "\\" <ESCAPE_SEQUENCE>
	>
|
	< #SINGLE_STRING_CHARACTER:
		(~["'","\\","\n","\r","\u2028","\u2029"]) 
		| "\\" <ESCAPE_SEQUENCE>
	> 
|
	< #ESCAPE_SEQUENCE:
		<CHARACTER_ESCAPE_SEQUENCE>
		| 
			"0" 
		| 
			<HEX_ESCAPE_SEQUENCE>
		| 
			<UNICODE_ESCAPE_SEQUENCE>
	>
|
	< #CHARACTER_ESCAPE_SEQUENCE:
		<SINGLE_ESCAPE_CHARACTER> | <NON_ESCAPE_CHARACTER>
	>
|
	< #SINGLE_ESCAPE_CHARACTER: ["'" , "\"" , "\\" , "b" , "f" , "n" , "r" , "t" , "v"] >
|
	< #NON_ESCAPE_CHARACTER: 
		~["\n","\r","\u2028","\u2029"]
	| 
		~["'" , "\"" , "\\" , "b" , "f" , "n" , "r" , "t" , "v", "x", "u"]
	| 
		~["0"-"9"]
	>
}

TOKEN:
{
	< HEX_ESCAPE_SEQUENCE: "x" <HEX_DIGIT> <HEX_DIGIT> >
}

< DEFAULT, IN_REGEX >
TOKEN:
{
	<CODE_LITERAL: "%{" (~["}"])* "}" ("}" | ~["}","%"] (~["}"])* "}")* "%">: DEFAULT
	
}

/*
TOKEN:
{
  < ESCAPE_CHARACTER:
	  ["'" , "\"" , "\\" , "b" , "f" , "n" , "r" , "t" , "v"]
	| ["0"-"9"]
	| "x"
	| "u"
  >
}
*/

/* Section 7.6: Identifiers */

<DEFAULT, IN_REGEX>
TOKEN:
{
	< LABEL_IDENTIFIER:
				"#"  (<IDENTIFIER_PART>)*
	> : IN_REGEX
| 
	< IDENTIFIER_NAME:
				( <DOLLAR_SIGN> (<DOLLAR_SIGN> | "*" | "#" | "^") )
			| 
				(( <DOLLAR_SIGN> | < AT_SIGN >)? <IDENTIFIER_START> (<IDENTIFIER_PART>)*)
	> : IN_REGEX
|
	< #IDENTIFIER_START:
		<UNICODE_LETTER>
	| 
		<UNDER_SCORE>
	| 
		<UNICODE_ESCAPE_SEQUENCE>
	>
|
	< #IDENTIFIER_PART: 
		<IDENTIFIER_START>
	| 
		<UNICODE_COMBINING_MARK>
	| 
		<UNICODE_DIGIT>
	| 
		<UNICODE_CONNECTOR_PUNCTUATION>
	| 
		<UNICODE_ESCAPE_SEQUENCE>
	|
		<DOLLAR_SIGN>
	>
|
	< #DOLLAR_SIGN: "$" >
|
	< #AT_SIGN: "@" >
|  
	< #UNDER_SCORE: "_" >
|
	< #UNICODE_LETTER: 
		["A"-"Z"]
		| ["a"-"z"]
		| ["A"-"Z"] 
		| ["a"-"z"] 
		| ["\u00aa"] 
		| ["\u00b5"]
		| ["\u00ba"] 
		| ["\u00c0"-"\u00d6"] 
		| ["\u00d8"-"\u00f6"] 
		| ["\u00f8"-"\u021f"]
		| ["\u0222"-"\u0233"] 
		| ["\u0250"-"\u02ad"] 
		| ["\u02b0"-"\u02b8"] 
		| ["\u02bb"-"\u02c1"]
		| ["\u02d0"-"\u02d1"] 
		| ["\u02e0"-"\u02e4"] 
		| ["\u02ee"] 
		| ["\u037a"]
		| ["\u0386"] 
		| ["\u0388"-"\u038a"]
		| ["\u038c"]
		| ["\u038e"-"\u03a1"]
		| ["\u03a3"-"\u03ce"] 
		| ["\u03d0"-"\u03d7"] 
		| ["\u03da"-"\u03f3"]
		| ["\u0400"-"\u0481"]
		| ["\u048c"-"\u04c4"]
		| ["\u04c7"-"\u04c8"]
		| ["\u04cb"-"\u04cc"] 
		| ["\u04d0"-"\u04f5"]
		| ["\u04f8"-"\u04f9"]
		| ["\u0531"-"\u0556"]
		| ["\u0559"]
		| ["\u0561"-"\u0587"]
		| ["\u05d0"-"\u05ea"]
		| ["\u05f0"-"\u05f2"] 
		| ["\u0621"-"\u063a"] 
		| ["\u0640"-"\u064a"]
		| ["\u0671"-"\u06d3"]
		| ["\u06d5"] 
		| ["\u06e5"-"\u06e6"] 
		| ["\u06fa"-"\u06fc"]
		| ["\u0710"] 
		| ["\u0712"-"\u072c"] 
		| ["\u0780"-"\u07a5"] 
		| ["\u0905"-"\u0939"]
		| ["\u093d"] 
		| ["\u0950"] 
		| ["\u0958"-"\u0961"] 
		| ["\u0985"-"\u098c"]
		| ["\u098f"-"\u0990"] 
		| ["\u0993"-"\u09a8"] 
		| ["\u09aa"-"\u09b0"] 
		| ["\u09b2"]
		| ["\u09b6"-"\u09b9"] 
		| ["\u09dc"-"\u09dd"] 
		| ["\u09df"-"\u09e1"] 
		| ["\u09f0"-"\u09f1"]
		| ["\u0a05"-"\u0a0a"] 
		| ["\u0a0f"-"\u0a10"] 
		| ["\u0a13"-"\u0a28"] 
		| ["\u0a2a"-"\u0a30"]
		| ["\u0a32"-"\u0a33"] 
		| ["\u0a35"-"\u0a36"] 
		| ["\u0a38"-"\u0a39"] 
		| ["\u0a59"-"\u0a5c"]
		| ["\u0a5e"] 
		| ["\u0a72"-"\u0a74"] 
		| ["\u0a85"-"\u0a8b"] 
		| ["\u0a8d"]
		| ["\u0a8f"-"\u0a91"] 
		| ["\u0a93"-"\u0aa8"] 
		| ["\u0aaa"-"\u0ab0"] 
		| ["\u0ab2"-"\u0ab3"]
		| ["\u0ab5"-"\u0ab9"] 
		| ["\u0abd"] 
		| ["\u0ad0"] 
		| ["\u0ae0"]
		| ["\u0b05"-"\u0b0c"] 
		| ["\u0b0f"-"\u0b10"] 
		| ["\u0b13"-"\u0b28"] 
		| ["\u0b2a"-"\u0b30"]
		| ["\u0b32"-"\u0b33"] 
		| ["\u0b36"-"\u0b39"] 
		| ["\u0b3d"] 
		| ["\u0b5c"-"\u0b5d"]
		| ["\u0b5f"-"\u0b61"] 
		| ["\u0b85"-"\u0b8a"]
		| ["\u0b8e"-"\u0b90"] 
		| ["\u0b92"-"\u0b95"]
		| ["\u0b99"-"\u0b9a"] 
		| ["\u0b9c"] 
		| ["\u0b9e"-"\u0b9f"] 
		| ["\u0ba3"-"\u0ba4"]
		| ["\u0ba8"-"\u0baa"] 
		| ["\u0bae"-"\u0bb5"] 
		| ["\u0bb7"-"\u0bb9"] 
		| ["\u0c05"-"\u0c0c"]
		| ["\u0c0e"-"\u0c10"] 
		| ["\u0c12"-"\u0c28"]
		| ["\u0c2a"-"\u0c33"]
		| ["\u0c35"-"\u0c39"]
		| ["\u0c60"-"\u0c61"]
		| ["\u0c85"-"\u0c8c"]
		| ["\u0c8e"-"\u0c90"]
		| ["\u0c92"-"\u0ca8"]
		| ["\u0caa"-"\u0cb3"]
		| ["\u0cb5"-"\u0cb9"]
		| ["\u0cde"]
		| ["\u0ce0"-"\u0ce1"]
		| ["\u0d05"-"\u0d0c"]
		| ["\u0d0e"-"\u0d10"]
		| ["\u0d12"-"\u0d28"]
		| ["\u0d2a"-"\u0d39"]
		| ["\u0d60"-"\u0d61"]
		| ["\u0d85"-"\u0d96"]
		| ["\u0d9a"-"\u0db1"]
		| ["\u0db3"-"\u0dbb"]
		| ["\u0dbd"]
		| ["\u0dc0"-"\u0dc6"]
		| ["\u0e01"-"\u0e30"]
		| ["\u0e32"-"\u0e33"]
		| ["\u0e40"-"\u0e46"]
		| ["\u0e81"-"\u0e82"]
		| ["\u0e84"]
		| ["\u0e87"-"\u0e88"]
		| ["\u0e8a"]
		| ["\u0e8d"]
		| ["\u0e94"-"\u0e97"]
		| ["\u0e99"-"\u0e9f"]
		| ["\u0ea1"-"\u0ea3"]
		| ["\u0ea5"]
		| ["\u0ea7"]
		| ["\u0eaa"-"\u0eab"]
		| ["\u0ead"-"\u0eb0"]
		| ["\u0eb2"-"\u0eb3"]
		| ["\u0ebd"-"\u0ec4"]
		| ["\u0ec6"]
		| ["\u0edc"-"\u0edd"]
		| ["\u0f00"]
		| ["\u0f40"-"\u0f6a"]
		| ["\u0f88"-"\u0f8b"]
		| ["\u1000"-"\u1021"]
		| ["\u1023"-"\u1027"]
		| ["\u1029"-"\u102a"]
		| ["\u1050"-"\u1055"]
		| ["\u10a0"-"\u10c5"]
		| ["\u10d0"-"\u10f6"]
		| ["\u1100"-"\u1159"]
		| ["\u115f"-"\u11a2"]
		| ["\u11a8"-"\u11f9"]
		| ["\u1200"-"\u1206"]
		| ["\u1208"-"\u1246"]
		| ["\u1248"]
		| ["\u124a"-"\u124d"]
		| ["\u1250"-"\u1256"]
		| ["\u1258"]
		| ["\u125a"-"\u125d"]
		| ["\u1260"-"\u1286"]
		| ["\u1288"]
		| ["\u128a"-"\u128d"]
		| ["\u1290"-"\u12ae"]
		| ["\u12b0"]
		| ["\u12b2"-"\u12b5"]
		| ["\u12b8"-"\u12be"]
		| ["\u12c0"]
		| ["\u12c2"-"\u12c5"]
		| ["\u12c8"-"\u12ce"]
		| ["\u12d0"-"\u12d6"]
		| ["\u12d8"-"\u12ee"]
		| ["\u12f0"-"\u130e"]
		| ["\u1310"]
		| ["\u1312"-"\u1315"]
		| ["\u1318"-"\u131e"]
		| ["\u1320"-"\u1346"]
		| ["\u1348"-"\u135a"]
		| ["\u13a0"-"\u13b0"]
		| ["\u13b1"-"\u13f4"]
		| ["\u1401"-"\u1676"]
		| ["\u1681"-"\u169a"]
		| ["\u16a0"-"\u16ea"]
		| ["\u1780"-"\u17b3"]
		| ["\u1820"-"\u1877"]
		| ["\u1880"-"\u18a8"]
		| ["\u1e00"-"\u1e9b"]
		| ["\u1ea0"-"\u1ee0"]
		| ["\u1ee1"-"\u1ef9"]
		| ["\u1f00"-"\u1f15"]
		| ["\u1f18"-"\u1f1d"]
		| ["\u1f20"-"\u1f39"]
		| ["\u1f3a"-"\u1f45"]
		| ["\u1f48"-"\u1f4d"]
		| ["\u1f50"-"\u1f57"]
		| ["\u1f59"]
		| ["\u1f5b"]
		| ["\u1f5d"]
		| ["\u1f5f"-"\u1f7d"]
		| ["\u1f80"-"\u1fb4"]
		| ["\u1fb6"-"\u1fbc"]
		| ["\u1fbe"]
		| ["\u1fc2"-"\u1fc4"]
		| ["\u1fc6"-"\u1fcc"]
		| ["\u1fd0"-"\u1fd3"]
		| ["\u1fd6"-"\u1fdb"]
		| ["\u1fe0"-"\u1fec"]
		| ["\u1ff2"-"\u1ff4"]
		| ["\u1ff6"-"\u1ffc"]
		| ["\u207f"]
		| ["\u2102"]
		| ["\u2107"]
		| ["\u210a"-"\u2113"]
		| ["\u2115"]
		| ["\u2119"-"\u211d"]
		| ["\u2124"]
		| ["\u2126"]
		| ["\u2128"]
		| ["\u212a"-"\u212d"]
		| ["\u212f"-"\u2131"]
		| ["\u2133"-"\u2139"]
		| ["\u2160"-"\u2183"]
		| ["\u3005"-"\u3007"]
		| ["\u3021"-"\u3029"]
		| ["\u3031"-"\u3035"]
		| ["\u3038"-"\u303a"]
		| ["\u3041"-"\u3094"]
		| ["\u309d"-"\u309e"]
		| ["\u30a1"-"\u30fa"]
		| ["\u30fc"-"\u30fe"]
		| ["\u3105"-"\u312c"]
		| ["\u3131"-"\u318e"]
		| ["\u31a0"-"\u31b7"]
		| ["\u3400"]
		| ["\u4db5"]
		| ["\u4e00"]
		| ["\u9fa5"]
		| ["\ua000"-"\ua48c"]
		| ["\uac00"]
		| ["\ud7a3"]
		| ["\uf900"-"\ufa2d"]
		| ["\ufb00"-"\ufb06"]
		| ["\ufb13"-"\ufb17"]
		| ["\ufb1d"]
		| ["\ufb1f"-"\ufb28"]
		| ["\ufb2a"-"\ufb36"]
		| ["\ufb38"-"\ufb3c"]
		| ["\ufb3e"]
		| ["\ufb40"-"\ufb41"]
		| ["\ufb43"-"\ufb44"]
		| ["\ufb46"-"\ufbb1"]
		| ["\ufbd3"-"\ufd3d"]
		| ["\ufd50"-"\ufd8f"]
		| ["\ufd92"-"\ufdc7"]
		| ["\ufdf0"-"\ufdfb"]
		| ["\ufe70"-"\ufe72"]
		| ["\ufe74"]
		| ["\ufe76"-"\ufefc"]
		| ["\uff21"-"\uff3a"]
		| ["\uff41"-"\uff5a"]
		| ["\uff66"-"\uffbe"]
		| ["\uffc2"-"\uffc7"]
		| ["\uffca"-"\uffcf"]
		| ["\uffd2"-"\uffd7"]
		| ["\uffda"-"\uffdc"]
	>
} 

/*
 * Unicode categories Non-spacing mark (MN) OR Combining spacing mark (MC)
 */
MORE:
{
	< UNICODE_COMBINING_MARK: <MN> | <MC> >
}


TOKEN:
{
	< MC: 
		["\u0903"]
		| ["\u093e"]
		| ["\u093f"]
		| ["\u0940"]
		| ["\u0949"]
		| ["\u094a"]
		| ["\u094b"]
		| ["\u094c"]
		| ["\u0982"]
		| ["\u0983"]
		| ["\u09be"]
		| ["\u09bf"]
		| ["\u09c0"]
		| ["\u09c7"]
		| ["\u09c8"]
		| ["\u09cb"]
		| ["\u09cc"]
		| ["\u09d7"]
		| ["\u0a03"]
		| ["\u0a3e"]
		| ["\u0a3f"]
		| ["\u0a40"]
		| ["\u0a83"]
		| ["\u0abe"]
		| ["\u0abf"]
		| ["\u0ac0"]
		| ["\u0ac9"]
		| ["\u0acb"]
		| ["\u0acc"]
		| ["\u0b02"]
		| ["\u0b03"]
		| ["\u0b3e"]
		| ["\u0b40"]
		| ["\u0b47"]
		| ["\u0b48"]
		| ["\u0b4b"]
		| ["\u0b4c"]
		| ["\u0b57"]
		| ["\u0bbe"]
		| ["\u0bbf"]
		| ["\u0bc1"]
		| ["\u0bc2"]
		| ["\u0bc6"]
		| ["\u0bc7"]
		| ["\u0bc8"]
		| ["\u0bca"]
		| ["\u0bcb"]
		| ["\u0bcc"]
		| ["\u0bd7"]
		| ["\u0c01"]
		| ["\u0c02"]
		| ["\u0c03"]
		| ["\u0c41"]
		| ["\u0c42"]
		| ["\u0c43"]
		| ["\u0c44"]
		| ["\u0c82"]
		| ["\u0c83"]
		| ["\u0cbe"]
		| ["\u0cc0"]
		| ["\u0cc1"]
		| ["\u0cc2"]
		| ["\u0cc3"]
		| ["\u0cc4"]
		| ["\u0cc7"]
		| ["\u0cc8"]
		| ["\u0cca"]
		| ["\u0ccb"]
		| ["\u0cd5"]
		| ["\u0cd6"]
		| ["\u0d02"]
		| ["\u0d03"]
		| ["\u0d3e"]
		| ["\u0d3f"]
		| ["\u0d40"]
		| ["\u0d46"]
		| ["\u0d47"]
		| ["\u0d48"]
		| ["\u0d4a"]
		| ["\u0d4b"]
		| ["\u0d4c"]
		| ["\u0d57"]
		| ["\u0d82"]
		| ["\u0d83"]
		| ["\u0dcf"]
		| ["\u0dd0"]
		| ["\u0dd1"]
		| ["\u0dd8"]
		| ["\u0dd9"]
		| ["\u0dda"]
		| ["\u0ddb"]
		| ["\u0ddc"]
		| ["\u0ddd"]
		| ["\u0dde"]
		| ["\u0ddf"]
		| ["\u0df2"]
		| ["\u0df3"]
		| ["\u0f3e"]
		| ["\u0f3f"]
		| ["\u0f7f"]
		| ["\u102c"]
		| ["\u1031"]
		| ["\u1038"]
		| ["\u1056"]
		| ["\u1057"]
		| ["\u17b6"]
		| ["\u17be"]
		| ["\u17bf"]
		| ["\u17c0"]
		| ["\u17c1"]
		| ["\u17c2"]
		| ["\u17c3"]
		| ["\u17c4"]
		| ["\u17c5"]
		| ["\u17c7"]
		| ["\u17c8"]
		| ["\u1923"]
		| ["\u1924"]
		| ["\u1925"]
		| ["\u1926"]
		| ["\u1929"]
		| ["\u192a"]
		| ["\u192b"]
		| ["\u1930"]
		| ["\u1931"]
		| ["\u1933"]
		| ["\u1934"]
		| ["\u1935"]
		| ["\u1936"]
		| ["\u1937"]
		| ["\u1938"]
		| ["\u19b0"]
		| ["\u19b1"]
		| ["\u19b2"]
		| ["\u19b3"]
		| ["\u19b4"]
		| ["\u19b5"]
		| ["\u19b6"]
		| ["\u19b7"]
		| ["\u19b8"]
		| ["\u19b9"]
		| ["\u19ba"]
		| ["\u19bb"]
		| ["\u19bc"]
		| ["\u19bd"]
		| ["\u19be"]
		| ["\u19bf"]
		| ["\u19c0"]
		| ["\u19c8"]
		| ["\u19c9"]
		| ["\u1a19"]
		| ["\u1a1a"]
		| ["\u1a1b"]
		| ["\ua802"]
		| ["\ua823"]
		| ["\ua824"]
		| ["\ua827"]
		| ["\u1d16"]
		| ["\u1d16"]
		| ["\u1d16"]
		| ["\u1d16"]
		| ["\u1d16"]
		| ["\u1d17"]
		| ["\u1d17"]
		| ["\u1d17"] 
	>
|
	< MN: 
		["\u0300"-"\u034e"] 
		| ["\u0360"-"\u0362"] 
		| ["\u0483"-"\u0486"] 
		| ["\u0591"-"\u05a1"]
		| ["\u05a3"-"\u05b9"] 
		| ["\u05bb"-"\u05bd"] 
		| ["\u05bf"]
		| ["\u05c1"-"\u05c2"]
		| ["\u05c4"]
		| ["\u064b"-"\u0655"] 
		| ["\u0670"]
		| ["\u06d6"-"\u06dc"]
		| ["\u06df"-"\u06e4"] 
		| ["\u06e7"-"\u06e8"] 
		| ["\u06ea"-"\u06ed"] 
		| ["\u0711"]
		| ["\u0730"-"\u074a"] 
		| ["\u07a6"-"\u07b0"] 
		| ["\u0901"-"\u0903"] 
		| ["\u093c"]
		| ["\u093e"-"\u094d"] 
		| ["\u0951"-"\u0954"] 
		| ["\u0962"-"\u0963"] 
		| ["\u0981"-"\u0983"]
		| ["\u09bc"-"\u09c4"] 
		| ["\u09c7"-"\u09c8"] 
		| ["\u09cb"-"\u09cd"] 
		| ["\u09d7"]
		| ["\u09e2"-"\u09e3"] 
		| ["\u0a02"]
		| ["\u0a3c"]
		| ["\u0a3e"-"\u0a42"]
		| ["\u0a47"-"\u0a48"] 
		| ["\u0a4b"-"\u0a4d"] 
		| ["\u0a70"-"\u0a71"] 
		| ["\u0a81"-"\u0a83"]
		| ["\u0abc"]
		| ["\u0abe"-"\u0ac5"] 
		| ["\u0ac7"-"\u0ac9"] 
		| ["\u0acb"-"\u0acd"]
		| ["\u0b01"-"\u0b03"] 
		| ["\u0b3c"]
		| ["\u0b3e"-"\u0b43"] 
		| ["\u0b47"-"\u0b48"]
		| ["\u0b4b"-"\u0b4d"] 
		| ["\u0b56"-"\u0b57"] 
		| ["\u0b82"-"\u0b83"] 
		| ["\u0bbe"-"\u0bc2"]
		| ["\u0bc6"-"\u0bc8"] 
		| ["\u0bca"-"\u0bcd"] 
		| ["\u0bd7"]
		| ["\u0c01"-"\u0c03"]
		| ["\u0c3e"-"\u0c44"] 
		| ["\u0c46"-"\u0c48"] 
		| ["\u0c4a"-"\u0c4d"] 
		| ["\u0c55"-"\u0c56"]
		| ["\u0c82"-"\u0c83"] 
		| ["\u0cbe"-"\u0cc4"] 
		| ["\u0cc6"-"\u0cc8"] 
		| ["\u0cca"-"\u0ccd"]
		| ["\u0cd5"-"\u0cd6"] 
		| ["\u0d02"-"\u0d03"] 
		| ["\u0d3e"-"\u0d43"] 
		| ["\u0d46"-"\u0d48"]
		| ["\u0d4a"-"\u0d4d"] 
		| ["\u0d57"]
		| ["\u0d82"-"\u0d83"] 
		| ["\u0dca"]
		| ["\u0dcf"-"\u0dd4"] 
		| ["\u0dd6"]
		| ["\u0dd8"-"\u0ddf"] 
		| ["\u0df2"-"\u0df3"]
		| ["\u0e31"]
		| ["\u0e34"-"\u0e3a"] 
		| ["\u0e47"-"\u0e4e"] 
		| ["\u0eb1"]
		| ["\u0eb4"-"\u0eb9"] 
		| ["\u0ebb"-"\u0ebc"] 
		| ["\u0ec8"-"\u0ecd"] 
		| ["\u0f18"-"\u0f19"]
		| ["\u0f35"]
		| ["\u0f37"]
		| ["\u0f39"]
		| ["\u0f3e"-"\u0f3f"]
		| ["\u0f71"-"\u0f84"] 
		| ["\u0f86"-"\u0f87"] 
		| ["\u0f90"-"\u0f97"] 
		| ["\u0f99"-"\u0fbc"]
		| ["\u0fc6"]
		| ["\u102c"-"\u1032"] 
		| ["\u1036"-"\u1039"] 
		| ["\u1056"-"\u1059"]
		| ["\u17b4"-"\u17d3"] 
		| ["\u18a9"]
		| ["\u20d0"-"\u20dc"] 
		| ["\u20e1"]
		| ["\u302a"-"\u302f"] 
		| ["\u3099"-"\u309a"] 
		| ["\ufb1e"]
		| ["\ufe20"-"\ufe23"]
	>
}

TOKEN:
{
	< UNICODE_DIGIT: 
		["0"-"9"] 
		| ["\u0660"-"\u0669"] 
		| ["\u06f0"-"\u06f9"] 
		| ["\u0966"-"\u096f"]
		| ["\u09e6"-"\u09ef"] 
		| ["\u0a66"-"\u0a6f"] 
		| ["\u0ae6"-"\u0aef"] 
		| ["\u0b66"-"\u0b6f"]
		| ["\u0be7"-"\u0bef"] 
		| ["\u0c66"-"\u0c6f"] 
		| ["\u0ce6"-"\u0cef"] 
		| ["\u0d66"-"\u0d6f"]
		| ["\u0e50"-"\u0e59"] 
		| ["\u0ed0"-"\u0ed9"] 
		| ["\u0f20"-"\u0f29"] 
		| ["\u1040"-"\u1049"]
		| ["\u1369"-"\u1371"] 
		| ["\u17e0"-"\u17e9"] 
		| ["\u1810"-"\u1819"] 
		| ["\uff10"-"\uff19"] 
  >
}

TOKEN:
{
	< UNICODE_CONNECTOR_PUNCTUATION: 
		["_"] 
	| 
		["\u203f"-"\u2040"]
	| 
		["\u30fb"] 
	| 
		["\ufe33"-"\ufe34"]
	| 
		["\ufe4d"-"\ufe4f"]
	| 
		["\uff3f"]
	| 
		["\uff65"]
	>
}

TOKEN:
{
	< UNICODE_ESCAPE_SEQUENCE: "u" <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> <HEX_DIGIT> >
}

TOKEN:
{
	< HEX_DIGIT: ["0"-"9"] | ["a"-"f"] | ["A"-"F"] >
}



<IN_REGEX>
TOKEN :
{
	< SLASHASSIGN: "/=" > : DEFAULT
|
	< SLASH: "/" > : DEFAULT
}

 /* ************************* LARA TOKENS *************************************
<DEFAULT, IN_REGEX>
TOKEN : /* JP IDENTIFIERS *
{
  < JPVAR: "$" (<IDENTIFIER_NAME> | <IN_JPVAR>)>  :DEFAULT |
  < #IN_JPVAR: <CALL > | <BEGIN > | < END > | <FUNCTION > | <VAR> | <RETURN> | <IF> | <ELSE> >
}
 /* ************************* LARA TOKENS ************************************* /

/* Section 7.8.5: Regular Expression Literals */

<DEFAULT>
TOKEN :
{
	< REGULAR_EXPRESSION_LITERAL:
		"/" ( (~["\n","\r","\\","/","*"]) | <BACKSLASH_SEQUENCE> ) 
		( (~["\n","\r","\\","/"]) | <BACKSLASH_SEQUENCE> )* "/" (<IDENTIFIER_PART>)*
	> : IN_REGEX
|
	< #BACKSLASH_SEQUENCE:
		"\\" (~["\n","\r"])
	>
}


/** Function that returns the join point identifier, which can be any identifier
	or one of the following reserved words
	 **/
	Token getNoReservedIdentifier() :
	{Token t;}
	{
	  (
	    t= <IDENTIFIER_NAME> |
	    t=<CALL > | t=<BEGIN > | t=< END > |
	    t=<FUNCTION > | t=<FUNCTION_GEN > | t=<VAR> | t=<RETURN> | t=<YIELD> |
	    t=<IF> | t=<ELSE> | t=<TO> | t=<IN> | t=< SWITCH > | t=< CASE > |
	    t=<INPUT> | t=<OUTPUT> | t=<CONDITION>  | t=<_DEFAULT> |  t=<CLASS> | t=< INTANCE_OF > |
	    t=<BEFORE> |  t=<AFTER> | t=<AROUND> |
	  	t=<FOR> | t=<WHILE> |t=<DO> | t=<INCLUDE> |t=< REPLACE > |t=< CHECK > |t=< APPLY > 
	  )
	  {return t;}
	}



	void noReservedIdentifier()            :
	{/*@bgen(jjtree) Identifier */
         ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
	{/*@bgen(jjtree) Identifier */
          try {
/*@egen*/
	  (
	    t= <IDENTIFIER_NAME> |
	    t=<CALL > | t=<BEGIN > | t=< END > |
	    t=<FUNCTION > | t=<FUNCTION_GEN > | t=<VAR> | t=<RETURN> | t=<YIELD> |
	    t=<IF> | t=<ELSE> | t=<TO> | t=<IN> | t=< SWITCH > | t=< CASE > |
	    t=<INPUT> | t=<OUTPUT> | t=<CONDITION> | t=<_DEFAULT> | t=< CLASS > | t=< INTANCE_OF > |
	    t=<BEFORE> |  t=<AFTER> | t=<AROUND> |
	  	t=<FOR> | t=<WHILE> |t=<DO> | t=<INCLUDE> |
	  	t=<DELETE > |t=< REPLACE > | t=< CHECK > | t=< APPLY > 
	  )/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  { jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
	   //jjtThis.setCoord(t,t);
	   }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}

/*****************************************
 * ECMA SYNTACTIC GRAMMARS  STARTS HERE  *
 *****************************************/

/*******************************************************************************
 ************************    LARA SYNTACTIC GRAMMAR    ************************* 
 *******************************************************************************/

	/**
     * A LARA file can contain zero or more includes and imports, followed by definitions of aspectdefs,
     * codedefs, functions and global variables
     **/
	ASTStart Start()       :
	{/*@bgen(jjtree) Start */
  ASTStart jjtn000 = new ASTStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/} 
	{/*@bgen(jjtree) Start */
                try {
/*@egen*/
//	    [<UTF8_BOM>]
	  	(Import())* 
	    (AspectDef()
	  		| CodeDef()
	  		| Declaration()
	     )*
		<EOF>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ return jjtn000; }/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void Declaration()      : { }
	{

		  LOOKAHEAD((<FUNCTION_GEN > )  Identifier()) GeneratorFunctionDeclaration()
	 	| LOOKAHEAD((<FUNCTION > )  Identifier()) FunctionDeclaration() 	 
	  	| VariableStatement()
	  	// TODO: Enable this, disable the one below, implement declareGlobal
		//| Expression() (<SEMICOLON > )?

		|/*@bgen(jjtree) AssignmentExpression */
                {
                  ASTAssignmentExpression jjtn001 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ 
		(
		  
		LeftHandSideExpression() AssignmentOperator() AssignmentExpression() [<SEMICOLON >]
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                     

	}
	
	/**
     * The path to a file that is not in the same path of the invoked LARA file. With one import it is
     * possible to import one or every file within a package
     **/
	void Import()        :
	{/*@bgen(jjtree) Import */
         ASTImport jjtn000 = new ASTImport(JJTIMPORT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t; Token begin; Token end;}
	{/*@bgen(jjtree) Import */
          try {
/*@egen*/
	  begin=<IMPORT> t=FilePath() end=EndStatement()/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {jjtn000.jjtSetValue(t.image);}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	 // { jjtThis.setCoord(begin,end);}
	}
	/** FilePath
	* gets the path to a file or all the files in the package 
	**/
	Token FilePath():
	{Token t;}
	{
	  (LOOKAHEAD(2)Identifier()<DOT>)* (t=<IDENTIFIER_NAME> |t=<STAR >)
		{return t;}
	}

	/** FilePathNoSTar
	* gets the path to a file in a package
	**/
	void FilePathNoSTar()          :
	{/*@bgen(jjtree) FilePath */
  ASTFilePath jjtn000 = new ASTFilePath(JJTFILEPATH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) FilePath */
          try {
/*@egen*/
	  (LOOKAHEAD(2)Identifier()<DOT>)+/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}	
	
	 /**
     * Code Definition A parcel of native code or LARA-Code to be used by the insert/output action. To define the target
     * language, one has to define the type of the codedef, such as: codedef<C>, this means that the code to be inserted
     * is written in C language. A code definition needs an identifier and its body is code that can contain a tag such
     * as "<a>" to insert information on the code such as: join point property or a variable value. To use those tags,
     * the codedef must have input arguments to refer those to specific values.
     **/
	void CodeDef()         :
	{/*@bgen(jjtree) CodeDef */
         ASTCodeDef jjtn000 = new ASTCodeDef(JJTCODEDEF);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token name, code, language, begin, end;}
	{/*@bgen(jjtree) CodeDef */
          try {
/*@egen*/
	  {jjtn000.setLanguage("native");} 
	  begin=<CODEDEF >[ <LT> language=<IDENTIFIER_NAME> <GT> {jjtn000.setLanguage(language.image);}]
	  			name=<IDENTIFIER_NAME> {jjtn000.setName(name.image);}/*@bgen(jjtree) #FormalParameterList(> 0) */
                        {
                          ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                          boolean jjtc001 = true;
                          jjtree.openNodeScope(jjtn001);
                          jjtn001.jjtSetFirstToken(getToken(1));
                        }
                        try {
/*@egen*/
	  		( [<LPAREN> [FormalParameterList()] <RPAREN>] )/*@bgen(jjtree)*/
                        } catch (Throwable jjte001) {
                          if (jjtc001) {
                            jjtree.clearNodeScope(jjtn001);
                            jjtc001 = false;
                          } else {
                            jjtree.popNode();
                          }
                          if (jjte001 instanceof RuntimeException) {
                            throw (RuntimeException)jjte001;
                          }
                          if (jjte001 instanceof ParseException) {
                            throw (ParseException)jjte001;
                          }
                          throw (Error)jjte001;
                        } finally {
                          if (jjtc001) {
                            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 0);
                            jjtn001.jjtSetLastToken(getToken(0));
                          }
                        }
/*@egen*/                        
		code =<CODE_LITERAL>
	  	 {
	    	String simpleCode = code.image.substring(2,code.image.length()-2);
	  		jjtn000.setCode(simpleCode);
	 	 }
	  end=<END >/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/

	 // { jjtThis.setCoord(begin,end);}
	}
	
	/**
     * Input arguments The arguments to be defined when a "aspect-call" action is stated. They can be normal variables
     * or variables referent to a specific join point. The normal variables can have a default value
     **/
	void Input()       : {/*@bgen(jjtree) Input */
                               ASTInput jjtn000 = new ASTInput(JJTINPUT);
                               boolean jjtc000 = true;
                               jjtree.openNodeScope(jjtn000);
                               jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token begin, end;}
	{/*@bgen(jjtree) Input */
                try {
/*@egen*/
		begin=<INPUT>
			VariableDeclarationList() (<SEMICOLON>)?
		end=<END>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		//{ jjtThis.setCoord(begin,end);}
	}

	/**
     * Output arguments List of normal variables or variables referent to a specific join point. The normal variables
     * can have a default value
     **/
	void Output()        : {/*@bgen(jjtree) Output */
                                 ASTOutput jjtn000 = new ASTOutput(JJTOUTPUT);
                                 boolean jjtc000 = true;
                                 jjtree.openNodeScope(jjtn000);
                                 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/ Token begin, end;}
	{/*@bgen(jjtree) Output */
                try {
/*@egen*/
	  	begin=<OUTPUT>
	  		VariableDeclarationList() (<SEMICOLON>)?
		end=<END>/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}

	 /**
     * Static List of static variables and functions, which can be accessed statically in the aspect. The variables
     * values are shared between all aspect instances
     **/
	void Static()        : {/*@bgen(jjtree) Static */
  ASTStatic jjtn000 = new ASTStatic(JJTSTATIC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Static */
          try {
/*@egen*/
	  <STATICDECL>
	  	(VariableStatement()| GeneratorFunctionDeclaration() | FunctionDeclaration())*
	  <END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}

	/** Initialize
	 * Similar to a constructor. A block of JavaScript code to initialize variables, inter alia
	 **/
	void Initialize()            : {/*@bgen(jjtree) Initialize */
  ASTInitialize jjtn000 = new ASTInitialize(JJTINITIALIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Initialize */
          try {
/*@egen*/
	  <INITIALIZE>
	  	JavaScript()
	  <END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
	/** Finalize
	 * Similar to a destructor. A block of JavaScript code to finalize output variables, inter alia
	 **/
	void Finalize()          : {/*@bgen(jjtree) Finalize */
  ASTFinalize jjtn000 = new ASTFinalize(JJTFINALIZE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Finalize */
          try {
/*@egen*/
	  <FINALIZE>
	  	JavaScript()
	  <END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
	
	/** Check
	 * Set of conditions to verify input arguments and other important stats that specify if the aspect can be executed
	 **/
	void Check()       : {/*@bgen(jjtree) Check */
  ASTCheck jjtn000 = new ASTCheck(JJTCHECK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Check */
          try {
/*@egen*/
	  <CHECK>
	  	LogicalORExpression() [EndStatement() (LogicalORExpression() EndStatement())*]
	  <END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
	
	/** Aspect Definition
	 * The aspect definition can contain outputs and inputs variables, a check to verify those variables, an initializer and a finalizer to deal with information to be handler before and after the aspect, respectively.
	 * The body of the aspect consists of selects, applies and conditions to apply the aspect in the target program, and afters, befores, function and variable declaration to assist the apply and condition section.
	 */
	void AspectDef()           :
	{/*@bgen(jjtree) AspectDef */
         ASTAspectDef jjtn000 = new ASTAspectDef(JJTASPECTDEF);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token aspName, begin, end;}
	{/*@bgen(jjtree) AspectDef */
          try {
/*@egen*/
	  begin=<ASPECTDEF> 
		  aspName=<IDENTIFIER_NAME >
		  (
		      Input()
		    |
		      Output()
		    |
		      Static()
		  )*
		  
		  [ Initialize() ]
		  [ Check() ]
		  (
		    (
		      LOOKAHEAD([Identifier() <COLON>] <SELECT> ) Select()
			|
			  LOOKAHEAD([Identifier() <COLON>] <APPLY> | <APPLY>) Apply()
			|
			  LOOKAHEAD([Identifier() <COLON>] (< BEFORE>|<AFTER>) | (< BEFORE>|<AFTER>) ) AroundApply()
			| 
			  LOOKAHEAD([Identifier() <COLON>] < CONDITION>) Condition()
			| 
			  SourceElement()
		    )
		  )*
		  [ Finalize() ]
	  end=<END >/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {jjtn000.setName(aspName.image);}/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	 // { jjtThis.setCoord(begin,end);}
	}

	/** Select
	 * Pointcut expression to specify which join points are intended to influence.
	 * It can contain an unique label, so it can be advised, and a pointcut expression
	 */
	void Select()        :
	{/*@bgen(jjtree) Select */
         ASTSelect jjtn000 = new ASTSelect(JJTSELECT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token name, begin, end;}
	{/*@bgen(jjtree) Select */
          try {
/*@egen*/
	  [name=<IDENTIFIER_NAME> {jjtn000.setName(name.image); }<COLON>] begin=<SELECT> (
	      LOOKAHEAD((getNoReservedIdentifier()(<LBRACE>|<DOT>|<END>))
	      		|   ([<LPAREN>]getNoReservedIdentifier() <ASSIGN >)) Pointcut() |
	    
	      LOOKAHEAD(2) FourthSetOp()) end=< END >/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	  //{ jjtThis.setCoord(begin,end);}
	}
	
	void FourthSetOp()          :
	{/*@bgen(jjtree) #Join(> 1) */
         ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token joinType;}
	{/*@bgen(jjtree) #Join(> 1) */
                try {
/*@egen*/
		ThirdSetOp() [LOOKAHEAD(2)joinType=<PLUS>FourthSetOp()
		{jjtn000.jjtSetValue(joinType.image);}]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void ThirdSetOp()          :
	{/*@bgen(jjtree) #Join(> 1) */
         ASTJoin jjtn000 = new ASTJoin(JJTJOIN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token joinType;}
	{/*@bgen(jjtree) #Join(> 1) */
                try {
/*@egen*/
		FirstSetOp() [(joinType=<NATURAL_JOIN>|joinType=<BIT_AND>) ThirdSetOp()
		{jjtn000.jjtSetValue(joinType.image);}]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void FirstSetOp():{}
	{
		Identifier() | (<LPAREN> FourthSetOp()<RPAREN>)
	}	
	
	/** Pointcut
	 * It can contain an identifier for the join point, a join point identifier and a possible property expression. 
	 * Each join point can have a child, the join point down to its hierarchy
	 */	
	void Pointcut()         :
	{/*@bgen(jjtree) Pointcut */
         ASTPointcut jjtn000 = new ASTPointcut(JJTPOINTCUT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token joinPoint,reference;String referenceStr;}
	{/*@bgen(jjtree) Pointcut */
          try {
/*@egen*/
	  (
		<LPAREN> //e.g.: ($l1=loop){...}
				
	  	  reference = < IDENTIFIER_NAME> <ASSIGN>
	  	  joinPoint = getNoReservedIdentifier()
      	  {referenceStr = reference.image;}
	  	<RPAREN>
	  |
		LOOKAHEAD(< IDENTIFIER_NAME > <ASSIGN >) //e.g.: $l1=loop{...}
		  reference = < IDENTIFIER_NAME> <ASSIGN>
	  	  joinPoint = getNoReservedIdentifier()
      	  {referenceStr = reference.image;}
	  | 
	      joinPoint = getNoReservedIdentifier() ////e.g.: loop{...}
	      {referenceStr = "$"+joinPoint.image;}
	      
	  )
	  {
	    jjtn000.jjtSetValue(joinPoint.image);
	  	jjtn000.setReference(referenceStr);
	  }
	
	  [PointcutFilters()]
	  [<DOT> Pointcut()]/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
	
	/** Pointcut  properties
	 * The properties of a pointcut can be declared in three different ways:
		- it can be any property (*)
		- a set of properties that will be mapped to the default attribute
		- a property expression
	 */
	void PointcutFilters():
	{}
	{
	   <LBRACE> 
	   (<STAR>|/*@bgen(jjtree) PointcutFilters */
                 {
                   ASTPointcutFilters jjtn002 = new ASTPointcutFilters(JJTPOINTCUTFILTERS);
                   boolean jjtc002 = true;
                   jjtree.openNodeScope(jjtn002);
                   jjtn002.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/
	   	 (LOOKAHEAD(<IDENTIFIER_NAME > (EqualityOperator()|RelationalOperator()) | <LPAREN> )
			(
			  	OrFiltersExpr()/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn002, true);
                                  jjtc002 = false;
                                  jjtn002.jjtSetLastToken(getToken(0));
                                }
/*@egen*/
				{jjtn002.setFullSpecified(true);}
	        )
		   |
	   	    (/*@bgen(jjtree) #OrFiltersExpr(> 1) */
                                 {
                                   ASTOrFiltersExpr jjtn001 = new ASTOrFiltersExpr(JJTORFILTERSEXPR);
                                   boolean jjtc001 = true;
                                   jjtree.openNodeScope(jjtn001);
                                   jjtn001.jjtSetFirstToken(getToken(1));
                                 }
                                 try {
/*@egen*/
	
	   		  	 ( ConditionalExpression()
	   		  	 		(<COMMA> ConditionalExpression())*
	   		  	  )/*@bgen(jjtree)*/
                                 } catch (Throwable jjte001) {
                                   if (jjtc001) {
                                     jjtree.clearNodeScope(jjtn001);
                                     jjtc001 = false;
                                   } else {
                                     jjtree.popNode();
                                   }
                                   if (jjte001 instanceof RuntimeException) {
                                     throw (RuntimeException)jjte001;
                                   }
                                   if (jjte001 instanceof ParseException) {
                                     throw (ParseException)jjte001;
                                   }
                                   throw (Error)jjte001;
                                 } finally {
                                   if (jjtc001) {
                                     jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                     jjtn001.jjtSetLastToken(getToken(0));
                                   }
                                 }
/*@egen*/                   /*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn002, true);
                                    jjtc002 = false;
                                    jjtn002.jjtSetLastToken(getToken(0));
                                  }
/*@egen*/
	   		  	  {jjtn002.setFullSpecified(false);}
	   		 )
	   	  )/*@bgen(jjtree)*/
                 } catch (Throwable jjte002) {
                   if (jjtc002) {
                     jjtree.clearNodeScope(jjtn002);
                     jjtc002 = false;
                   } else {
                     jjtree.popNode();
                   }
                   if (jjte002 instanceof RuntimeException) {
                     throw (RuntimeException)jjte002;
                   }
                   if (jjte002 instanceof ParseException) {
                     throw (ParseException)jjte002;
                   }
                   throw (Error)jjte002;
                 } finally {
                   if (jjtc002) {
                     jjtree.closeNodeScope(jjtn002, true);
                     jjtn002.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/
	                    
	   )
	   <RBRACE>     
	}
	
	/** "OR" Property Expr
	 * In the pointcut properties declaration, the comma is used as an OR operator (similar to ||)
	 **/
	void OrFiltersExpr() :{}
	{/*@bgen(jjtree) #OrFiltersExpr(> 1) */
          {
            ASTOrFiltersExpr jjtn001 = new ASTOrFiltersExpr(JJTORFILTERSEXPR);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/
	  (ANDFiltersExpr() (<COMMA > ANDFiltersExpr() )*)/*@bgen(jjtree)*/
          } catch (Throwable jjte001) {
            if (jjtc001) {
              jjtree.clearNodeScope(jjtn001);
              jjtc001 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
              throw (RuntimeException)jjte001;
            }
            if (jjte001 instanceof ParseException) {
              throw (ParseException)jjte001;
            }
            throw (Error)jjte001;
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/                   
	}
	
	/** "AND" Property Expression
	 * To combine properties such as an AND operation, the properties are declared inside brackets, converting the comma (which is the OR operator) into an AND.
	 */
	void ANDFiltersExpr():{}
	{
	   Filter() | <LPAREN>/*@bgen(jjtree) #ANDFiltersExpr(> 1) */
                               {
                                 ASTANDFiltersExpr jjtn001 = new ASTANDFiltersExpr(JJTANDFILTERSEXPR);
                                 boolean jjtc001 = true;
                                 jjtree.openNodeScope(jjtn001);
                                 jjtn001.jjtSetFirstToken(getToken(1));
                               }
                               try {
/*@egen*/ (Filter() (<COMMA > Filter() )*)/*@bgen(jjtree)*/
                               } catch (Throwable jjte001) {
                                 if (jjtc001) {
                                   jjtree.clearNodeScope(jjtn001);
                                   jjtc001 = false;
                                 } else {
                                   jjtree.popNode();
                                 }
                                 if (jjte001 instanceof RuntimeException) {
                                   throw (RuntimeException)jjte001;
                                 }
                                 if (jjte001 instanceof ParseException) {
                                   throw (ParseException)jjte001;
                                 }
                                 throw (Error)jjte001;
                               } finally {
                                 if (jjtc001) {
                                   jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
                               }
/*@egen*/                     <RPAREN>
	}
	
	/** Property
	 * The property is defined by comparing a join point attribute to a value
	 **/
	void Filter()        :
	{/*@bgen(jjtree) Filter */
         ASTFilter jjtn000 = new ASTFilter(JJTFILTER);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token prop,op;}
	{/*@bgen(jjtree) Filter */
           try {
/*@egen*/
	   prop=<IDENTIFIER_NAME>  (EqualityOperator()|RelationalOperator()) ConditionalExpression()/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
           }
/*@egen*/
	   {jjtn000.setProp(prop.image);
	   }/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/
	}

	
	/** Around
	 * A Statement to occur around an apply
	 * It contains a list of applies that this statement refers to. The body of this statement is JavaScript, and can be used to prepare information for the applies.
	 **/
	void AroundApply()             :
	{/*@bgen(jjtree) AroundApply */
         ASTAroundApply jjtn000 = new ASTAroundApply(JJTAROUNDAPPLY);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token name,when, end;
	 String label = "";}
	{/*@bgen(jjtree) AroundApply */
          try {
/*@egen*/
	  [name=<IDENTIFIER_NAME> <COLON>{label = name.image;}]  ( when=<BEFORE> | when=<AFTER> )
	   		[/*@bgen(jjtree) Applies */
                         {
                           ASTApplies jjtn001 = new ASTApplies(JJTAPPLIES);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/(Identifier() ((LOOKAHEAD(2)<COMMA> Identifier())*))/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, true);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/         ]  <DO>
	  			JavaScript()
	  			
	  		{jjtn000.setName(label);
	  		jjtn000.setWhen(when.image);} 
	  end=<END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	//{ jjtThis.setCoord(when,end);}
	  
	}	
	
	/** Apply
	 * Old Version of apply, only static weaving
	 * Advice each join point of the related select(s).
	 * It can contain an unique label and a list of selects to be advised by the apply. If no select is inserted, the last select with no label will be used.
	 * The body contains JavaScript, in which the actions can be declared
	 **
	void Apply() #Apply:
	{Token name, apply, end;}
	{
	  [name=<IDENTIFIER_NAME>{jjtThis.setName(name.image);} <COLON>] apply=<APPLY> [To()]
	  		JavaScript()
	  end=<END>
	  { jjtThis.setCoord(apply,end);}
	}
	/**/

	/** Apply (Static/Dynamic)
	 * The new version of the Apply statement: static or dynamic weaving
	 * Advice each join point of the related select(s).
	 * It can contain an unique label and a list of selects to be advised by the apply. If no select is inserted, the last select with no label will be used.
	 * The body contains JavaScript, in which the actions can be declared
	 **/
	void Apply()       :
	{/*@bgen(jjtree) Apply */
         ASTApply jjtn000 = new ASTApply(JJTAPPLY);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token name, apply, end;}
	{/*@bgen(jjtree) Apply */
          try {
/*@egen*/
	  [name=<IDENTIFIER_NAME>{jjtn000.setName(name.image);} <COLON>]
	  apply=<APPLY>
        
         [
         	< DYNAMIC > {jjtn000.setDynamic(true);}
	  		[
	  		    < PARALLEL >  {jjtn000.setConcurrent(true);}
	  		  |
	  		    < SEQUENCIAL > {jjtn000.setConcurrent(false);}
	  		]
	  		[ 
	  		    < BEFORE >  {jjtn000.setTrigger("before");}
	  		  |
	  		    < AFTER > {jjtn000.setTrigger("after");}
//	  		  |
//				//This needs to be fixed as it conflicts with the action "replace"	  		   	 
//	  		  	< REPLACE > {jjtThis.setTrigger("around");}
	  	    ]
         ]
	  
	  
	   [To()]
  	  JavaScript()
      end=<END>/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
      //{ jjtThis.setCoord(apply,end);}
	  
	  
	}
	
	/** To
	 * list of selects that will be influenced by the apply
	 **/
	void To()    :
	{/*@bgen(jjtree) To */
  ASTTo jjtn000 = new ASTTo(JJTTO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) To */
          try {
/*@egen*/
	  <TO> FourthSetOp()
	  			(LOOKAHEAD(<COMMA> FourthSetOp()) <COMMA> FourthSetOp())*/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/ 
	}

	
	void SimpleAction()        :
	{/*@bgen(jjtree) Action */
         ASTAction jjtn000 = new ASTAction(JJTACTION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
	{/*@bgen(jjtree) Action */
            try {
/*@egen*/
	    (
		    Insert()
		  |
		    Define()
		  |
		    Perform()
		  |
		    OutputAct() /**/
		)
		 EndStatement()/*@bgen(jjtree)*/
            } catch (Throwable jjte000) {
              if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
              } else {
                jjtree.popNode();
              }
              if (jjte000 instanceof RuntimeException) {
                throw (RuntimeException)jjte000;
              }
              if (jjte000 instanceof ParseException) {
                throw (ParseException)jjte000;
              }
              throw (Error)jjte000;
            } finally {
              if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
                jjtn000.jjtSetLastToken(getToken(0));
              }
            }
/*@egen*/ 

	}

	/** Action
	 * Actions that can be used to influence the join points.
	 * A join point variable can be used to specify the targeted join point where the action takes place 
	 **/
	void Action()      :
	{
	  Token t;
	}
	{/*@bgen(jjtree) Action */
          {
            ASTAction jjtn003 = new ASTAction(JJTACTION);
            boolean jjtc003 = true;
            jjtree.openNodeScope(jjtn003);
            jjtn003.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/
//
//	  LOOKAHEAD(LeftHandSideExpression() AssignmentOperator() ) (
//	    LeftHandSideExpression() AssignmentOperator()
//	    ActionOnAssign() 
//	   
//	  )#AssignmentExpression
//	| 
	  (/*@bgen(jjtree) #CompositeReference(> 1) */
                {
                  ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc002 = true;
                  jjtree.openNodeScope(jjtn002);
                  jjtn002.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/	    
		(
		  	  (/*@bgen(jjtree) Identifier */
                            {
                              ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/
		  	    (  
					  t=<IDENTIFIER_NAME>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtc001 = false;
                                            jjtn001.jjtSetLastToken(getToken(0));
                                          }
/*@egen*/
					  {
					    jjtn001.setName(t.image);jjtn001.jjtSetValue(t.image);
					    //jjtThis.setCoord(t,t);
					  }
				)/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/           
			  )

			  (LOOKAHEAD(MemberExpressionPart())MemberExpressionPart())*
			  < DOT >
			
         )/*@bgen(jjtree)*/
                } catch (Throwable jjte002) {
                  if (jjtc002) {
                    jjtree.clearNodeScope(jjtn002);
                    jjtc002 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte002 instanceof RuntimeException) {
                    throw (RuntimeException)jjte002;
                  }
                  if (jjte002 instanceof ParseException) {
                    throw (ParseException)jjte002;
                  }
                  throw (Error)jjte002;
                } finally {
                  if (jjtc002) {
                    jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                    jjtn002.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                       
		(
		  Insert() |
		  Define() |
		  Perform() |
		  OutputAct()
		)
	   )/*@bgen(jjtree)*/
          } catch (Throwable jjte003) {
            if (jjtc003) {
              jjtree.clearNodeScope(jjtn003);
              jjtc003 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte003 instanceof RuntimeException) {
              throw (RuntimeException)jjte003;
            }
            if (jjte003 instanceof ParseException) {
              throw (ParseException)jjte003;
            }
            throw (Error)jjte003;
          } finally {
            if (jjtc003) {
              jjtree.closeNodeScope(jjtn003, true);
              jjtn003.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/       
		  EndStatement() 
	}


void ActionOnAssign()        :
	{/*@bgen(jjtree) Action */
          ASTAction jjtn000 = new ASTAction(JJTACTION);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	  Token t;
	}
	{/*@bgen(jjtree) Action */
                try {
/*@egen*/

		(/*@bgen(jjtree) #CompositeReference(> 1) */
                  {
                    ASTCompositeReference jjtn002 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                    boolean jjtc002 = true;
                    jjtree.openNodeScope(jjtn002);
                    jjtn002.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/		  (
		  	  (/*@bgen(jjtree) Identifier */
                            {
                              ASTIdentifier jjtn001 = new ASTIdentifier(JJTIDENTIFIER);
                              boolean jjtc001 = true;
                              jjtree.openNodeScope(jjtn001);
                              jjtn001.jjtSetFirstToken(getToken(1));
                            }
                            try {
/*@egen*/
		  	    (  
					  t=<IDENTIFIER_NAME>/*@bgen(jjtree)*/
                                          {
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtc001 = false;
                                            jjtn001.jjtSetLastToken(getToken(0));
                                          }
/*@egen*/
					  {
					    jjtn001.setName(t.image);jjtn001.jjtSetValue(t.image);
					    //jjtThis.setCoord(t,t);
					  }
				)/*@bgen(jjtree)*/
                            } finally {
                              if (jjtc001) {
                                jjtree.closeNodeScope(jjtn001, true);
                                jjtn001.jjtSetLastToken(getToken(0));
                              }
                            }
/*@egen*/           
			  )

			  (LOOKAHEAD(MemberExpressionPart())MemberExpressionPart())*
			  < DOT >
			
         )/*@bgen(jjtree)*/
                  } catch (Throwable jjte002) {
                    if (jjtc002) {
                      jjtree.clearNodeScope(jjtn002);
                      jjtc002 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte002 instanceof RuntimeException) {
                      throw (RuntimeException)jjte002;
                    }
                    if (jjte002 instanceof ParseException) {
                      throw (ParseException)jjte002;
                    }
                    throw (Error)jjte002;
                  } finally {
                    if (jjtc002) {
                      jjtree.closeNodeScope(jjtn002, jjtree.nodeArity() > 1);
                      jjtn002.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/                       )?

		 
		 ExecOnAssign()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}
	
	/** Call
	 * Action to invoke an aspect.
	 * The aspect is called with the input arguments that requires and the call instance can have a reference variable to be used to recover information from the invoked aspect.
	 **/
	void Call()      :
	{/*@bgen(jjtree) Call */
         ASTCall jjtn000 = new ASTCall(JJTCALL);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token aspVarName,aspName,ref, end;}
	{/*@bgen(jjtree) Call */
          try {
/*@egen*/
	  (	    
	   <CALL> [LOOKAHEAD(LeftHandSideExpression() <COLON>)
	   					LeftHandSideExpression() <COLON>]
   			 
	 |
	 	< VAR >  Identifier() < ASSIGN >  <CALL>
     |
        LeftHandSideExpression() < ASSIGN > <CALL >
	 )

	  [LOOKAHEAD(2)FilePathNoSTar()]
   			  	aspName=<IDENTIFIER_NAME>
					
	    	[Arguments()] end=EndStatement()/*@bgen(jjtree)*/
           {
             jjtree.closeNodeScope(jjtn000, true);
             jjtc000 = false;
             jjtn000.jjtSetLastToken(getToken(0));
           }
/*@egen*/
	 	
	   {
		 jjtn000.setAspName(aspName.image);
	    // jjtThis.setCoord(aspName,end);
	   }/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}

	

	/** Run
	 * Execution of an external tool.
	 **/
	void Run()     :
	{/*@bgen(jjtree) Run */
         ASTRun jjtn000 = new ASTRun(JJTRUN);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token run, toolName, end;}
	{/*@bgen(jjtree) Run */
           try {
/*@egen*/
	   run=<RUN> [LOOKAHEAD(LeftHandSideExpression() <COLON>)LeftHandSideExpression() <COLON>]
		  [toolName=getNoReservedIdentifier() {jjtn000.setToolName(toolName.image);}]
		  	Arguments()
				[<GT> AssignmentExpression()]
	   end=EndStatement()/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/ 
	   		
	    // {jjtThis.setCoord(run,end);}
	}

	/** Command
	 * Execution of a command.
	 **/
	void Cmd()     :
	{/*@bgen(jjtree) Cmd */
         ASTCmd jjtn000 = new ASTCmd(JJTCMD);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token cmd, toolName, end;}
	{/*@bgen(jjtree) Cmd */
        try {
/*@egen*/
	(
	  cmd=<CMD> | cmd=<RUN> <CMD> {jjtn000.setNewVersion(true);}   )
	   [LOOKAHEAD(LeftHandSideExpression() <COLON>)LeftHandSideExpression() <COLON>]
	   	  	Arguments()
				[<GT> AssignmentExpression()]
	   end=EndStatement()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/ 		
	     //{jjtThis.setCoord(cmd,end);}
	}

	/** OLD CALL **
	void Call() #Call:
	{Token aspVarName,aspName,ref, end;}
	{
	   <CALL> [LOOKAHEAD(<IDENTIFIER_NAME> <COLON>)
	   					aspVarName=<IDENTIFIER_NAME><COLON>
	   							{jjtThis.setAspVarName(aspVarName.image);}]
   			  [LOOKAHEAD(2)FilePathNoSTar()]aspName=<IDENTIFIER_NAME>
		{jjtThis.setAspName(aspName.image);}
	    	[LOOKAHEAD(Arguments())Arguments()] end=<SEMICOLON>
	  // { jjtThis.setCoord(aspName,end);}
	}
	/***/
	
	/** Insert
	 * The insertion of code is made by indicating a codedefinition's identifier with the required arguments or writing the desired code, with the possibility of using LARA-code to be defined into the target language, such as insert<C> before %{\u00ef\u00bf\u00bd}%.
	 * It is also needed to say if the code is inserted before, after or around the pointcut.
	 **/
	void Insert()        :
	{/*@bgen(jjtree) Insert */
         ASTInsert jjtn000 = new ASTInsert(JJTINSERT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token when,language, begin, end;}
	{/*@bgen(jjtree) Insert */
          try {
/*@egen*/
	  {
	   jjtn000.setLanguage("native");
	  }
	   (
	     (
	       begin=<INSERT>
			   (
			     (
			     [<LT> language=<IDENTIFIER_NAME> <GT>{jjtn000.setLanguage(language.image);}]
			   		(when=<BEFORE> | when=<AFTER> | when=<AROUND> | when=<REPLACE>)
			   			ConditionalExpression()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                          jjtn000.jjtSetLastToken(getToken(0));
                                        }
/*@egen*/
//			   			(
//			   			  	TemplateLiteral()
//			   			|
//			   				((Identifier() [LOOKAHEAD(Arguments())Arguments()]) #CompositeReference(>1))
//			   			)
			   		{jjtn000.setWhen(when.image);}
			   		//{jjtThis.setCoord(begin,when);}
			     )
			   |
			     (
			   		Arguments()
			   		//{jjtThis.setCoord(begin,begin);}
			     )
			   /*|
			     (
			   		TemplateLiteral()
			   		|
					((Identifier() [LOOKAHEAD(Arguments())Arguments()]) #CompositeReference(>1))
			   		{jjtThis.setWhen("inside");}
			   		//{jjtThis.setCoord(begin,begin);}
			     ) */
			   )
		 )
	   |
	     (
	       begin = <REPLACE> ConditionalExpression()/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
/*@egen*/
//	           (
//	             TemplateLiteral()
//			   |
//			   	 ((Identifier() [LOOKAHEAD(Arguments())Arguments()]) #CompositeReference(>1))
//			   )
	   		   {jjtn000.setWhen(begin.image);}
	   		   //{jjtThis.setCoord(begin,begin);}
	     )
	   )/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
 
	/** Perform
	 * Perform an action over the join point
	 **/
	void Perform()         :
	{/*@bgen(jjtree) Perform */
         ASTPerform jjtn000 = new ASTPerform(JJTPERFORM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token action, begin, end, t;}
	{/*@bgen(jjtree) Perform */
                try {
/*@egen*/
		begin=<EXEC>
		[LOOKAHEAD(< IDENTIFIER_NAME > < COLON > ) t=< IDENTIFIER_NAME > < COLON >{jjtn000.setVariable(t.image);} ]
		action=getNoReservedIdentifier()
 		{jjtn000.setAction(action.image);}
		//{jjtThis.setCoord(begin,action);}
	   	[/*@bgen(jjtree) FunctionCallParameters */
                                {
                                  ASTFunctionCallParameters jjtn001 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/
	   			(TemplateLiteral())/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/                        
			| 
	   			Arguments()
	   	]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/** Perform
	 * Perform an action over the join point
	 **/
	void ExecOnAssign()         :
	{/*@bgen(jjtree) Perform */
         ASTPerform jjtn000 = new ASTPerform(JJTPERFORM);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token action, begin, end, t;}
	{/*@bgen(jjtree) Perform */
                try {
/*@egen*/
		<EXEC>
		//[LOOKAHEAD(< IDENTIFIER_NAME > < COLON > ) t=< IDENTIFIER_NAME > < COLON >{jjtThis.setVariable(t.image);} ]
		action=getNoReservedIdentifier()
 		{jjtn000.setAction(action.image);}
		//{jjtThis.setCoord(begin,action);}
	   	(/*@bgen(jjtree) FunctionCallParameters */
                                {
                                  ASTFunctionCallParameters jjtn001 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
                                  boolean jjtc001 = true;
                                  jjtree.openNodeScope(jjtn001);
                                  jjtn001.jjtSetFirstToken(getToken(1));
                                }
                                try {
/*@egen*/	   	  
	   			(TemplateLiteral())/*@bgen(jjtree)*/
                                } catch (Throwable jjte001) {
                                  if (jjtc001) {
                                    jjtree.clearNodeScope(jjtn001);
                                    jjtc001 = false;
                                  } else {
                                    jjtree.popNode();
                                  }
                                  if (jjte001 instanceof RuntimeException) {
                                    throw (RuntimeException)jjte001;
                                  }
                                  if (jjte001 instanceof ParseException) {
                                    throw (ParseException)jjte001;
                                  }
                                  throw (Error)jjte001;
                                } finally {
                                  if (jjtc001) {
                                    jjtree.closeNodeScope(jjtn001, true);
                                    jjtn001.jjtSetLastToken(getToken(0));
                                  }
                                }
/*@egen*/                        
			| 
	   			Arguments()
	  	)/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}
	

// 	void CodeLiteralOnlyArgument()  #FunctionCallParameters: {}
//	{
//		TemplateLiteral()
//	}
	
	/** Output
	 * Similar to Insert, however it is used to output in runtime
	 **/
	 void OutputAct()           :
	 {/*@bgen(jjtree) OutputAct */
          ASTOutputAct jjtn000 = new ASTOutputAct(JJTOUTPUTACT);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) OutputAct */
           try {
/*@egen*/
	   begin=<OUTPUT_ACT>
	   	(
	   	  (
	   	    	TemplateLiteral()
	   	    |
	   	    	(/*@bgen(jjtree) #CompositeReference(> 1) */
                         {
                           ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/(Identifier() [LOOKAHEAD(Arguments())Arguments()])/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/                        )
	   	   )
	   |
	   		Arguments()
	     )/*@bgen(jjtree)*/
           } catch (Throwable jjte000) {
             if (jjtc000) {
               jjtree.clearNodeScope(jjtn000);
               jjtc000 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte000 instanceof RuntimeException) {
               throw (RuntimeException)jjte000;
             }
             if (jjte000 instanceof ParseException) {
               throw (ParseException)jjte000;
             }
             throw (Error)jjte000;
           } finally {
             if (jjtc000) {
               jjtree.closeNodeScope(jjtn000, true);
               jjtn000.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/
	   //{jjtThis.setCoord(begin,begin);}
	}
	
	/** Define
	 *  Assign a value to a join point attribute
	 **/
	void Define()        :
	{/*@bgen(jjtree) Define */
         ASTDefine jjtn000 = new ASTDefine(JJTDEFINE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) Define */
                try {
/*@egen*/
		begin=<DEFINE>

		(
		  	noReservedIdentifier() <ASSIGN> AssignmentExpression()
		|
			Arguments()
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		//{jjtThis.setCoord(begin,begin);}
	}

	/** Condition
	 *  Boolean expression that verifies if the apply can take place in a join point
	 **/
	void Condition()           :
	{/*@bgen(jjtree) Condition */
         ASTCondition jjtn000 = new ASTCondition(JJTCONDITION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t,begin, end;}
	{/*@bgen(jjtree) Condition */
         try {
/*@egen*/
	 [ t=<IDENTIFIER_NAME> <COLON> { jjtn000.jjtSetValue(t.image); } ]
	 		begin=<CONDITION> [<FOR>/*@bgen(jjtree) For */
                                                 {
                                                   ASTFor jjtn001 = new ASTFor(JJTFOR);
                                                   boolean jjtc001 = true;
                                                   jjtree.openNodeScope(jjtn001);
                                                   jjtn001.jjtSetFirstToken(getToken(1));
                                                 }
                                                 try {
/*@egen*/ (Identifier() (<COMMA> Identifier())*  )/*@bgen(jjtree)*/
                                                 } catch (Throwable jjte001) {
                                                   if (jjtc001) {
                                                     jjtree.clearNodeScope(jjtn001);
                                                     jjtc001 = false;
                                                   } else {
                                                     jjtree.popNode();
                                                   }
                                                   if (jjte001 instanceof RuntimeException) {
                                                     throw (RuntimeException)jjte001;
                                                   }
                                                   if (jjte001 instanceof ParseException) {
                                                     throw (ParseException)jjte001;
                                                   }
                                                   throw (Error)jjte001;
                                                 } finally {
                                                   if (jjtc001) {
                                                     jjtree.closeNodeScope(jjtn001, true);
                                                     jjtn001.jjtSetLastToken(getToken(0));
                                                   }
                                                 }
/*@egen*/     ]
	  LogicalORExpression()
	  end=<END>/*@bgen(jjtree)*/
         } catch (Throwable jjte000) {
           if (jjtc000) {
             jjtree.clearNodeScope(jjtn000);
             jjtc000 = false;
           } else {
             jjtree.popNode();
           }
           if (jjte000 instanceof RuntimeException) {
             throw (RuntimeException)jjte000;
           }
           if (jjte000 instanceof ParseException) {
             throw (ParseException)jjte000;
           }
           throw (Error)jjte000;
         } finally {
           if (jjtc000) {
             jjtree.closeNodeScope(jjtn000, true);
             jjtn000.jjtSetLastToken(getToken(0));
           }
         }
/*@egen*/
	 //{jjtThis.setCoord(begin,end);}
	}

/*******************************************************************************
 **********************   END OF LARA SYNTACTIC GRAMMAR    ********************* 
 *******************************************************************************/

	/* The following part of the grammar is the EcmaScript grammar created by The Dojo Foundation (2004-2005), and it was partially updated to conform to the requirements of LARA grammar, such as the use of actions and join point variables.
	**/

	/* Section 11.1: Primary Expressions */

	void PrimaryExpression()       :
	{}
	{
	    This()		 
		| ObjectLiteral()
		| ArrayLiteral()
		| ParenExpression()
		| Identifier()
		| Literal()
//		{ return jjtThis; }
	}

	void This()               :
	{/*@bgen(jjtree) ThisReference */
  ASTThisReference jjtn000 = new ASTThisReference(JJTTHISREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ThisReference */
          try {
/*@egen*//*@bgen(jjtree) ThisReference */
          {
            ASTThisReference jjtn001 = new ASTThisReference(JJTTHISREFERENCE);
            boolean jjtc001 = true;
            jjtree.openNodeScope(jjtn001);
            jjtn001.jjtSetFirstToken(getToken(1));
          }
          try {
/*@egen*/
	  "this"/*@bgen(jjtree)*/
          } finally {
            if (jjtc001) {
              jjtree.closeNodeScope(jjtn001, true);
              jjtn001.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/               /*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	  
	}

	void ParenExpression()                 :
	{/*@bgen(jjtree) ParenExpression */
  ASTParenExpression jjtn000 = new ASTParenExpression(JJTPARENEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ParenExpression */
          try {
/*@egen*/
	  "(" Expression() ")"/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/ 
	}

	/* Section 7.8: Literals */

	void Literal()          :
	{/*@bgen(jjtree) Literal */
          ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	  Token t;
	  Map objLiteral;
	  List arrayLiteral;
	}
	{/*@bgen(jjtree) Literal */
                try {
/*@egen*/
		t = <DECIMAL_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ 
		{
			jjtn000.setDecimalValue(t.image);
			if(t.image.contains("."))
				jjtn000.setType(Types.Float);
			else jjtn000.setType(Types.Int);
		}
	|
		t = <HEX_INTEGER_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setHexValue(t.image);
			jjtn000.setType(Types.Int);
		}
	|
		t = <STRING_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setStringValue(t.image);
			jjtn000.setType(Types.String);
		}
	|
		t = <BOOLEAN_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setBooleanValue(t.image);
			jjtn000.setType(Types.Boolean);
		}
	|
		t = <NULL_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setNullValue();
			jjtn000.setType(Types.Null);
		}
	| 
		t = <REGULAR_EXPRESSION_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setRegexValue(t.image);
			jjtn000.setType(Types.RegEx);
		}
	| 
		t = <CODE_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setCodeValue(t.image);
			jjtn000.setType(Types.Code);
		}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void TemplateLiteral()         :
	{/*@bgen(jjtree) Literal */
          ASTLiteral jjtn000 = new ASTLiteral(JJTLITERAL);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	  Token t;
	}
	{/*@bgen(jjtree) Literal */
          try {
/*@egen*/
	  t = <STRING_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setStringValue(t.image);
			jjtn000.setType(Types.String);
		}
	  | 
		t = <CODE_LITERAL>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{
			jjtn000.setCodeValue(t.image);
			jjtn000.setType(Types.Code);
		}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}


	void Identifier()             :
	{/*@bgen(jjtree) Identifier */
          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	  Token t;
	}
	{/*@bgen(jjtree) Identifier */
          try {
/*@egen*/
	  t=<IDENTIFIER_NAME>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {
	    jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
	   /*{jjtThis.setCoord(t,t); }*/
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}


	void LabelIdentifier()             :
	{/*@bgen(jjtree) Identifier */
          ASTIdentifier jjtn000 = new ASTIdentifier(JJTIDENTIFIER);
          boolean jjtc000 = true;
          jjtree.openNodeScope(jjtn000);
          jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/
	  Token t;
	}
	{/*@bgen(jjtree) Identifier */
          try {
/*@egen*/
	  (
	    t=<LABEL_IDENTIFIER> | t=< IDENTIFIER_NAME>)/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.jjtSetLastToken(getToken(0));
          }
/*@egen*/
	  {
	    jjtn000.setName(t.image);jjtn000.jjtSetValue(t.image);
	   /*{jjtThis.setCoord(t,t); }*/
	  }/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}

	/* Section 11.1.4: Array Initialiser */

	void ArrayLiteral()               : 
	{/*@bgen(jjtree) ArrayLiteral */
  ASTArrayLiteral jjtn000 = new ASTArrayLiteral(JJTARRAYLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ArrayLiteral */
                try {
/*@egen*/
		"[" ( 
				(ElisionFirst())? 
				(
				  ElementList()
					 //LOOKAHEAD(ElementList() Elision()) ElementList() Elision() 
					//| ( ElementList() )?
				)?
		) "]"/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}		 



	void ElementList()       :
	{}
	{
		AssignmentExpression()
		
	    (	    LOOKAHEAD(2)
	    	Elision() 	  	    AssignmentExpression()	  	)*	    [Elision()]
		//(Elision() AssignmentExpression() )*
		//(Elision())?
	}

	void Elision()      :
	{}
	{
	  	(",")
		[/*@bgen(jjtree) EmptyPositions */
                 {
                   ASTEmptyPositions jjtn001 = new ASTEmptyPositions(JJTEMPTYPOSITIONS);
                   boolean jjtc001 = true;
                   jjtree.openNodeScope(jjtn001);
                   jjtn001.jjtSetFirstToken(getToken(1));
                 }
                 try {
/*@egen*/("," {jjtn001.inc();})+/*@bgen(jjtree)*/
                 } finally {
                   if (jjtc001) {
                     jjtree.closeNodeScope(jjtn001, true);
                     jjtn001.jjtSetLastToken(getToken(0));
                   }
                 }
/*@egen*/                ]
	}


	void ElisionFirst()                :
	{/*@bgen(jjtree) EmptyPositions */
  ASTEmptyPositions jjtn000 = new ASTEmptyPositions(JJTEMPTYPOSITIONS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) EmptyPositions */
                try {
/*@egen*/
	  	(","){jjtn000.inc();}
		[("," {jjtn000.inc();})+ ]/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.1.5: Object Initialiser */

	void ObjectLiteral()                :
	{/*@bgen(jjtree) ObjectLiteral */
  ASTObjectLiteral jjtn000 = new ASTObjectLiteral(JJTOBJECTLITERAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ObjectLiteral */
                try {
/*@egen*/
		< LBRACE > {exprBraceCount++;}
			( PropertyNameAndValueList() )?
		< RBRACE >/*@bgen(jjtree)*/
                           {
                             jjtree.closeNodeScope(jjtn000, true);
                             jjtc000 = false;
                             jjtn000.jjtSetLastToken(getToken(0));
                           }
/*@egen*/ {exprBraceCount--;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void PropertyNameAndValueList()       :
	{}
	{
		
		PropertyNameAndValue() ( LOOKAHEAD( "," PropertyNameAndValue()) "," PropertyNameAndValue() | "," )* 
	}

	void PropertyNameAndValue()               :
	{/*@bgen(jjtree) LiteralField */
  ASTLiteralField jjtn000 = new ASTLiteralField(JJTLITERALFIELD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) LiteralField */
                try {
/*@egen*/
		PropertyName() ":" AssignmentExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void PropertyName()       :
	{}
	{
		    noReservedIdentifier() 
		  | 
		  	Literal()
	  /* OLD
		Identifier() 
		| 
		<STRING_LITERAL> #Literal
		| 
		<DECIMAL_LITERAL> #Literal
		*/
	}


	/* Section 11.2: Left-Hand-Side Expressions */

	void MemberExpression()       :
	{}
	{/*@bgen(jjtree) #CompositeReference(> 1) */
                {
                  ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ 
		( (
		  		LOOKAHEAD("function*") GeneratorFunctionExpression() |
				LOOKAHEAD("function") FunctionExpression() |
				LOOKAHEAD(ArrowFunctionExpression()) ArrowFunctionExpression() |
				PrimaryExpression()  
		) (LOOKAHEAD(2) MemberExpressionPart())*	 )/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                        
		|	 AllocationExpression()
	}

	void MemberExpressionForIn()       :
	{}
	{/*@bgen(jjtree) #CompositeReference(> 1) */
                {
                  ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/ 
		( (
				LOOKAHEAD("function*") GeneratorFunctionExpression() |		  
				LOOKAHEAD("function") FunctionExpression() |
				LOOKAHEAD(ArrowFunctionExpression()) ArrowFunctionExpression() |
				PrimaryExpression()  
		) (LOOKAHEAD(2) MemberExpressionPart())*	 )/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                        
	}

	void AllocationExpression()                       :
	{/*@bgen(jjtree) AllocationExpression */
  ASTAllocationExpression jjtn000 = new ASTAllocationExpression(JJTALLOCATIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) AllocationExpression */
                try {
/*@egen*//*@bgen(jjtree) #CompositeReference(> 1) */
                {
                  ASTCompositeReference jjtn001 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		( "new" MemberExpression() ( (LOOKAHEAD(Arguments()) Arguments() (LOOKAHEAD(2) MemberExpressionPart())* ) * ) )/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                        /*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void MemberExpressionPart()       :
	{}
	{/*@bgen(jjtree) PropertyValueReference */
                {
                  ASTPropertyValueReference jjtn001 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
                  boolean jjtc001 = true;
                  jjtree.openNodeScope(jjtn001);
                  jjtn001.jjtSetFirstToken(getToken(1));
                }
                try {
/*@egen*/
		( ("[" Expression() "]")  | (< LBRACE > {exprBraceCount++;} Expression() < RBRACE >/*@bgen(jjtree)*/
                                                                                                    {
                                                                                                      jjtree.closeNodeScope(jjtn001, true);
                                                                                                      jjtc001 = false;
                                                                                                      jjtn001.jjtSetLastToken(getToken(0));
                                                                                                    }
/*@egen*/ {exprBraceCount--;}))/*@bgen(jjtree)*/
                } catch (Throwable jjte001) {
                  if (jjtc001) {
                    jjtree.clearNodeScope(jjtn001);
                    jjtc001 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte001 instanceof RuntimeException) {
                    throw (RuntimeException)jjte001;
                  }
                  if (jjte001 instanceof ParseException) {
                    throw (ParseException)jjte001;
                  }
                  throw (Error)jjte001;
                } finally {
                  if (jjtc001) {
                    jjtree.closeNodeScope(jjtn001, true);
                    jjtn001.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/                         |/*@bgen(jjtree) PropertyIdentifierReference */
                                                                                                                                                    {
                                                                                                                                                      ASTPropertyIdentifierReference jjtn002 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
                                                                                                                                                      boolean jjtc002 = true;
                                                                                                                                                      jjtree.openNodeScope(jjtn002);
                                                                                                                                                      jjtn002.jjtSetFirstToken(getToken(1));
                                                                                                                                                    }
                                                                                                                                                    try {
/*@egen*/ ( "." (noReservedIdentifier()))/*@bgen(jjtree)*/
                                                                                                                                                    } catch (Throwable jjte002) {
                                                                                                                                                      if (jjtc002) {
                                                                                                                                                        jjtree.clearNodeScope(jjtn002);
                                                                                                                                                        jjtc002 = false;
                                                                                                                                                      } else {
                                                                                                                                                        jjtree.popNode();
                                                                                                                                                      }
                                                                                                                                                      if (jjte002 instanceof RuntimeException) {
                                                                                                                                                        throw (RuntimeException)jjte002;
                                                                                                                                                      }
                                                                                                                                                      if (jjte002 instanceof ParseException) {
                                                                                                                                                        throw (ParseException)jjte002;
                                                                                                                                                      }
                                                                                                                                                      throw (Error)jjte002;
                                                                                                                                                    } finally {
                                                                                                                                                      if (jjtc002) {
                                                                                                                                                        jjtree.closeNodeScope(jjtn002, true);
                                                                                                                                                        jjtn002.jjtSetLastToken(getToken(0));
                                                                                                                                                      }
                                                                                                                                                    }
/*@egen*/                             

	}

	void CallExpression()                         : 
	{/*@bgen(jjtree) #CompositeReference(> 1) */
  ASTCompositeReference jjtn000 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #CompositeReference(> 1) */
                try {
/*@egen*/
		MemberExpression() Arguments() ( LOOKAHEAD(2) CallExpressionPart() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void CallExpressionForIn()                         : 
	{/*@bgen(jjtree) #CompositeReference(> 1) */
  ASTCompositeReference jjtn000 = new ASTCompositeReference(JJTCOMPOSITEREFERENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #CompositeReference(> 1) */
                try {
/*@egen*/
		MemberExpressionForIn() Arguments() ( LOOKAHEAD(2) CallExpressionPart() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void CallExpressionPart()       :
	{}
	{
		Arguments() |/*@bgen(jjtree) PropertyValueReference */
                              {
                                ASTPropertyValueReference jjtn001 = new ASTPropertyValueReference(JJTPROPERTYVALUEREFERENCE);
                                boolean jjtc001 = true;
                                jjtree.openNodeScope(jjtn001);
                                jjtn001.jjtSetFirstToken(getToken(1));
                              }
                              try {
/*@egen*/ ( "[" Expression() "]" )/*@bgen(jjtree)*/
                              } catch (Throwable jjte001) {
                                if (jjtc001) {
                                  jjtree.clearNodeScope(jjtn001);
                                  jjtc001 = false;
                                } else {
                                  jjtree.popNode();
                                }
                                if (jjte001 instanceof RuntimeException) {
                                  throw (RuntimeException)jjte001;
                                }
                                if (jjte001 instanceof ParseException) {
                                  throw (ParseException)jjte001;
                                }
                                throw (Error)jjte001;
                              } finally {
                                if (jjtc001) {
                                  jjtree.closeNodeScope(jjtn001, true);
                                  jjtn001.jjtSetLastToken(getToken(0));
                                }
                              }
/*@egen*/                         |/*@bgen(jjtree) PropertyIdentifierReference */
                                                                                 {
                                                                                   ASTPropertyIdentifierReference jjtn002 = new ASTPropertyIdentifierReference(JJTPROPERTYIDENTIFIERREFERENCE);
                                                                                   boolean jjtc002 = true;
                                                                                   jjtree.openNodeScope(jjtn002);
                                                                                   jjtn002.jjtSetFirstToken(getToken(1));
                                                                                 }
                                                                                 try {
/*@egen*/ ( "." noReservedIdentifier() )/*@bgen(jjtree)*/
                                                                                 } catch (Throwable jjte002) {
                                                                                   if (jjtc002) {
                                                                                     jjtree.clearNodeScope(jjtn002);
                                                                                     jjtc002 = false;
                                                                                   } else {
                                                                                     jjtree.popNode();
                                                                                   }
                                                                                   if (jjte002 instanceof RuntimeException) {
                                                                                     throw (RuntimeException)jjte002;
                                                                                   }
                                                                                   if (jjte002 instanceof ParseException) {
                                                                                     throw (ParseException)jjte002;
                                                                                   }
                                                                                   throw (Error)jjte002;
                                                                                 } finally {
                                                                                   if (jjtc002) {
                                                                                     jjtree.closeNodeScope(jjtn002, true);
                                                                                     jjtn002.jjtSetLastToken(getToken(0));
                                                                                   }
                                                                                 }
/*@egen*/                             
	}

	void Arguments()                         :
	{/*@bgen(jjtree) FunctionCallParameters */
  ASTFunctionCallParameters jjtn000 = new ASTFunctionCallParameters(JJTFUNCTIONCALLPARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) FunctionCallParameters */
                try {
/*@egen*/
		"(" (LOOKAHEAD(getNoReservedIdentifier() <COLON>) (NamedArgumentList(){ jjtn000.areNamed = true;})
															| ArgumentList())? ")"/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void NamedArgumentList()      :
	{}
	{
		 NamedArgument() (<COMMA> NamedArgument())*
	}

	void NamedArgument()               :
	{/*@bgen(jjtree) NamedArgument */
         ASTNamedArgument jjtn000 = new ASTNamedArgument(JJTNAMEDARGUMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token argument;}
	{/*@bgen(jjtree) NamedArgument */
          try {
/*@egen*/
	  argument=getNoReservedIdentifier() {jjtn000.jjtSetValue(argument.image);}
	   <COLON> AssignmentExpression()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}
	void ArgumentList()       :
	{}
	{
		AssignmentExpression() ("," AssignmentExpression())*
	}


	void LeftHandSideExpression()       : 
	{}
	{
		LOOKAHEAD(MemberExpression() "(") CallExpression() | MemberExpression() 
	}


	void LeftHandSideExpressionForIn()       : 
	{}
	{
		LOOKAHEAD(CallExpression()) CallExpressionForIn() | MemberExpressionForIn() 
	}

	/* Section 11.3 Postfix Expressions */

	void PostfixExpression()                        :
	{/*@bgen(jjtree) #PostfixExpression(> 1) */
  ASTPostfixExpression jjtn000 = new ASTPostfixExpression(JJTPOSTFIXEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #PostfixExpression(> 1) */
                try {
/*@egen*/
		LeftHandSideExpression() [ LOOKAHEAD(1) PostfixOperator() ]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void PostfixOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		( op="++" | op="--")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	} 


	/* Section 11.4 Unary Operators */

	void UnaryExpression()                      :
	{/*@bgen(jjtree) #UnaryExpression(> 1) */
  ASTUnaryExpression jjtn000 = new ASTUnaryExpression(JJTUNARYEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #UnaryExpression(> 1) */
                try {
/*@egen*/ 
		PostfixExpression() | ( UnaryOperator() UnaryExpression() )/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void UnaryOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="delete" | op="void" | op="typeof" | op="++" | op="--" | op="+" | op="-" | op="~" | op="!")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 11.5: Multiplicative Operators */


	void MultiplicativeExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/ 
		UnaryExpression() ( MultiplicativeOperator() UnaryExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	void MultiplicativeOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="*" | op=<SLASH> | op="%")/*@bgen(jjtree)*/
                                               {
                                                 jjtree.closeNodeScope(jjtn000, true);
                                                 jjtc000 = false;
                                                 jjtn000.jjtSetLastToken(getToken(0));
                                               }
/*@egen*/ { jjtn000.jjtSetValue(op.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.6: Additive Operators */

	void AdditiveExpression()                               : 
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		MultiplicativeExpression() ( LOOKAHEAD(1) AdditiveOperator() MultiplicativeExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void AdditiveOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="+" | op="-")/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn000, true);
                                    jjtc000 = false;
                                    jjtn000.jjtSetLastToken(getToken(0));
                                  }
/*@egen*/ { jjtn000.jjtSetValue(op.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 11.7: Bitwise Shift Operators */

	void ShiftExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		AdditiveExpression() ( ShiftOperator() AdditiveExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void ShiftOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="<<" | op=">>" | op=">>>")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.4: Relational Operators */

	void RelationalExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		ShiftExpression() ( RelationalOperator() ShiftExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void RelationalOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="<" | op=">" | op="<=" | op=">=" | op="instanceof" | op="in")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void RelationalExpressionNoIn()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		ShiftExpression() ( RelationalNoInOperator() ShiftExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	void RelationalNoInOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="<" | op=">" | op="<=" | op=">=" | op="instanceof")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.9: Equality Operators */

	void EqualityExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		RelationalExpression() ( EqualityOperator() RelationalExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void EqualityExpressionNoIn()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		RelationalExpressionNoIn() ( EqualityOperator() RelationalExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void EqualityOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="==" | op="!=" | op="===" | op="!==" | op=<MATCH>)/*@bgen(jjtree)*/
                                                                       {
                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                         jjtc000 = false;
                                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                                       }
/*@egen*/ { jjtn000.jjtSetValue(op.image);}/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.10: Binary Bitwise Operators */

	void BitwiseANDExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		EqualityExpression() ( BitwiseANDOperator() EqualityExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseANDExpressionNoIn()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		EqualityExpressionNoIn() (BitwiseANDOperator() EqualityExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseANDOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		op="&"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ { jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseXORExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		BitwiseANDExpression() (BitwiseXOROperator() BitwiseANDExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseXORExpressionNoIn()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		BitwiseANDExpressionNoIn() (BitwiseXOROperator() BitwiseANDExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseXOROperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		op="^"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ { jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseORExpression()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		BitwiseXORExpression() (BitwiseOROperator() BitwiseXORExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseORExpressionNoIn()                               :
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
  ASTBinaryExpressionSequence jjtn000 = new ASTBinaryExpressionSequence(JJTBINARYEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #BinaryExpressionSequence(> 1) */
                try {
/*@egen*/
		BitwiseXORExpressionNoIn() (BitwiseOROperator() BitwiseXORExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void BitwiseOROperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		op="|"/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ { jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}
	/* Section 11.11: Binary Logical Operators */

	void LogicalANDExpression()                            :
	{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
                try {
/*@egen*/
		BitwiseORExpression() (LogicalANDOperator() BitwiseORExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void LogicalANDExpressionNoIn()                            :
	{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
  ASTAndExpressionSequence jjtn000 = new ASTAndExpressionSequence(JJTANDEXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #AndExpressionSequence(> 1) */
                try {
/*@egen*/ 
		BitwiseORExpressionNoIn() (LogicalANDOperator() BitwiseORExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void LogicalANDOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		op="&&"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ { jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void LogicalORExpression()                           :
	{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
                try {
/*@egen*/
		LogicalANDExpression() (LogicalOROperator() LogicalANDExpression())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void LogicalORExpressionNoIn()                           :
	{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
  ASTOrExpressionSequence jjtn000 = new ASTOrExpressionSequence(JJTOREXPRESSIONSEQUENCE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #OrExpressionSequence(> 1) */
                try {
/*@egen*/
		LogicalANDExpressionNoIn() (LogicalOROperator() LogicalANDExpressionNoIn())*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void LogicalOROperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		op="||"/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                          jjtn000.jjtSetLastToken(getToken(0));
                        }
/*@egen*/ { jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 11.12: Conditional Operator */

	void ConditionalExpression()                            :
	{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #ConditionalExpression(> 1) */
                try {
/*@egen*/
		LogicalORExpression() [ "?" AssignmentExpression() ":" AssignmentExpression() ]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void ConditionalExpressionNoIn()                            :
	{/*@bgen(jjtree) #ConditionalExpression(> 1) */
  ASTConditionalExpression jjtn000 = new ASTConditionalExpression(JJTCONDITIONALEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #ConditionalExpression(> 1) */
                try {
/*@egen*/
		LogicalORExpressionNoIn() [ "?" AssignmentExpression() ":" AssignmentExpressionNoIn() ]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 11.13: Assignment Operators */

	void AssignmentExpression()                           :
	{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #AssignmentExpression(> 1) */
                try {
/*@egen*/
		LOOKAHEAD(LeftHandSideExpression() AssignmentOperator()) LeftHandSideExpression() AssignmentOperator()
		 (LOOKAHEAD(ActionOnAssign())ActionOnAssign() |AssignmentExpression()) 
		| ConditionalExpression()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}

	void AssignmentExpressionNoIn()                           : 
	{/*@bgen(jjtree) #AssignmentExpression(> 1) */
  ASTAssignmentExpression jjtn000 = new ASTAssignmentExpression(JJTASSIGNMENTEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #AssignmentExpression(> 1) */
                try {
/*@egen*/
		LOOKAHEAD(LeftHandSideExpression() AssignmentOperator())

		  LeftHandSideExpression() AssignmentOperator()
		  	(LOOKAHEAD(ActionOnAssign())ActionOnAssign() | AssignmentExpressionNoIn())
		| ConditionalExpressionNoIn()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}

	void AssignmentOperator()           :
	{/*@bgen(jjtree) Operator */
         ASTOperator jjtn000 = new ASTOperator(JJTOPERATOR);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token op;}
	{/*@bgen(jjtree) Operator */
                try {
/*@egen*/
		(op="=" | op="*=" | op=<SLASHASSIGN> | op="%=" | op="+=" | op="-=" | op="<<=" | op=">>=" | op=">>>=" | op="&=" | op="^=" | op="|=")/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{ jjtn000.jjtSetValue(op.image); }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 11.14: Comma Operator */

	void Expression()                     :
	{/*@bgen(jjtree) #ExpressionList(> 1) */
  ASTExpressionList jjtn000 = new ASTExpressionList(JJTEXPRESSIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #ExpressionList(> 1) */
                try {
/*@egen*/
		AssignmentExpression() ( "," AssignmentExpression() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void ExpressionNoIn() :
	{}
	{
		AssignmentExpressionNoIn() ( "," AssignmentExpressionNoIn() )*
	}



	/* Section 12: STATEMENTS */

	void Statement()       :
	{{exprBraceCount =0;}}
	{
	  
	
			LOOKAHEAD(2) BodiedStatement()
			|
		  	SingleStatement()
//		}catch(ParseException e){
//			e.printStackTrace();
//			throw null;
//		}
	}

	void SingleStatement()      :
	{}
	{
		try
		{
	    
	  	  SimpleAction()
	 	| LOOKAHEAD(Action())
		 		Action()
	 	| LOOKAHEAD(< CALL > | (< VAR > < IDENTIFIER_NAME > | LeftHandSideExpression() ) <ASSIGN > <CALL >) Call()
		 	| LOOKAHEAD([<RUN >] <CMD >)
		 		Cmd()
	 	| Run() 
		  	//| LOOKAHEAD(Block()) Block()	  
			// | LOOKAHEAD("var" Identifier() ":") JScriptVarStatement() // JScript .NET declaration 
	 		| LOOKAHEAD("var" Identifier())
	 			VariableStatement()
		| EmptyStatement()
			| LOOKAHEAD(ExpressionStatement())
				ExpressionStatement()
			| LOOKAHEAD(Identifier() ":")
				LabelledStatement()
		| ContinueStatement()
		| YieldStatement()
		| BreakStatement()
		| ImportStatement()
		| ReturnStatement()
		}catch(ParseException e){
	      	error_skipto(e,SEMICOLON);
		}catch(TokenMgrError error){
			exceptions.add(error);
			if (exceptions.size() >= MAXIMUM_SYNTAX_EXCEPTIONS) {
                Exception e = new larac.exceptions.LARACompilerException("Lexer problems", error);
                error_skipto(new ParseException(error.getMessage()), SEMICOLON);
            }
            
//	      	error_skipto(new ParseException(e.getMessage()),SEMICOLON);
//			Exception e = new larac.exceptions.LARACompilerException("Lexer problems",error);
//			exceptions.add(error);
//	      	throw ;
		}
		  
	}

	void BodiedStatement()      :
	{}
	{
		try{
	    
			Block()
			| IfStatement()
			| IterationStatement()
			| SwitchStatement()
		| WithStatement()
		| ThrowStatement()
		| TryStatement()
	  	}catch(ParseException e){
	      	error_skipto(e,LBRACE);
	}
	}
 
	/* 12.1 Block Statement */

	void Block()        :
	{/*@bgen(jjtree) Block */
         ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin, end;}
	{/*@bgen(jjtree) Block */
                try {
/*@egen*/
		begin=< LBRACE >
			( StatementList() )?
		end=< RBRACE >/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		//{jjtThis.setCoord(begin,end);}
		}

	void StatementList()                    : 
	{/*@bgen(jjtree) #StatementList(> 1) */
  ASTStatementList jjtn000 = new ASTStatementList(JJTSTATEMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #StatementList(> 1) */
                try {
/*@egen*/
		( Statement() )+/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 12.2: Variable statement */

	void VariableStatement()                    :
	{/*@bgen(jjtree) VariableStatement */
         ASTVariableStatement jjtn000 = new ASTVariableStatement(JJTVARIABLESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin, end;}
	{/*@bgen(jjtree) VariableStatement */
                try {
/*@egen*/
	  
		begin=< VAR > VariableDeclarationList() end=EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
		//{ jjtThis.setCoord(begin,end);}
	
		}

	void VariableDeclarationList()                              :
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
                try {
/*@egen*/
		VariableDeclaration() ( "," VariableDeclaration() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void VariableDeclarationListNoIn()                              :
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
                try {
/*@egen*/
		VariableDeclarationNoIn() ( "," VariableDeclarationNoIn() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void VariableDeclaration()                      :
	{/*@bgen(jjtree) VariableDeclaration */
         ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token type;}
	{/*@bgen(jjtree) VariableDeclaration */
                try {
/*@egen*/
//		Identifier() ( Initialiser() )?
		Identifier()[":" type=getNoReservedIdentifier() {jjtn000.setType(type.image);}] ( Initialiser() )?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void VariableDeclarationNoIn() :
	{}
	{
		Identifier()/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                             {
                               ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                               boolean jjtc001 = true;
                               jjtree.openNodeScope(jjtn001);
                               jjtn001.jjtSetFirstToken(getToken(1));
                             }
                             try {
/*@egen*/ ( InitialiserNoIn() )?/*@bgen(jjtree)*/
                             } catch (Throwable jjte001) {
                               if (jjtc001) {
                                 jjtree.clearNodeScope(jjtn001);
                                 jjtc001 = false;
                               } else {
                                 jjtree.popNode();
                               }
                               if (jjte001 instanceof RuntimeException) {
                                 throw (RuntimeException)jjte001;
                               }
                               if (jjte001 instanceof ParseException) {
                                 throw (ParseException)jjte001;
                               }
                               throw (Error)jjte001;
                             } finally {
                               if (jjtc001) {
                                 jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                 jjtn001.jjtSetLastToken(getToken(0));
                               }
                             }
/*@egen*/                                        
	}

	void Initialiser()       :
	{}
	{
		"=" (LOOKAHEAD(ActionOnAssign() ) ActionOnAssign()   | AssignmentExpression())
	}

	void InitialiserNoIn()       :
	{}
	{
		"=" AssignmentExpressionNoIn()
	}


	/* Section 12.3: Empty Statement */

	void EmptyStatement()                 :
	{/*@bgen(jjtree) EmptyStatement */
  ASTEmptyStatement jjtn000 = new ASTEmptyStatement(JJTEMPTYSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) EmptyStatement */
                try {
/*@egen*/
		";"/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* Section 12.4: Expression Statement */

	void ExpressionStatement()                      :
	{/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ExpressionStatement */
                try {
/*@egen*/
		Expression() EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	ASTExpressionStatement ParseExpression()                      :
	{/*@bgen(jjtree) ExpressionStatement */
  ASTExpressionStatement jjtn000 = new ASTExpressionStatement(JJTEXPRESSIONSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ExpressionStatement */
                try {
/*@egen*/
		//Expression() <EOF> //To many things! just need a parser like the LeftHandSideExpression rule
		//This is a simpler version, which is just what we need 
		(
		  LOOKAHEAD(MemberExpression() "(") CallExpression()
		  | MemberExpression()
		)
		<EOF >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/
		{return jjtn000;}/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/	
	}


	/* Section 12.5: The if Statement */

	void IfStatement()              :
	{/*@bgen(jjtree) IfStatement */
         ASTIfStatement jjtn000 = new ASTIfStatement(JJTIFSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) IfStatement */
                try {
/*@egen*/
		begin="if" "(" Expression() ")" Statement() [ LOOKAHEAD(1) "else" Statement() ]/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		//{jjtThis.setCoord(begin,begin);	}
	}


	/* Section 12.6: Iteration Statements */
	void IterationStatement()       :
	{Token begin;Token end;}
	{
		  DoStatement()
		| WhileStatement()
		| ForStatement()
	}

	void DoStatement()             :
	{/*@bgen(jjtree) DoStatement */
         ASTDoStatement jjtn000 = new ASTDoStatement(JJTDOSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin, end;}
	{/*@bgen(jjtree) DoStatement */
          try {
/*@egen*/
	  begin=<DO> Statement() end=<WHILE> <LPAREN> Expression() <RPAREN> EndStatement()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/ 
	 // {jjtThis.setCoord(begin,end);}
	}

	void WhileStatement()                :
	{/*@bgen(jjtree) WhileStatement */
         ASTWhileStatement jjtn000 = new ASTWhileStatement(JJTWHILESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) WhileStatement */
          try {
/*@egen*/
	  begin=<WHILE> <LPAREN> Expression() <RPAREN> Statement()/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	 // {jjtThis.setCoord(begin,begin);}
	}

	void ForStatement()      :
	{Token begin;boolean isEach = false;}
	{
	  begin=< FOR >(
		<EACH> <LPAREN>(/*@bgen(jjtree) ForVarInStatement */
                           {
                             ASTForVarInStatement jjtn001 = new ASTForVarInStatement(JJTFORVARINSTATEMENT);
                             boolean jjtc001 = true;
                             jjtree.openNodeScope(jjtn001);
                             jjtn001.jjtSetFirstToken(getToken(1));
                           }
                           try {
/*@egen*/ //for each var
			   ("var" VariableDeclarationNoIn() <IN> Expression() <RPAREN> Statement()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn001, true);
                                   jjtc001 = false;
                                   jjtn001.jjtSetLastToken(getToken(0));
                                 }
/*@egen*/
			         {jjtn001.setEach(true);} /*{jjtThis.setCoord(begin,begin);*/)/*@bgen(jjtree)*/
                           } catch (Throwable jjte001) {
                             if (jjtc001) {
                               jjtree.clearNodeScope(jjtn001);
                               jjtc001 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte001 instanceof RuntimeException) {
                               throw (RuntimeException)jjte001;
                             }
                             if (jjte001 instanceof ParseException) {
                               throw (ParseException)jjte001;
                             }
                             throw (Error)jjte001;
                           } finally {
                             if (jjtc001) {
                               jjtree.closeNodeScope(jjtn001, true);
                               jjtn001.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/                   
			   |/*@bgen(jjtree) ForInStatement */
                           {
                             ASTForInStatement jjtn002 = new ASTForInStatement(JJTFORINSTATEMENT);
                             boolean jjtc002 = true;
                             jjtree.openNodeScope(jjtn002);
                             jjtn002.jjtSetFirstToken(getToken(1));
                           }
                           try {
/*@egen*///for each
			   ( LeftHandSideExpressionForIn() <IN> Expression() <RPAREN> Statement()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn002, true);
                                   jjtc002 = false;
                                   jjtn002.jjtSetLastToken(getToken(0));
                                 }
/*@egen*/
			         {jjtn002.setEach(true);} /*{jjtThis.setCoord(begin,begin);*/)/*@bgen(jjtree)*/
                           } catch (Throwable jjte002) {
                             if (jjtc002) {
                               jjtree.clearNodeScope(jjtn002);
                               jjtc002 = false;
                             } else {
                               jjtree.popNode();
                             }
                             if (jjte002 instanceof RuntimeException) {
                               throw (RuntimeException)jjte002;
                             }
                             if (jjte002 instanceof ParseException) {
                               throw (ParseException)jjte002;
                             }
                             throw (Error)jjte002;
                           } finally {
                             if (jjtc002) {
                               jjtree.closeNodeScope(jjtn002, true);
                               jjtn002.jjtSetLastToken(getToken(0));
                             }
                           }
/*@egen*/                
	    )
	  |
		<LPAREN> ( //for ...;...;...
			  LOOKAHEAD( (ExpressionNoIn())? ";")/*@bgen(jjtree) ForStatement */
                                                              {
                                                                ASTForStatement jjtn009 = new ASTForStatement(JJTFORSTATEMENT);
                                                                boolean jjtc009 = true;
                                                                jjtree.openNodeScope(jjtn009);
                                                                jjtn009.jjtSetFirstToken(getToken(1));
                                                              }
                                                              try {
/*@egen*/ (/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                               {
                                                                 ASTEmptyExpression jjtn004 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                 boolean jjtc004 = true;
                                                                 jjtree.openNodeScope(jjtn004);
                                                                 jjtn004.jjtSetFirstToken(getToken(1));
                                                               }
                                                               try {
/*@egen*/(/*@bgen(jjtree) PreAssignmentList */
                                                                 {
                                                                   ASTPreAssignmentList jjtn003 = new ASTPreAssignmentList(JJTPREASSIGNMENTLIST);
                                                                   boolean jjtc003 = true;
                                                                   jjtree.openNodeScope(jjtn003);
                                                                   jjtn003.jjtSetFirstToken(getToken(1));
                                                                 }
                                                                 try {
/*@egen*/ ExpressionNoIn()/*@bgen(jjtree)*/
                                                                 } catch (Throwable jjte003) {
                                                                   if (jjtc003) {
                                                                     jjtree.clearNodeScope(jjtn003);
                                                                     jjtc003 = false;
                                                                   } else {
                                                                     jjtree.popNode();
                                                                   }
                                                                   if (jjte003 instanceof RuntimeException) {
                                                                     throw (RuntimeException)jjte003;
                                                                   }
                                                                   if (jjte003 instanceof ParseException) {
                                                                     throw (ParseException)jjte003;
                                                                   }
                                                                   throw (Error)jjte003;
                                                                 } finally {
                                                                   if (jjtc003) {
                                                                     jjtree.closeNodeScope(jjtn003, true);
                                                                     jjtn003.jjtSetLastToken(getToken(0));
                                                                   }
                                                                 }
/*@egen*/                   )?/*@bgen(jjtree)*/
                                                               } catch (Throwable jjte004) {
                                                                 if (jjtc004) {
                                                                   jjtree.clearNodeScope(jjtn004);
                                                                   jjtc004 = false;
                                                                 } else {
                                                                   jjtree.popNode();
                                                                 }
                                                                 if (jjte004 instanceof RuntimeException) {
                                                                   throw (RuntimeException)jjte004;
                                                                 }
                                                                 if (jjte004 instanceof ParseException) {
                                                                   throw (ParseException)jjte004;
                                                                 }
                                                                 throw (Error)jjte004;
                                                               } finally {
                                                                 if (jjtc004) {
                                                                   jjtree.closeNodeScope(jjtn004,  jjtree . nodeArity ( ) == 0);
                                                                   jjtn004.jjtSetLastToken(getToken(0));
                                                                 }
                                                               }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                   {
                                                                                                                                     ASTEmptyExpression jjtn006 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc006 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn006);
                                                                                                                                     jjtn006.jjtSetFirstToken(getToken(1));
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/
																   (/*@bgen(jjtree) ForConditionList */
                                                                                                                                     {
                                                                                                                                       ASTForConditionList jjtn005 = new ASTForConditionList(JJTFORCONDITIONLIST);
                                                                                                                                       boolean jjtc005 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn005);
                                                                                                                                       jjtn005.jjtSetFirstToken(getToken(1));
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                     } catch (Throwable jjte005) {
                                                                                                                                       if (jjtc005) {
                                                                                                                                         jjtree.clearNodeScope(jjtn005);
                                                                                                                                         jjtc005 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte005 instanceof RuntimeException) {
                                                                                                                                         throw (RuntimeException)jjte005;
                                                                                                                                       }
                                                                                                                                       if (jjte005 instanceof ParseException) {
                                                                                                                                         throw (ParseException)jjte005;
                                                                                                                                       }
                                                                                                                                       throw (Error)jjte005;
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc005) {
                                                                                                                                         jjtree.closeNodeScope(jjtn005, true);
                                                                                                                                         jjtn005.jjtSetLastToken(getToken(0));
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/                  )?/*@bgen(jjtree)*/
                                                                                                                                   } catch (Throwable jjte006) {
                                                                                                                                     if (jjtc006) {
                                                                                                                                       jjtree.clearNodeScope(jjtn006);
                                                                                                                                       jjtc006 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte006 instanceof RuntimeException) {
                                                                                                                                       throw (RuntimeException)jjte006;
                                                                                                                                     }
                                                                                                                                     if (jjte006 instanceof ParseException) {
                                                                                                                                       throw (ParseException)jjte006;
                                                                                                                                     }
                                                                                                                                     throw (Error)jjte006;
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc006) {
                                                                                                                                       jjtree.closeNodeScope(jjtn006,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn006.jjtSetLastToken(getToken(0));
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                   {
                                                                                                                                     ASTEmptyExpression jjtn008 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc008 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn008);
                                                                                                                                     jjtn008.jjtSetFirstToken(getToken(1));
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/
																   (/*@bgen(jjtree) PostAssignmentList */
                                                                                                                                     {
                                                                                                                                       ASTPostAssignmentList jjtn007 = new ASTPostAssignmentList(JJTPOSTASSIGNMENTLIST);
                                                                                                                                       boolean jjtc007 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn007);
                                                                                                                                       jjtn007.jjtSetFirstToken(getToken(1));
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                     } catch (Throwable jjte007) {
                                                                                                                                       if (jjtc007) {
                                                                                                                                         jjtree.clearNodeScope(jjtn007);
                                                                                                                                         jjtc007 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte007 instanceof RuntimeException) {
                                                                                                                                         throw (RuntimeException)jjte007;
                                                                                                                                       }
                                                                                                                                       if (jjte007 instanceof ParseException) {
                                                                                                                                         throw (ParseException)jjte007;
                                                                                                                                       }
                                                                                                                                       throw (Error)jjte007;
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc007) {
                                                                                                                                         jjtree.closeNodeScope(jjtn007, true);
                                                                                                                                         jjtn007.jjtSetLastToken(getToken(0));
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/                    )?/*@bgen(jjtree)*/
                                                                                                                                   } catch (Throwable jjte008) {
                                                                                                                                     if (jjtc008) {
                                                                                                                                       jjtree.clearNodeScope(jjtn008);
                                                                                                                                       jjtc008 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte008 instanceof RuntimeException) {
                                                                                                                                       throw (RuntimeException)jjte008;
                                                                                                                                     }
                                                                                                                                     if (jjte008 instanceof ParseException) {
                                                                                                                                       throw (ParseException)jjte008;
                                                                                                                                     }
                                                                                                                                     throw (Error)jjte008;
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc008) {
                                                                                                                                       jjtree.closeNodeScope(jjtn008,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn008.jjtSetLastToken(getToken(0));
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/                                         ")"
																   Statement() /*{jjtThis.setCoord(begin,begin); }*/)/*@bgen(jjtree)*/
                                                              } catch (Throwable jjte009) {
                                                                if (jjtc009) {
                                                                  jjtree.clearNodeScope(jjtn009);
                                                                  jjtc009 = false;
                                                                } else {
                                                                  jjtree.popNode();
                                                                }
                                                                if (jjte009 instanceof RuntimeException) {
                                                                  throw (RuntimeException)jjte009;
                                                                }
                                                                if (jjte009 instanceof ParseException) {
                                                                  throw (ParseException)jjte009;
                                                                }
                                                                throw (Error)jjte009;
                                                              } finally {
                                                                if (jjtc009) {
                                                                  jjtree.closeNodeScope(jjtn009, true);
                                                                  jjtn009.jjtSetLastToken(getToken(0));
                                                                }
                                                              }
/*@egen*/               
			|//for var ...;...;...
			  LOOKAHEAD("var" VariableDeclarationList() ";")/*@bgen(jjtree) ForVarStatement */
                                                                         {
                                                                           ASTForVarStatement jjtn015 = new ASTForVarStatement(JJTFORVARSTATEMENT);
                                                                           boolean jjtc015 = true;
                                                                           jjtree.openNodeScope(jjtn015);
                                                                           jjtn015.jjtSetFirstToken(getToken(1));
                                                                         }
                                                                         try {
/*@egen*/ ("var"/*@bgen(jjtree) PreAssignmentList */
                                                                                {
                                                                                  ASTPreAssignmentList jjtn010 = new ASTPreAssignmentList(JJTPREASSIGNMENTLIST);
                                                                                  boolean jjtc010 = true;
                                                                                  jjtree.openNodeScope(jjtn010);
                                                                                  jjtn010.jjtSetFirstToken(getToken(1));
                                                                                }
                                                                                try {
/*@egen*/ VariableDeclarationList()/*@bgen(jjtree)*/
                                                                                } catch (Throwable jjte010) {
                                                                                  if (jjtc010) {
                                                                                    jjtree.clearNodeScope(jjtn010);
                                                                                    jjtc010 = false;
                                                                                  } else {
                                                                                    jjtree.popNode();
                                                                                  }
                                                                                  if (jjte010 instanceof RuntimeException) {
                                                                                    throw (RuntimeException)jjte010;
                                                                                  }
                                                                                  if (jjte010 instanceof ParseException) {
                                                                                    throw (ParseException)jjte010;
                                                                                  }
                                                                                  throw (Error)jjte010;
                                                                                } finally {
                                                                                  if (jjtc010) {
                                                                                    jjtree.closeNodeScope(jjtn010, true);
                                                                                    jjtn010.jjtSetLastToken(getToken(0));
                                                                                  }
                                                                                }
/*@egen*/                   ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                   {
                                                                                                                                     ASTEmptyExpression jjtn012 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc012 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn012);
                                                                                                                                     jjtn012.jjtSetFirstToken(getToken(1));
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/
																   (/*@bgen(jjtree) ForConditionList */
                                                                                                                                     {
                                                                                                                                       ASTForConditionList jjtn011 = new ASTForConditionList(JJTFORCONDITIONLIST);
                                                                                                                                       boolean jjtc011 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn011);
                                                                                                                                       jjtn011.jjtSetFirstToken(getToken(1));
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                     } catch (Throwable jjte011) {
                                                                                                                                       if (jjtc011) {
                                                                                                                                         jjtree.clearNodeScope(jjtn011);
                                                                                                                                         jjtc011 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte011 instanceof RuntimeException) {
                                                                                                                                         throw (RuntimeException)jjte011;
                                                                                                                                       }
                                                                                                                                       if (jjte011 instanceof ParseException) {
                                                                                                                                         throw (ParseException)jjte011;
                                                                                                                                       }
                                                                                                                                       throw (Error)jjte011;
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc011) {
                                                                                                                                         jjtree.closeNodeScope(jjtn011, true);
                                                                                                                                         jjtn011.jjtSetLastToken(getToken(0));
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/                  )?/*@bgen(jjtree)*/
                                                                                                                                   } catch (Throwable jjte012) {
                                                                                                                                     if (jjtc012) {
                                                                                                                                       jjtree.clearNodeScope(jjtn012);
                                                                                                                                       jjtc012 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte012 instanceof RuntimeException) {
                                                                                                                                       throw (RuntimeException)jjte012;
                                                                                                                                     }
                                                                                                                                     if (jjte012 instanceof ParseException) {
                                                                                                                                       throw (ParseException)jjte012;
                                                                                                                                     }
                                                                                                                                     throw (Error)jjte012;
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc012) {
                                                                                                                                       jjtree.closeNodeScope(jjtn012,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn012.jjtSetLastToken(getToken(0));
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/                                         ";"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                                                                                                                   {
                                                                                                                                     ASTEmptyExpression jjtn014 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                                                                                                     boolean jjtc014 = true;
                                                                                                                                     jjtree.openNodeScope(jjtn014);
                                                                                                                                     jjtn014.jjtSetFirstToken(getToken(1));
                                                                                                                                   }
                                                                                                                                   try {
/*@egen*/
																   (/*@bgen(jjtree) PostAssignmentList */
                                                                                                                                     {
                                                                                                                                       ASTPostAssignmentList jjtn013 = new ASTPostAssignmentList(JJTPOSTASSIGNMENTLIST);
                                                                                                                                       boolean jjtc013 = true;
                                                                                                                                       jjtree.openNodeScope(jjtn013);
                                                                                                                                       jjtn013.jjtSetFirstToken(getToken(1));
                                                                                                                                     }
                                                                                                                                     try {
/*@egen*/ Expression()/*@bgen(jjtree)*/
                                                                                                                                     } catch (Throwable jjte013) {
                                                                                                                                       if (jjtc013) {
                                                                                                                                         jjtree.clearNodeScope(jjtn013);
                                                                                                                                         jjtc013 = false;
                                                                                                                                       } else {
                                                                                                                                         jjtree.popNode();
                                                                                                                                       }
                                                                                                                                       if (jjte013 instanceof RuntimeException) {
                                                                                                                                         throw (RuntimeException)jjte013;
                                                                                                                                       }
                                                                                                                                       if (jjte013 instanceof ParseException) {
                                                                                                                                         throw (ParseException)jjte013;
                                                                                                                                       }
                                                                                                                                       throw (Error)jjte013;
                                                                                                                                     } finally {
                                                                                                                                       if (jjtc013) {
                                                                                                                                         jjtree.closeNodeScope(jjtn013, true);
                                                                                                                                         jjtn013.jjtSetLastToken(getToken(0));
                                                                                                                                       }
                                                                                                                                     }
/*@egen*/                    )?/*@bgen(jjtree)*/
                                                                                                                                   } catch (Throwable jjte014) {
                                                                                                                                     if (jjtc014) {
                                                                                                                                       jjtree.clearNodeScope(jjtn014);
                                                                                                                                       jjtc014 = false;
                                                                                                                                     } else {
                                                                                                                                       jjtree.popNode();
                                                                                                                                     }
                                                                                                                                     if (jjte014 instanceof RuntimeException) {
                                                                                                                                       throw (RuntimeException)jjte014;
                                                                                                                                     }
                                                                                                                                     if (jjte014 instanceof ParseException) {
                                                                                                                                       throw (ParseException)jjte014;
                                                                                                                                     }
                                                                                                                                     throw (Error)jjte014;
                                                                                                                                   } finally {
                                                                                                                                     if (jjtc014) {
                                                                                                                                       jjtree.closeNodeScope(jjtn014,  jjtree . nodeArity ( ) == 0);
                                                                                                                                       jjtn014.jjtSetLastToken(getToken(0));
                                                                                                                                     }
                                                                                                                                   }
/*@egen*/                                         <RPAREN>
																   Statement() /*{jjtThis.setCoord(begin,begin);}*/)/*@bgen(jjtree)*/
                                                                         } catch (Throwable jjte015) {
                                                                           if (jjtc015) {
                                                                             jjtree.clearNodeScope(jjtn015);
                                                                             jjtc015 = false;
                                                                           } else {
                                                                             jjtree.popNode();
                                                                           }
                                                                           if (jjte015 instanceof RuntimeException) {
                                                                             throw (RuntimeException)jjte015;
                                                                           }
                                                                           if (jjte015 instanceof ParseException) {
                                                                             throw (ParseException)jjte015;
                                                                           }
                                                                           throw (Error)jjte015;
                                                                         } finally {
                                                                           if (jjtc015) {
                                                                             jjtree.closeNodeScope(jjtn015, true);
                                                                             jjtn015.jjtSetLastToken(getToken(0));
                                                                           }
                                                                         }
/*@egen*/                 
			|/*@bgen(jjtree) ForVarInStatement */
                          {
                            ASTForVarInStatement jjtn016 = new ASTForVarInStatement(JJTFORVARINSTATEMENT);
                            boolean jjtc016 = true;
                            jjtree.openNodeScope(jjtn016);
                            jjtn016.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ //for var in/of
			  (  "var" VariableDeclarationNoIn() (<IN>|(<OF> {isEach = true;})) Expression() <RPAREN> Statement()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn016, true);
                                   jjtc016 = false;
                                   jjtn016.jjtSetLastToken(getToken(0));
                                 }
/*@egen*/
			         {jjtn016.setEach(isEach);} /*{jjtThis.setCoord(begin,begin); }*/)/*@bgen(jjtree)*/
                          } catch (Throwable jjte016) {
                            if (jjtc016) {
                              jjtree.clearNodeScope(jjtn016);
                              jjtc016 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte016 instanceof RuntimeException) {
                              throw (RuntimeException)jjte016;
                            }
                            if (jjte016 instanceof ParseException) {
                              throw (ParseException)jjte016;
                            }
                            throw (Error)jjte016;
                          } finally {
                            if (jjtc016) {
                              jjtree.closeNodeScope(jjtn016, true);
                              jjtn016.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                   
			|/*@bgen(jjtree) ForInStatement */
                          {
                            ASTForInStatement jjtn017 = new ASTForInStatement(JJTFORINSTATEMENT);
                            boolean jjtc017 = true;
                            jjtree.openNodeScope(jjtn017);
                            jjtn017.jjtSetFirstToken(getToken(1));
                          }
                          try {
/*@egen*/ //for in/of
			  ( LeftHandSideExpressionForIn() (<IN>|(<OF> {isEach = true;})) Expression() <RPAREN> Statement()/*@bgen(jjtree)*/
                                  {
                                    jjtree.closeNodeScope(jjtn017, true);
                                    jjtc017 = false;
                                    jjtn017.jjtSetLastToken(getToken(0));
                                  }
/*@egen*/
			          {jjtn017.setEach(isEach);}/*{jjtThis.setCoord(begin,begin); }*/)/*@bgen(jjtree)*/
                          } catch (Throwable jjte017) {
                            if (jjtc017) {
                              jjtree.clearNodeScope(jjtn017);
                              jjtc017 = false;
                            } else {
                              jjtree.popNode();
                            }
                            if (jjte017 instanceof RuntimeException) {
                              throw (RuntimeException)jjte017;
                            }
                            if (jjte017 instanceof ParseException) {
                              throw (ParseException)jjte017;
                            }
                            throw (Error)jjte017;
                          } finally {
                            if (jjtc017) {
                              jjtree.closeNodeScope(jjtn017, true);
                              jjtn017.jjtSetLastToken(getToken(0));
                            }
                          }
/*@egen*/                
	     )
	  )  
	}
	/* Section 12.7: The continue Statement */

	void ContinueStatement()                    :
	{/*@bgen(jjtree) ContinueStatement */
         ASTContinueStatement jjtn000 = new ASTContinueStatement(JJTCONTINUESTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) ContinueStatement */
                try {
/*@egen*/
		begin="continue" ( LOOKAHEAD(LabelIdentifier()) LabelIdentifier() )? EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}



	/* Section 12.8: The break Statement */

	void BreakStatement()                 :
	{/*@bgen(jjtree) BreakStatement */
         ASTBreakStatement jjtn000 = new ASTBreakStatement(JJTBREAKSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) BreakStatement */
                try {
/*@egen*/
		begin="break"( LOOKAHEAD(LabelIdentifier()) LabelIdentifier() )?  EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}


	/* Section 12.9 The return Statement */

	void ReturnStatement()                  :
	{/*@bgen(jjtree) ReturnStatement */
  ASTReturnStatement jjtn000 = new ASTReturnStatement(JJTRETURNSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ReturnStatement */
                try {
/*@egen*/
		"return"/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                         {
                           ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                           boolean jjtc001 = true;
                           jjtree.openNodeScope(jjtn001);
                           jjtn001.jjtSetFirstToken(getToken(1));
                         }
                         try {
/*@egen*/ ( LOOKAHEAD(Expression()) Expression() )?/*@bgen(jjtree)*/
                         } catch (Throwable jjte001) {
                           if (jjtc001) {
                             jjtree.clearNodeScope(jjtn001);
                             jjtc001 = false;
                           } else {
                             jjtree.popNode();
                           }
                           if (jjte001 instanceof RuntimeException) {
                             throw (RuntimeException)jjte001;
                           }
                           if (jjte001 instanceof ParseException) {
                             throw (ParseException)jjte001;
                           }
                           throw (Error)jjte001;
                         } finally {
                           if (jjtc001) {
                             jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                             jjtn001.jjtSetLastToken(getToken(0));
                           }
                         }
/*@egen*/                                         EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}


	/* Custom */
	void YieldStatement()                 :
	{/*@bgen(jjtree) YieldStatement */
         ASTYieldStatement jjtn000 = new ASTYieldStatement(JJTYIELDSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) YieldStatement */
                try {
/*@egen*/
		begin="yield" ( YieldStar() )?/*@bgen(jjtree) #EmptyExpression( jjtree . nodeArity ( ) == 0) */
                                               {
                                                 ASTEmptyExpression jjtn001 = new ASTEmptyExpression(JJTEMPTYEXPRESSION);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/ ( LOOKAHEAD(Expression()) Expression() )?/*@bgen(jjtree)*/
                                               } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte001;
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   throw (ParseException)jjte001;
                                                 }
                                                 throw (Error)jjte001;
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001,  jjtree . nodeArity ( ) == 0);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/                                         EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	void YieldStar()            :
	{/*@bgen(jjtree) YieldStar */
  ASTYieldStar jjtn000 = new ASTYieldStar(JJTYIELDSTAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) YieldStar */
                try {
/*@egen*/
		"*"/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	/* Section 12.10: The with Statement */

	void WithStatement()                :
	{/*@bgen(jjtree) WithStatement */
  ASTWithStatement jjtn000 = new ASTWithStatement(JJTWITHSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) WithStatement */
                try {
/*@egen*/
		"with" "(" Expression() ")" Statement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}


	/* 12.11 The switch Statement */

	void SwitchStatement()                  :
	{/*@bgen(jjtree) SwitchStatement */
         ASTSwitchStatement jjtn000 = new ASTSwitchStatement(JJTSWITCHSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) SwitchStatement */
                try {
/*@egen*/
		begin="switch" "(" Expression() ")" CaseBlock()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void CaseBlock()             :
	{/*@bgen(jjtree) CaseGroups */
         ASTCaseGroups jjtn000 = new ASTCaseGroups(JJTCASEGROUPS);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin,end;}
	{/*@bgen(jjtree) CaseGroups */
                try {
/*@egen*/
		begin=< LBRACE > ( CaseClauses() )? 
				( 
						end=< RBRACE > | DefaultClause() ( CaseClauses() )? end=< RBRACE > 
				)/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,end); }*/
	}

	void CaseClauses()       :
	{}
	{
		( CaseClause() )+
	}

	void CaseClause()             :
	{/*@bgen(jjtree) CaseGroup */
         ASTCaseGroup jjtn000 = new ASTCaseGroup(JJTCASEGROUP);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) CaseGroup */
                try {
/*@egen*/
		(/*@bgen(jjtree) CaseGuard */
                  {
                    ASTCaseGuard jjtn001 = new ASTCaseGuard(JJTCASEGUARD);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ ( begin="case" Expression() ":" )/*@bgen(jjtree)*/
                  } catch (Throwable jjte001) {
                    if (jjtc001) {
                      jjtree.clearNodeScope(jjtn001);
                      jjtc001 = false;
                    } else {
                      jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                      throw (RuntimeException)jjte001;
                    }
                    if (jjte001 instanceof ParseException) {
                      throw (ParseException)jjte001;
                    }
                    throw (Error)jjte001;
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/            ) ( StatementList() )?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void DefaultClause()            :
	{/*@bgen(jjtree) CaseGroup */
         ASTCaseGroup jjtn000 = new ASTCaseGroup(JJTCASEGROUP);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) CaseGroup */
                try {
/*@egen*/
		(/*@bgen(jjtree) CaseGuard */
                  {
                    ASTCaseGuard jjtn001 = new ASTCaseGuard(JJTCASEGUARD);
                    boolean jjtc001 = true;
                    jjtree.openNodeScope(jjtn001);
                    jjtn001.jjtSetFirstToken(getToken(1));
                  }
                  try {
/*@egen*/ ( begin="default" ":" )/*@bgen(jjtree)*/
                  } finally {
                    if (jjtc001) {
                      jjtree.closeNodeScope(jjtn001, true);
                      jjtn001.jjtSetLastToken(getToken(0));
                    }
                  }
/*@egen*/            ) ( StatementList() )?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}


	/* Section 12.12: Labelled Statements */

	void LabelledStatement()                   : 
	{/*@bgen(jjtree) LabelledStatement */
  ASTLabelledStatement jjtn000 = new ASTLabelledStatement(JJTLABELLEDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) LabelledStatement */
                try {
/*@egen*/
		Identifier() ":" Statement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void ThrowStatement()                 :
	{/*@bgen(jjtree) ThrowStatement */
         ASTThrowStatement jjtn000 = new ASTThrowStatement(JJTTHROWSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) ThrowStatement */
                try {
/*@egen*/
		begin="throw" Expression() EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void TryStatement()               : 
	{/*@bgen(jjtree) TryStatement */
         ASTTryStatement jjtn000 = new ASTTryStatement(JJTTRYSTATEMENT);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) TryStatement */
                try {
/*@egen*/
		begin="try" Block() 
		( 
				( Finally() | Catch() [Finally()])
		)/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}  

	void Catch()              :
	{/*@bgen(jjtree) CatchClause */
         ASTCatchClause jjtn000 = new ASTCatchClause(JJTCATCHCLAUSE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) CatchClause */
                try {
/*@egen*/
		begin="catch" "(" Identifier() ")" Block()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void Finally()                :
	{/*@bgen(jjtree) FinallyClause */
         ASTFinallyClause jjtn000 = new ASTFinallyClause(JJTFINALLYCLAUSE);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) FinallyClause */
                try {
/*@egen*/
		begin="finally" Block()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	/* Section 13: Function Definition */

	void FunctionDeclaration()                      :
	{/*@bgen(jjtree) FunctionDeclaration */
         ASTFunctionDeclaration jjtn000 = new ASTFunctionDeclaration(JJTFUNCTIONDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) FunctionDeclaration */
                try {
/*@egen*/
		begin="function" Identifier()/*@bgen(jjtree) FormalParameterList */
                                              {
                                                ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                boolean jjtc001 = true;
                                                jjtree.openNodeScope(jjtn001);
                                                jjtn001.jjtSetFirstToken(getToken(1));
                                              }
                                              try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                              } catch (Throwable jjte001) {
                                                if (jjtc001) {
                                                  jjtree.clearNodeScope(jjtn001);
                                                  jjtc001 = false;
                                                } else {
                                                  jjtree.popNode();
                                                }
                                                if (jjte001 instanceof RuntimeException) {
                                                  throw (RuntimeException)jjte001;
                                                }
                                                if (jjte001 instanceof ParseException) {
                                                  throw (ParseException)jjte001;
                                                }
                                                throw (Error)jjte001;
                                              } finally {
                                                if (jjtc001) {
                                                  jjtree.closeNodeScope(jjtn001, true);
                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                }
                                              }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/ 
	}

	void GeneratorFunctionDeclaration()                               :
	{/*@bgen(jjtree) GeneratorFunctionDeclaration */
         ASTGeneratorFunctionDeclaration jjtn000 = new ASTGeneratorFunctionDeclaration(JJTGENERATORFUNCTIONDECLARATION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) GeneratorFunctionDeclaration */
                try {
/*@egen*/
		begin="function*" Identifier()/*@bgen(jjtree) FormalParameterList */
                                               {
                                                 ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                 boolean jjtc001 = true;
                                                 jjtree.openNodeScope(jjtn001);
                                                 jjtn001.jjtSetFirstToken(getToken(1));
                                               }
                                               try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                               } catch (Throwable jjte001) {
                                                 if (jjtc001) {
                                                   jjtree.clearNodeScope(jjtn001);
                                                   jjtc001 = false;
                                                 } else {
                                                   jjtree.popNode();
                                                 }
                                                 if (jjte001 instanceof RuntimeException) {
                                                   throw (RuntimeException)jjte001;
                                                 }
                                                 if (jjte001 instanceof ParseException) {
                                                   throw (ParseException)jjte001;
                                                 }
                                                 throw (Error)jjte001;
                                               } finally {
                                                 if (jjtc001) {
                                                   jjtree.closeNodeScope(jjtn001, true);
                                                   jjtn001.jjtSetLastToken(getToken(0));
                                                 }
                                               }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/ 
	}


	void ArrowFunctionBody()        :
	{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Block */
                try {
/*@egen*/
		< LBRACE > (Statement())* < RBRACE >/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}

	void ArrowFunctionExpression()                          :
	{/*@bgen(jjtree) ArrowFunctionExpression */
  ASTArrowFunctionExpression jjtn000 = new ASTArrowFunctionExpression(JJTARROWFUNCTIONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) ArrowFunctionExpression */
        try {
/*@egen*//*@bgen(jjtree) FormalParameterList */
        {
          ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
          jjtn001.jjtSetFirstToken(getToken(1));
        }
        try {
/*@egen*/
        ( "(" (FormalParameterList())? ")" | Identifier()  )/*@bgen(jjtree)*/
        } catch (Throwable jjte001) {
          if (jjtc001) {
            jjtree.clearNodeScope(jjtn001);
            jjtc001 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte001 instanceof RuntimeException) {
            throw (RuntimeException)jjte001;
          }
          if (jjte001 instanceof ParseException) {
            throw (ParseException)jjte001;
          }
          throw (Error)jjte001;
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
            jjtn001.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/                      <ARROW>
        ( LOOKAHEAD(ArrowFunctionBody()) ArrowFunctionBody() |  LOOKAHEAD(ExpressionNoIn()) ExpressionNoIn() )/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
            jjtn000.jjtSetLastToken(getToken(0));
          }
        }
/*@egen*/


//ActionOnAssign()
// | Expression()

//LOOKAHEAD(ArrowFunctionBody()
//LOOKAHEAD(ExpressionNoIn())
        //| LOOKAHEAD(PrimaryExpression()) PrimaryExpression()
        // LOOKAHEAD(ActionOnAssign()) ActionOnAssign()
		//| ConditionalExpression() 

        //( LOOKAHEAD(ArrowFunctionBody()) ArrowFunctionBody() | LOOKAHEAD(Expression())Expression())
        //ConditionalExpression() 
		//( (LOOKAHEAD(FunctionBody()) FunctionBody()) |  (LOOKAHEAD(Expression()) Expression())  )
        //(ArrowFunctionBody() |  PrimaryExpression())
        //(ArrowFunctionBody() |  ( LOOKAHEAD(MemberExpression() "(") CallExpression() | MemberExpression() ))
        //(ArrowFunctionBody() |  ( LOOKAHEAD(MemberExpression() "(") CallExpression() | MemberExpression() ))
        //( "(" FormalParameterList() ")" | Identifier()  ) #FormalParameterList <ARROW> (FunctionBody() | ActionOnAssign() | LogicalORExpression())
		//"(" ( FormalParameterList() )? ")" #ArrowParameterList "=>" (FunctionBody())
		//( ("(" ( FormalParameterList() )? ")") | Identifier()) #ArrowParameterList "=>" FunctionBody()
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void FunctionExpression()                     :
	{/*@bgen(jjtree) FunctionExpression */
         ASTFunctionExpression jjtn000 = new ASTFunctionExpression(JJTFUNCTIONEXPRESSION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) FunctionExpression */
                try {
/*@egen*/
		begin="function" ( Identifier() )?/*@bgen(jjtree) FormalParameterList */
                                                   {
                                                     ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                     boolean jjtc001 = true;
                                                     jjtree.openNodeScope(jjtn001);
                                                     jjtn001.jjtSetFirstToken(getToken(1));
                                                   }
                                                   try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                                   } catch (Throwable jjte001) {
                                                     if (jjtc001) {
                                                       jjtree.clearNodeScope(jjtn001);
                                                       jjtc001 = false;
                                                     } else {
                                                       jjtree.popNode();
                                                     }
                                                     if (jjte001 instanceof RuntimeException) {
                                                       throw (RuntimeException)jjte001;
                                                     }
                                                     if (jjte001 instanceof ParseException) {
                                                       throw (ParseException)jjte001;
                                                     }
                                                     throw (Error)jjte001;
                                                   } finally {
                                                     if (jjtc001) {
                                                       jjtree.closeNodeScope(jjtn001, true);
                                                       jjtn001.jjtSetLastToken(getToken(0));
                                                     }
                                                   }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void GeneratorFunctionExpression()                              :
	{/*@bgen(jjtree) GeneratorFunctionExpression */
         ASTGeneratorFunctionExpression jjtn000 = new ASTGeneratorFunctionExpression(JJTGENERATORFUNCTIONEXPRESSION);
         boolean jjtc000 = true;
         jjtree.openNodeScope(jjtn000);
         jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token begin;}
	{/*@bgen(jjtree) GeneratorFunctionExpression */
                try {
/*@egen*/
		begin="function*" ( Identifier() )?/*@bgen(jjtree) FormalParameterList */
                                                    {
                                                      ASTFormalParameterList jjtn001 = new ASTFormalParameterList(JJTFORMALPARAMETERLIST);
                                                      boolean jjtc001 = true;
                                                      jjtree.openNodeScope(jjtn001);
                                                      jjtn001.jjtSetFirstToken(getToken(1));
                                                    }
                                                    try {
/*@egen*/ ( "(" ( FormalParameterList() )? ")" )/*@bgen(jjtree)*/
                                                    } catch (Throwable jjte001) {
                                                      if (jjtc001) {
                                                        jjtree.clearNodeScope(jjtn001);
                                                        jjtc001 = false;
                                                      } else {
                                                        jjtree.popNode();
                                                      }
                                                      if (jjte001 instanceof RuntimeException) {
                                                        throw (RuntimeException)jjte001;
                                                      }
                                                      if (jjte001 instanceof ParseException) {
                                                        throw (ParseException)jjte001;
                                                      }
                                                      throw (Error)jjte001;
                                                    } finally {
                                                      if (jjtc001) {
                                                        jjtree.closeNodeScope(jjtn001, true);
                                                        jjtn001.jjtSetLastToken(getToken(0));
                                                      }
                                                    }
/*@egen*/                      FunctionBody()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
		/*{jjtThis.setCoord(begin,begin); }*/
	}

	void FormalParameterList()       :
	{}
	{
		(Identifier()) ( "," (Identifier()) )*
	}

	void FunctionBody()        :
	{/*@bgen(jjtree) Block */
  ASTBlock jjtn000 = new ASTBlock(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) Block */
                try {
/*@egen*/
		< LBRACE > (SourceElements())? < RBRACE >/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}


	/* Section 14: Program *

	ASTProgram Program() #Program :
	{}
	{  
		JavaScript()
				<EOF>
		{ return jjtThis; }
	}
	/**/

	void JavaScript()            :
	{/*@bgen(jjtree) JavaScript */
  ASTJavaScript jjtn000 = new ASTJavaScript(JJTJAVASCRIPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) JavaScript */
          try {
/*@egen*/
	  (SourceElements())?/*@bgen(jjtree)*/
          } catch (Throwable jjte000) {
            if (jjtc000) {
              jjtree.clearNodeScope(jjtn000);
              jjtc000 = false;
            } else {
              jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
              throw (RuntimeException)jjte000;
            }
            if (jjte000 instanceof ParseException) {
              throw (ParseException)jjte000;
            }
            throw (Error)jjte000;
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
              jjtn000.jjtSetLastToken(getToken(0));
            }
          }
/*@egen*/
	}


	void SourceElements()       :
	{}
	{
		(SourceElement())+ 
	}

	void SourceElement()       :
	{}
	{
		LOOKAHEAD("function*" Identifier()) GeneratorFunctionDeclaration() | LOOKAHEAD("function" Identifier()) FunctionDeclaration() | Statement()
	}





	/*
	 * Grammar for parsing JScript .NET contructs: ( import System; var contents :
	 * String = reader.ReadToEnd(); ) Refer: src/hostenv_jsc.js
	 */

	void ImportStatement():
	{}
	{
		"import" Name() [ "." "*" ] EndStatement()
	}


	void Name():
	{}
	{
		<IDENTIFIER_NAME> ( LOOKAHEAD(2) < DOT > <IDENTIFIER_NAME> )*
	}


	void JScriptVarStatement()                    :
	{/*@bgen(jjtree) VariableStatement */
  ASTVariableStatement jjtn000 = new ASTVariableStatement(JJTVARIABLESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) VariableStatement */
                try {
/*@egen*/
		< VAR > JScriptVarDeclarationList() EndStatement()/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void JScriptVarDeclarationList()                              :
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
  ASTVariableDeclarationList jjtn000 = new ASTVariableDeclarationList(JJTVARIABLEDECLARATIONLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) #VariableDeclarationList(> 1) */
                try {
/*@egen*/
		JScriptVarDeclaration() ( < COMMA > JScriptVarDeclaration() )*/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/
	}

	void JScriptVarDeclaration()                      :
	{/*@bgen(jjtree) VariableDeclaration */
  ASTVariableDeclaration jjtn000 = new ASTVariableDeclaration(JJTVARIABLEDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
	{/*@bgen(jjtree) VariableDeclaration */
                try {
/*@egen*/
		Identifier() ":" <IDENTIFIER_NAME> ( Initialiser() )?/*@bgen(jjtree)*/
                } catch (Throwable jjte000) {
                  if (jjtc000) {
                    jjtree.clearNodeScope(jjtn000);
                    jjtc000 = false;
                  } else {
                    jjtree.popNode();
                  }
                  if (jjte000 instanceof RuntimeException) {
                    throw (RuntimeException)jjte000;
                  }
                  if (jjte000 instanceof ParseException) {
                    throw (ParseException)jjte000;
                  }
                  throw (Error)jjte000;
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtn000.jjtSetLastToken(getToken(0));
                  }
                }
/*@egen*/ 
	}

	Token EndStatement()      :
	{Token end;}
	{
		try
		{
			end=< SEMICOLON >
			{return end;}
	
	    }catch(ParseException e)
	    {  
			if(e.expectedTokenSet.size() > MAX_EXCEPTION_TOKEN_SIZE
			  || (e.expectedTokenSet.size() == 1  && e.expectedTokenSet.get(0).equals(";"))){
			    
				Token foundToken = getToken(1);
				String line = "at line " + e.currentToken.beginLine + ", column " + e.currentToken.beginColumn;
				String message = line+": did you forget a ';'?";
				if (foundToken != null){
			 		message+=" (possible errant token: "+ foundToken + ")";
				}
			    e = new ParseException(message);
			    SimpleNode currNode = getCurrentNode();
				exceptions.add(e);
				ParseExceptionData excData = new ParseExceptionData(e);
				 if (currNode != null){
					currNode.setExceptionData(excData);
				}
			}else{
			  error_skipto(e, SEMICOLON);
			}
			
		    //
	    }

	  {return new Token(SEMICOLON);}
	  
	}

JAVACODE
void error_skipto(ParseException e, int kind) {
//  ParseException e = generateParseException();  // generate the exception object.
//  System.out.println(e.toString());  // print the error message
  exceptions.add(e);
  SimpleNode currNode = getCurrentNode();
  ParseExceptionData excData = new ParseExceptionData(e);
  excData.setSkippedToToken(kind);
  Token t = null;
//  int braceCount = 0;
  skipper: do {
    Token test = getToken(1);
//    System.out.println(exprBraceCount);
	if(test == null || test.kind == END)
	{	  
//		System.out.println("I'm breaking here with:"+test);
    	break;
    }
	switch(test.kind)
	{
	  case RBRACE: 
	  		exprBraceCount--;
	  		if(exprBraceCount < 0)
	  			break skipper;
	  		break;
	}

    
    t = getNextToken();

    if(t != null)
    	excData.addSkippedToken(t);
//	System.out.println("Skipped: "+t+" token("+test+")");
  } while (t != null && (t.kind != kind && t.kind != EOF));
    // The above loop consumes tokens all the way up to a token of
// "kind".  We use a do-while loop rather than a while because the
// current token is the one immediately before the erroneous token
// (in our case the token immediately before what should have been
// "if"/"while".

	if (currNode != null){
	 currNode.setExceptionData(excData);
	}
	if(t == null || t.kind == EOF){
		throw new StopParseException();
	}
}

JAVACODE
void error_noSkip(ParseException e) {
  System.out.println("--------------NO SKIP-----------------"); 
//  ParseException e = generateParseException();  // generate the exception object.
//  System.out.println(e.toString());  // print the error message
  SimpleNode currNode = getCurrentNode();
  ParseExceptionData excData = new ParseExceptionData(e);
    if (currNode != null){
	 currNode.setExceptionData(excData);
  	}
}