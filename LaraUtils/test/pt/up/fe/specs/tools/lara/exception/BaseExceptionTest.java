package pt.up.fe.specs.tools.lara.exception;

import org.junit.jupiter.api.Test;
import static org.assertj.core.api.Assertions.*;

/**
 * Unit tests for BaseException abstract class.
 */
class BaseExceptionTest {

    @Test
    void testConstructor_withThrowable_storesCause() {
        // Given
        RuntimeException cause = new RuntimeException("Test cause");
        
        // When
        TestBaseException exception = new TestBaseException(cause);
        
        // Then
        assertThat(exception.getCause()).isSameAs(cause);
    }

    @Test
    void testConstructor_withMessageAndThrowable_storesBoth() {
        // Given
        String message = "Test message";
        RuntimeException cause = new RuntimeException("Test cause");
        
        // When
        TestBaseExceptionWithMessage exception = new TestBaseExceptionWithMessage(message, cause);
        
        // Then
        assertThat(exception.getCause()).isSameAs(cause);
        // The message is generated by generateMessage(), not the constructor message
        assertThat(exception.getMessage()).contains("Test with message:");
    }

    @Test
    void testGenerateSimpleMessage_returnsEvaluationMessage() {
        // Given
        TestBaseException exception = new TestBaseException(new RuntimeException());
        
        // When
        String simpleMessage = exception.getSimpleMessage();
        
        // Then
        assertThat(simpleMessage).isEqualTo(LARAExceptionBuilder.getEvaluationExceptionMessage());
    }

    @Test
    void testGetMessage_callsGenerateMessage() {
        // Given
        TestBaseException exception = new TestBaseException(new RuntimeException());
        
        // When
        String message = exception.getMessage();
        
        // Then
        assertThat(message).startsWith("Test exception:");
        assertThat(message).contains(LARAExceptionBuilder.getEvaluationExceptionMessage());
    }

    @Test
    void testGenerateRuntimeException_throwsRuntimeException() {
        // Given
        TestBaseException exception = new TestBaseException(new RuntimeException("Original"));
        
        // When & Then
        assertThatThrownBy(exception::generateRuntimeException)
                .isInstanceOf(RuntimeException.class)
                .hasMessageContaining("when evaluating javascript");
    }

    @Test
    void testGenerateExceptionBuilder_returnsConfiguredBuilder() {
        // Given
        RuntimeException cause = new RuntimeException("Test cause");
        TestBaseException exception = new TestBaseException(cause);
        
        // When
        LARAExceptionBuilder builder = exception.generateExceptionBuilder();
        
        // Then
        assertThat(builder).isNotNull();
        assertThat(builder.getMessages()).hasSize(1);
        assertThat(builder.getMessages().get(0)).isEqualTo(LARAExceptionBuilder.getEvaluationExceptionMessage());
        assertThat(builder.getLastException()).isSameAs(cause);
        assertThat(builder.getLastLARAException()).isSameAs(exception);
    }

    @Test
    void testGenerateException_withNoCause_setsThisAsLastException() {
        // Given
        TestBaseException exception = new TestBaseException(null);
        LARAExceptionBuilder builder = new LARAExceptionBuilder();
        
        // When
        exception.generateExceptionInvoker(builder);
        
        // Then
        assertThat(builder.getLastException()).isSameAs(exception);
        assertThat(builder.getLastLARAException()).isSameAs(exception);
        assertThat(builder.getLastTrace()).isNotNull();
    }

    @Test
    void testGenerateException_withNonLARACause_setsNonLARACauseAsLast() {
        // Given
        RuntimeException cause = new RuntimeException("Non-LARA cause");
        TestBaseException exception = new TestBaseException(cause);
        LARAExceptionBuilder builder = new LARAExceptionBuilder();
        
        // When
        exception.generateExceptionInvoker(builder);
        
        // Then
        assertThat(builder.getLastException()).isSameAs(cause);
        assertThat(builder.getLastLARAException()).isSameAs(exception);
        assertThat(builder.getLastTrace()).isNotNull();
    }

    @Test
    void testGenerateException_withLARACause_processesRecursively() {
        // Given
        TestBaseException innerException = new TestBaseException(new RuntimeException("Inner cause"));
        TestBaseException outerException = new TestBaseException(innerException);
        LARAExceptionBuilder builder = new LARAExceptionBuilder();
        
        // When
        outerException.generateExceptionInvoker(builder);
        
        // Then
        assertThat(builder.getMessages()).hasSize(2);
        assertThat(builder.getLastLARAException()).isSameAs(innerException);
    }

    @Test
    void testGenerateException_withNullMessage_skipsMessageAddition() {
        // Given
        TestBaseExceptionWithNullMessage exception = new TestBaseExceptionWithNullMessage(new RuntimeException());
        LARAExceptionBuilder builder = new LARAExceptionBuilder();
        
        // When
        exception.generateExceptionInvoker(builder);
        
        // Then
        assertThat(builder.getMessages()).isEmpty();
    }

    @Test
    void testUseLastMessage_returnsFalse() {
        // Given
        TestBaseException exception = new TestBaseException(new RuntimeException());
        
        // When
        boolean useLastMessage = exception.useLastMessage();
        
        // Then
        assertThat(useLastMessage).isFalse();
    }

    @Test
    void testExceptionChaining_withMultipleLevels() {
        // Given
        RuntimeException rootCause = new RuntimeException("Root");
        TestBaseException level1 = new TestBaseException(rootCause);
        TestBaseException level2 = new TestBaseException(level1);
        TestBaseException level3 = new TestBaseException(level2);
        
        // When
        LARAExceptionBuilder builder = level3.generateExceptionBuilder();
        
        // Then
        assertThat(builder.getMessages()).hasSize(3);
        assertThat(builder.getLastException()).isSameAs(rootCause);
        assertThat(builder.getLastLARAException()).isSameAs(level1);
    }

    /**
     * Simple concrete implementation of BaseException for testing.
     */
    private static class TestBaseException extends BaseException {
        public TestBaseException(Throwable cause) {
            super(cause);
        }

        @Override
        protected String generateMessage() {
            return "Test exception: " + generateSimpleMessage();
        }

        // Public method to access protected generateException for testing
        public void generateExceptionInvoker(LARAExceptionBuilder builder) {
            generateException(builder);
        }
    }

    /**
     * BaseException implementation with message constructor for testing.
     */
    private static class TestBaseExceptionWithMessage extends BaseException {
        public TestBaseExceptionWithMessage(String message, Throwable cause) {
            super(message, cause);
        }

        @Override
        protected String generateMessage() {
            return "Test with message: " + generateSimpleMessage();
        }
    }

    /**
     * BaseException implementation that returns null for simple message.
     */
    private static class TestBaseExceptionWithNullMessage extends BaseException {
        public TestBaseExceptionWithNullMessage(Throwable cause) {
            super(cause);
        }

        @Override
        protected String generateMessage() {
            return "Test exception with null simple message";
        }

        @Override
        protected String generateSimpleMessage() {
            return null;
        }

        // Public method to access protected generateException for testing
        public void generateExceptionInvoker(LARAExceptionBuilder builder) {
            generateException(builder);
        }
    }
}
