import fs from "fs";
import path from "path";

/*
const fs = require("fs");
const path = require("path");
const { promisify } = require("util");
*/
// Generated by ChatGPT 3.5
/*
async function copyFiles(sourceDir, destinationDir, extension) {
  var copiedFiles = [];
  console.log("1");
  // Read the source directory
  await fs.readdir(sourceDir, (err, files) => {
    console.log("1.5");
    if (err) {
      console.error("Error reading directory:", err);
      return;
    }
    console.log("2");
    // Process each file in the directory
    files.forEach((file) => {
      const sourcePath = path.join(sourceDir, file);
      const destinationPath = path.join(destinationDir, file);

      // Get the file's stats
      fs.stat(sourcePath, (err, stats) => {
        if (err) {
          console.error("Error reading file stats:", err);
          return;
        }
        console.log("3");
        // If it's a directory, recursively copy its contents
        if (stats.isDirectory()) {
          copiedFiles.push(
            ...copyFiles(sourcePath, destinationPath, extension)
          );
        }

        // If it's a .js file, copy it to the destination directory
        if (stats.isFile() && path.extname(file) === `.${extension}`) {
          fs.copyFile(sourcePath, destinationPath, (err) => {
            if (err) {
              console.error("Error copying file:", err);
            } else {
              console.log("Copied:", sourcePath, "->", destinationPath);
              copiedFiles.push(destinationPath);
            }
          });
        }
      });
    });
  });

  return copiedFiles;
}
*/

/*
const readdir = promisify(fs.readdir);
const stat = promisify(fs.stat);
const mkdir = promisify(fs.mkdir);
const copyFile = promisify(fs.copyFile);

async function copyFiles(sourceDir, destinationDir, extension) {
  const copiedFiles = [];

  const files = await readdir(sourceDir);

  for (const file of files) {
    console.log("FILE: " + file);
    const sourcePath = path.join(sourceDir, file);
    const destinationPath = path.join(destinationDir, file);

    const fileStat = await stat(sourcePath);

    if (fileStat.isDirectory()) {
      const newDestinationDir = path.join(destinationDir, file);
      await mkdir(newDestinationDir, { recursive: true });
      const subDirectoryCopiedFiles = await copyFiles(
        sourcePath,
        newDestinationDir,
        extension
      );
      copiedFiles.push(...subDirectoryCopiedFiles);
    } else if (file.endsWith(extension)) {
      await copyFile(sourcePath, destinationPath);
      copiedFiles.push(destinationPath);
    }
  }

  return copiedFiles;
}
*/

function copyFiles(sourceDir, destinationDir, extension) {
  const copiedFiles = [];

  const files = fs.readdirSync(sourceDir);

  for (const file of files) {
    //console.log("FILE: " + file);
    const sourcePath = path.join(sourceDir, file);
    const destinationPath = path.join(destinationDir, file);

    const fileStat = fs.statSync(sourcePath);

    if (fileStat.isDirectory()) {
      const newDestinationDir = path.join(destinationDir, file);
      fs.mkdirSync(newDestinationDir, { recursive: true });
      const subDirectoryCopiedFiles = copyFiles(
        sourcePath,
        newDestinationDir,
        extension
      );
      copiedFiles.push(...subDirectoryCopiedFiles);
    } else if (file.endsWith(extension)) {
      fs.copyFileSync(sourcePath, destinationPath);
      console.log("Copied:", sourcePath, "->", destinationPath);
      copiedFiles.push(destinationPath);
    }
  }

  return copiedFiles;
}

// Copy JS files to Java project folder

const jsSourceFolder = "dist";
const jsDestinationFolder = "../LaraApi/src-lara";

const copiedFiles = copyFiles(jsSourceFolder, jsDestinationFolder, ".js");

/*
const copiedFiles = [];

copyFiles(jsSourceFolder, jsDestinationFolder, ".js").then((result) =>
  copiedFiles.push(...result)
);
*/

//console.log(copiedFiles);

// Generate the Java file with the resources
const javaClassname = "LaraApiJsResource";
const javaDestinationFile =
  "../LaraApi/src-java/pt/up/fe/specs/lara/" + javaClassname + ".java";

const resources = {};

copiedFiles.forEach((file) => {
  resources[path.basename(file)] = path
    .relative(jsDestinationFolder, file)
    .toString()
    .replace(/\\/g, "/");
});

/*
const resources = copiedFiles.map((file) =>
  path.relative(jsDestinationFolder, file).toString().replace(/\\/g, "/")
);
*/
//console.log(resources);

const resourcesCode =
  Object.entries(resources)
    .filter(([key, value]) => value !== "index.js")
    .map(([key, value]) => {
      const enumName = key.toUpperCase().replace(/\./g, "_");
      return `    ${enumName}("${value}")`;
    })
    .join(",\n") + ";";

/*
for (const key in resources) {
}
*/

const currentYear = new Date().getFullYear();

const javaCode = `
/**
 * Copyright ${currentYear} SPeCS.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
 * an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License. under the License.
 */

package pt.up.fe.specs.lara;

import org.lara.interpreter.weaver.utils.LaraResourceProvider;

/**
 * This file has been automatically generated.
 * 
 * @author Joao Bispo
 *
 */
public enum ${javaClassname} implements LaraResourceProvider {

${resourcesCode}

    private final String resource;

    /**
     * @param resource
     */
    private ${javaClassname} (String resource) {
        this.resource = resource;
    }

    /* (non-Javadoc)
     * @see org.suikasoft.SharedLibrary.Interfaces.ResourceProvider#getResource()
     */
    @Override
    public String getOriginalResource() {
        return resource;
    }

}
`;

//console.log(javaCode);

fs.writeFileSync(javaDestinationFile, javaCode);
console.log("File '" + javaDestinationFile + "' written");
