import lcl.metrics.Metric;

/**
 * Measures the Size of procedures or functions
 * @constructor
 */
function SIZE1() {
	var id = "LH-SIZE1";
	var name = "Size of procedures or functions";
	var sigla = "SIZE1";
	var author = "Li and Henry";
	var year = 1993;
	var description = "Size of procedures or functions (SIZE1) counts the number of semicolons in a class.";

    // Parent constructor    
    Metric.call(this, id, name, sigla, author, year, description);
}

// Inheritance
SIZE1.prototype = Object.create(Metric.prototype);


// Override
SIZE1.prototype.calculateForClass = function($class) {

	var regexToRemoveComments = /\/\*[\s\S]*?\*\/|\/\/.*/g;


	var regexp = RegExp(';','g');
	var classCode = $class.code.replace(regexToRemoveComments,"");
	var regexpCases = $class.code.match(regexp);
	var numberSemiColonsClass = 0;
	if(regexpCases !== null)
		numberSemiColonsClass = regexpCases.length;

	for ($method of $class.allMethods){
		
		// if method not inside class
		if($method.ancestor("class") === undefined)
		{
			var methodCode = $method.code.replace(regexToRemoveComments,"");
			regexpCases = methodCode.match(regexp);
			if(regexpCases !== null)
				numberSemiColonsClass += regexpCases.length;
		}		

	}	
	
	return numberSemiColonsClass;
}
