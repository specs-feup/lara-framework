import weaver.jp.ClassTypeJp;

/**
 * 
 *
 * @class
 */
function ClassJp(astNode) {
    // Parent constructor
    ClassTypeJp.call(this,astNode);
    
}
// Inheritance
ClassJp.prototype = Object.create(ClassTypeJp.prototype);
ClassJp.prototype.constructor = ClassJp;

// JoinPoint Types
ClassJp._JP_TYPES = new Set();
_lara_dummy_ = ClassJp._JP_TYPES.add('class');
_lara_dummy_ = ClassJp._JP_TYPES.add('classType');
_lara_dummy_ = ClassJp._JP_TYPES.add('decl');
_lara_dummy_ = ClassJp._JP_TYPES.add('stmt');
_lara_dummy_ = ClassJp._JP_TYPES.add('joinpoint');


ClassJp.prototype.instanceOf = function(joinPointType) {
	return ClassJp._JP_TYPES.has(joinPointType);
	
	/*
	if(joinPointType === this.joinPointType) {
		return true;
	}
	
	return (new ClassTypeJp(this.astNode)).instanceOf(joinPointType);
	*/
}


/**
 * @return an Iterator with the types of this join point.
 */
ClassJp.prototype.types = function(joinPointType) {
	return ClassJp._JP_TYPES.values();
}

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'class'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'id', {
	configurable: true,
	get: function () { throw this.constructor.name + '.id not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'name', {
	configurable: true,
	get: function () { throw this.constructor.name + '.name not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'superClasses', {
	configurable: true,
	get: function () { throw this.constructor.name + '.superClasses not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allSuperClasses', {
	configurable: true,
	get: function () { throw this.constructor.name + '.allSuperClasses not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allMethods', {
	configurable: true,
	get: function () { throw this.constructor.name + '.allMethods not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'methods', {
	configurable: true,
	get: function () { throw this.constructor.name + '.methods not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'listOfAllMethods', {
	configurable: true,
	get: function () { throw this.constructor.name + '.listOfAllMethods not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'constructors', {
	configurable: true,
	get: function () { throw this.constructor.name + '.constructors not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'fields', {
	configurable: true,
	get: function () { throw this.constructor.name + '.fields not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'kind', {
	configurable: true,
	get: function () { throw this.constructor.name + '.kind not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'isCustom', {
	configurable: true,
	get: function () { throw this.constructor.name + '.isCustom not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'interfaces', {
	configurable: true,
	get: function () { throw this.constructor.name + '.interfaces not implemented'; }
});

_lara_dummy_ = Object.defineProperty(ClassJp.prototype, 'allInterfaces', {
	configurable: true,
	get: function () { throw this.constructor.name + '.allInterfaces not implemented'; }
});

