import weaver.jp.StmtJp;

/**
 * 
 *
 * @class
 */
function DeclJp(astNode) {
    // Parent constructor
    StmtJp.call(this,astNode);
    
}
// Inheritance
DeclJp.prototype = Object.create(StmtJp.prototype);
DeclJp.prototype.constructor = DeclJp;

// JoinPoint Types
DeclJp._JP_TYPES = new Set();
_lara_dummy_ = DeclJp._JP_TYPES.add('decl');
_lara_dummy_ = DeclJp._JP_TYPES.add('stmt');
_lara_dummy_ = DeclJp._JP_TYPES.add('joinpoint');


DeclJp.prototype.instanceOf = function(joinPointType) {
	return DeclJp._JP_TYPES.has(joinPointType);
	
	/*
	if(joinPointType === this.joinPointType) {
		return true;
	}
	
	return (new StmtJp(this.astNode)).instanceOf(joinPointType);
	*/
}


/**
 * @return an Iterator with the types of this join point.
 */
DeclJp.prototype.types = function(joinPointType) {
	return DeclJp._JP_TYPES.values();
}

_lara_dummy_ = Object.defineProperty(DeclJp.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'decl'; }
});

_lara_dummy_ = Object.defineProperty(DeclJp.prototype, 'isStatic', {
	configurable: true,
	get: function () { throw this.constructor.name + '.isStatic not implemented'; }
});

