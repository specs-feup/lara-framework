import weaver.jp.FunctionJp;

/**
 * 
 *
 * @class
 */
function MethodJp(astNode) {
    // Parent constructor
    FunctionJp.call(this,astNode);
    
}
// Inheritance
MethodJp.prototype = Object.create(FunctionJp.prototype);
MethodJp.prototype.constructor = MethodJp;

// JoinPoint Types
MethodJp._JP_TYPES = new Set();
_lara_dummy_ = MethodJp._JP_TYPES.add('method');
_lara_dummy_ = MethodJp._JP_TYPES.add('function');
_lara_dummy_ = MethodJp._JP_TYPES.add('decl');
_lara_dummy_ = MethodJp._JP_TYPES.add('stmt');
_lara_dummy_ = MethodJp._JP_TYPES.add('joinpoint');


MethodJp.prototype.instanceOf = function(joinPointType) {
	return MethodJp._JP_TYPES.has(joinPointType);
	
	/*
	if(joinPointType === this.joinPointType) {
		return true;
	}
	
	return (new FunctionJp(this.astNode)).instanceOf(joinPointType);
	*/
}


/**
 * @return an Iterator with the types of this join point.
 */
MethodJp.prototype.types = function(joinPointType) {
	return MethodJp._JP_TYPES.values();
}

_lara_dummy_ = Object.defineProperty(MethodJp.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'method'; }
});

_lara_dummy_ = Object.defineProperty(MethodJp.prototype, 'class', {
	configurable: true,
	get: function () { throw this.constructor.name + '.class not implemented'; }
});

_lara_dummy_ = Object.defineProperty(MethodJp.prototype, 'isCustom', {
	configurable: true,
	get: function () { throw this.constructor.name + '.isCustom not implemented'; }
});

