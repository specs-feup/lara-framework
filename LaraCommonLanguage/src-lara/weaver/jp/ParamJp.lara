import weaver.jp.VarDeclJp;

/**
 * 
 *
 * @class
 */
function ParamJp(astNode) {
    // Parent constructor
    VarDeclJp.call(this,astNode);
    
}
// Inheritance
ParamJp.prototype = Object.create(VarDeclJp.prototype);
ParamJp.prototype.constructor = ParamJp;

// JoinPoint Types
ParamJp._JP_TYPES = new Set();
_lara_dummy_ = ParamJp._JP_TYPES.add('param');
_lara_dummy_ = ParamJp._JP_TYPES.add('varDecl');
_lara_dummy_ = ParamJp._JP_TYPES.add('decl');
_lara_dummy_ = ParamJp._JP_TYPES.add('stmt');
_lara_dummy_ = ParamJp._JP_TYPES.add('joinpoint');


ParamJp.prototype.instanceOf = function(joinPointType) {
	return ParamJp._JP_TYPES.has(joinPointType);
	
	/*
	if(joinPointType === this.joinPointType) {
		return true;
	}
	
	return (new VarDeclJp(this.astNode)).instanceOf(joinPointType);
	*/
}


/**
 * @return an Iterator with the types of this join point.
 */
ParamJp.prototype.types = function(joinPointType) {
	return ParamJp._JP_TYPES.values();
}

_lara_dummy_ = Object.defineProperty(ParamJp.prototype, 'joinPointType', {
	configurable: true,
	get: function () { return 'param'; }
});

_lara_dummy_ = Object.defineProperty(ParamJp.prototype, 'function', {
	configurable: true,
	get: function () { throw this.constructor.name + '.function not implemented'; }
});

